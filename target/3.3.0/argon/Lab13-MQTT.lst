
/Users/cademissner/Desktop/IoT/Lab13-MQTT/target/3.3.0/argon/Lab13-MQTT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005c24  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b9c40  000b9c40  00009c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b9c64  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e510  000b9c68  0001e510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000274  2003e57c  2003e57c  0002e57c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b9cd4  000b9cd4  00029cd4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b9cfc  000b9cfc  00029cfc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00162d8c  00000000  00000000  00029d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00018e89  00000000  00000000  0018ca8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00049c57  00000000  00000000  001a5915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003590  00000000  00000000  001ef56c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000b9d0  00000000  00000000  001f2afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00044df4  00000000  00000000  001fe4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00057561  00000000  00000000  002432c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013af06  00000000  00000000  0029a821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00009e5c  00000000  00000000  003d5728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f004 fa45 	bl	b84bc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f004 fa4d 	bl	b84d8 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e510 	.word	0x2003e510
   b4048:	000b9c68 	.word	0x000b9c68
   b404c:	2003e57c 	.word	0x2003e57c
   b4050:	2003e57c 	.word	0x2003e57c
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f003 ffa5 	bl	b7fac <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b9c18 	.word	0x000b9c18
   b407c:	000b9c3c 	.word	0x000b9c3c

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 bd68 	b.w	b4b54 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 fc47 	bl	b4918 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f003 bf45 	b.w	b7f1c <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f002 beb1 	b.w	b6df8 <malloc>

000b4096 <_Znaj>:
   b4096:	f002 beaf 	b.w	b6df8 <malloc>

000b409a <_ZdaPv>:
   b409a:	f002 beb5 	b.w	b6e08 <free>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f002 beb3 	b.w	b6e08 <free>
	...

000b40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f002 fdf0 	bl	b6c90 <panic_>
  while (1);
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b6911 	.word	0x000b6911
   b40b8:	000b8788 	.word	0x000b8788

000b40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_Z8callbackPcPhj>:
  message = param.asStr();
  Serial.println(message);
  client.publish("christianity", message);
}

void callback(char* topic, byte* payload, unsigned int length) {
   b40cc:	b5b0      	push	{r4, r5, r7, lr}
  char p[length + 1];
   b40ce:	f102 0308 	add.w	r3, r2, #8
void callback(char* topic, byte* payload, unsigned int length) {
   b40d2:	b084      	sub	sp, #16
  char p[length + 1];
   b40d4:	f023 0307 	bic.w	r3, r3, #7
void callback(char* topic, byte* payload, unsigned int length) {
   b40d8:	af00      	add	r7, sp, #0
  char p[length + 1];
   b40da:	ebad 0d03 	sub.w	sp, sp, r3
void callback(char* topic, byte* payload, unsigned int length) {
   b40de:	4614      	mov	r4, r2
  memcpy(p, payload, length);
   b40e0:	4668      	mov	r0, sp
   b40e2:	f004 f9eb 	bl	b84bc <memcpy>
  p[length] = NULL;
   b40e6:	2300      	movs	r3, #0

  if (String(p).equals("1")) {
   b40e8:	4669      	mov	r1, sp
   b40ea:	4638      	mov	r0, r7
  p[length] = NULL;
   b40ec:	f80d 3004 	strb.w	r3, [sp, r4]
  if (String(p).equals("1")) {
   b40f0:	f003 fa77 	bl	b75e2 <_ZN6StringC1EPK19__FlashStringHelper>
   b40f4:	4922      	ldr	r1, [pc, #136]	; (b4180 <_Z8callbackPcPhj+0xb4>)
   b40f6:	4638      	mov	r0, r7
   b40f8:	f003 fabb 	bl	b7672 <_ZNK6String6equalsEPKc>
   b40fc:	4604      	mov	r4, r0
   b40fe:	4638      	mov	r0, r7
   b4100:	f003 fa24 	bl	b754c <_ZN6StringD1Ev>
   b4104:	b134      	cbz	r4, b4114 <_Z8callbackPcPhj+0x48>
    digitalWrite(D7, HIGH);
   b4106:	2101      	movs	r1, #1
  } else if (String(p).equals("0")) {
    digitalWrite(D7, LOW);
   b4108:	2007      	movs	r0, #7
   b410a:	f003 ffd0 	bl	b80ae <digitalWrite>
    display.setCursor(0,0);
    display.setTextSize(2);
    display.println(String(p));
    display.display();
  }
}
   b410e:	3710      	adds	r7, #16
   b4110:	46bd      	mov	sp, r7
   b4112:	bdb0      	pop	{r4, r5, r7, pc}
  } else if (String(p).equals("0")) {
   b4114:	4669      	mov	r1, sp
   b4116:	4638      	mov	r0, r7
   b4118:	f003 fa63 	bl	b75e2 <_ZN6StringC1EPK19__FlashStringHelper>
   b411c:	4919      	ldr	r1, [pc, #100]	; (b4184 <_Z8callbackPcPhj+0xb8>)
   b411e:	4638      	mov	r0, r7
   b4120:	f003 faa7 	bl	b7672 <_ZNK6String6equalsEPKc>
   b4124:	4605      	mov	r5, r0
   b4126:	4638      	mov	r0, r7
   b4128:	f003 fa10 	bl	b754c <_ZN6StringD1Ev>
   b412c:	b10d      	cbz	r5, b4132 <_Z8callbackPcPhj+0x66>
    digitalWrite(D7, LOW);
   b412e:	4621      	mov	r1, r4
   b4130:	e7ea      	b.n	b4108 <_Z8callbackPcPhj+0x3c>
  } else if (!(String(p).equals(message))) {
   b4132:	4669      	mov	r1, sp
   b4134:	4638      	mov	r0, r7
   b4136:	f003 fa54 	bl	b75e2 <_ZN6StringC1EPK19__FlashStringHelper>
   b413a:	4913      	ldr	r1, [pc, #76]	; (b4188 <_Z8callbackPcPhj+0xbc>)
   b413c:	4638      	mov	r0, r7
   b413e:	f003 fa8b 	bl	b7658 <_ZNK6String6equalsERKS_>
   b4142:	4605      	mov	r5, r0
   b4144:	4638      	mov	r0, r7
   b4146:	f003 fa01 	bl	b754c <_ZN6StringD1Ev>
   b414a:	2d00      	cmp	r5, #0
   b414c:	d1df      	bne.n	b410e <_Z8callbackPcPhj+0x42>
    display.clearDisplay();
   b414e:	4c0f      	ldr	r4, [pc, #60]	; (b418c <_Z8callbackPcPhj+0xc0>)
   b4150:	4620      	mov	r0, r4
   b4152:	f001 fb45 	bl	b57e0 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.setTextSize(2);
   b4156:	4620      	mov	r0, r4
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b4158:	6125      	str	r5, [r4, #16]
   b415a:	2102      	movs	r1, #2
   b415c:	f001 f987 	bl	b546e <_ZN12Adafruit_GFX11setTextSizeEh>
    display.println(String(p));
   b4160:	4669      	mov	r1, sp
   b4162:	4638      	mov	r0, r7
   b4164:	f003 fa3d 	bl	b75e2 <_ZN6StringC1EPK19__FlashStringHelper>
   b4168:	6839      	ldr	r1, [r7, #0]
   b416a:	4620      	mov	r0, r4
   b416c:	f003 f8b3 	bl	b72d6 <_ZN5Print7printlnEPKc>
   b4170:	4638      	mov	r0, r7
   b4172:	f003 f9eb 	bl	b754c <_ZN6StringD1Ev>
    display.display();
   b4176:	4620      	mov	r0, r4
   b4178:	f001 fda0 	bl	b5cbc <_ZN16Adafruit_SSD13067displayEv>
}
   b417c:	e7c7      	b.n	b410e <_Z8callbackPcPhj+0x42>
   b417e:	bf00      	nop
   b4180:	000b879d 	.word	0x000b879d
   b4184:	000b879f 	.word	0x000b879f
   b4188:	2003e6a8 	.word	0x2003e6a8
   b418c:	2003e638 	.word	0x2003e638

000b4190 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
   b4190:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4192:	f002 fbc5 	bl	b6920 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4196:	4b03      	ldr	r3, [pc, #12]	; (b41a4 <_ZN10CloudClass7processEv+0x14>)
   b4198:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
   b419a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
   b419e:	f002 bdb3 	b.w	b6d08 <spark_process>
   b41a2:	bf00      	nop
   b41a4:	2003e728 	.word	0x2003e728

000b41a8 <_ZNK10BlynkParam8iterator5asIntEv>:
#endif
#if !defined(BLYNK_NO_FLOAT)
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b41a8:	6803      	ldr	r3, [r0, #0]
   b41aa:	b12b      	cbz	r3, b41b8 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   b41ac:	6842      	ldr	r2, [r0, #4]
   b41ae:	4293      	cmp	r3, r2
   b41b0:	d202      	bcs.n	b41b8 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   b41b2:	4618      	mov	r0, r3
   b41b4:	f004 b97a 	b.w	b84ac <atoi>
   b41b8:	2000      	movs	r0, #0
   b41ba:	4770      	bx	lr

000b41bc <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   b41bc:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b41be:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   b41c0:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b41c2:	b145      	cbz	r5, b41d6 <_ZN10BlynkParam8iteratorppEv+0x1a>
   b41c4:	6843      	ldr	r3, [r0, #4]
   b41c6:	429d      	cmp	r5, r3
   b41c8:	d205      	bcs.n	b41d6 <_ZN10BlynkParam8iteratorppEv+0x1a>
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   b41ca:	4628      	mov	r0, r5
   b41cc:	f004 f9c4 	bl	b8558 <strlen>
   b41d0:	3001      	adds	r0, #1
   b41d2:	4405      	add	r5, r0
   b41d4:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   b41d6:	4620      	mov	r0, r4
   b41d8:	bd38      	pop	{r3, r4, r5, pc}

000b41da <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   b41da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b41dc:	4604      	mov	r4, r0
   b41de:	6847      	ldr	r7, [r0, #4]
    if (str == NULL) {
   b41e0:	460d      	mov	r5, r1
   b41e2:	b921      	cbnz	r1, b41ee <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   b41e4:	6803      	ldr	r3, [r0, #0]
   b41e6:	1c7a      	adds	r2, r7, #1
   b41e8:	6042      	str	r2, [r0, #4]
   b41ea:	55d9      	strb	r1, [r3, r7]
        return;
    }
    add(str, strlen(str)+1);
}
   b41ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    add(str, strlen(str)+1);
   b41ee:	4608      	mov	r0, r1
   b41f0:	f004 f9b2 	bl	b8558 <strlen>
    if (len + l > buff_size)
   b41f4:	68a3      	ldr	r3, [r4, #8]
    add(str, strlen(str)+1);
   b41f6:	1c46      	adds	r6, r0, #1
    if (len + l > buff_size)
   b41f8:	19f2      	adds	r2, r6, r7
   b41fa:	429a      	cmp	r2, r3
   b41fc:	d8f6      	bhi.n	b41ec <_ZN10BlynkParam3addEPKc+0x12>
    memcpy(buff+len, b, l);
   b41fe:	6820      	ldr	r0, [r4, #0]
   b4200:	4632      	mov	r2, r6
   b4202:	4629      	mov	r1, r5
   b4204:	4438      	add	r0, r7
   b4206:	f004 f959 	bl	b84bc <memcpy>
    len += l;
   b420a:	6860      	ldr	r0, [r4, #4]
   b420c:	4430      	add	r0, r6
   b420e:	6060      	str	r0, [r4, #4]
   b4210:	e7ec      	b.n	b41ec <_ZN10BlynkParam3addEPKc+0x12>
	...

000b4214 <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   b4214:	b538      	push	{r3, r4, r5, lr}
   b4216:	4604      	mov	r4, r0
   b4218:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   b421a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b421e:	6825      	ldr	r5, [r4, #0]
   b4220:	4a04      	ldr	r2, [pc, #16]	; (b4234 <_ZN10BlynkParam3addEi+0x20>)
   b4222:	1a09      	subs	r1, r1, r0
   b4224:	4428      	add	r0, r5
   b4226:	f002 fdff 	bl	b6e28 <snprintf>
   b422a:	6863      	ldr	r3, [r4, #4]
   b422c:	3001      	adds	r0, #1
   b422e:	4403      	add	r3, r0
   b4230:	6063      	str	r3, [r4, #4]
    }
   b4232:	bd38      	pop	{r3, r4, r5, pc}
   b4234:	000b87a1 	.word	0x000b87a1

000b4238 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   b4238:	b538      	push	{r3, r4, r5, lr}
   b423a:	4604      	mov	r4, r0
   b423c:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   b423e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b4242:	6825      	ldr	r5, [r4, #0]
   b4244:	4a04      	ldr	r2, [pc, #16]	; (b4258 <_ZN10BlynkParam3addEl+0x20>)
   b4246:	1a09      	subs	r1, r1, r0
   b4248:	4428      	add	r0, r5
   b424a:	f002 fded 	bl	b6e28 <snprintf>
   b424e:	6863      	ldr	r3, [r4, #4]
   b4250:	3001      	adds	r0, #1
   b4252:	4403      	add	r3, r0
   b4254:	6063      	str	r3, [r4, #4]
    }
   b4256:	bd38      	pop	{r3, r4, r5, pc}
   b4258:	000b87a4 	.word	0x000b87a4

000b425c <BlynkWidgetWrite1>:
BLYNK_WRITE(V1) {
   b425c:	b510      	push	{r4, lr}
  message = param.asStr();
   b425e:	4c08      	ldr	r4, [pc, #32]	; (b4280 <BlynkWidgetWrite1+0x24>)
   b4260:	6809      	ldr	r1, [r1, #0]
   b4262:	4620      	mov	r0, r4
   b4264:	f003 f9d1 	bl	b760a <_ZN6StringaSEPKc>
  Serial.println(message);
   b4268:	f003 fdd2 	bl	b7e10 <_Z16_fetch_usbserialv>
   b426c:	6821      	ldr	r1, [r4, #0]
   b426e:	f003 f832 	bl	b72d6 <_ZN5Print7printlnEPKc>
  client.publish("christianity", message);
   b4272:	6822      	ldr	r2, [r4, #0]
   b4274:	4903      	ldr	r1, [pc, #12]	; (b4284 <BlynkWidgetWrite1+0x28>)
   b4276:	4804      	ldr	r0, [pc, #16]	; (b4288 <BlynkWidgetWrite1+0x2c>)
}
   b4278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  client.publish("christianity", message);
   b427c:	f002 b8ad 	b.w	b63da <_ZN4MQTT7publishEPKcS1_>
   b4280:	2003e6a8 	.word	0x2003e6a8
   b4284:	000b87a8 	.word	0x000b87a8
   b4288:	2003e5d8 	.word	0x2003e5d8

000b428c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   b428c:	b508      	push	{r3, lr}
        state = CONNECTING;
   b428e:	2300      	movs	r3, #0
   b4290:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   b4292:	6800      	ldr	r0, [r0, #0]
   b4294:	f003 fca4 	bl	b7be0 <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   b4298:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   b429c:	f002 ba4a 	b.w	b6734 <BlynkNoOpCbk>

000b42a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b42a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   b42a4:	188f      	adds	r7, r1, r2
   b42a6:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   b42a8:	42b9      	cmp	r1, r7
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b42aa:	e9cd 1705 	strd	r1, r7, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b42ae:	4606      	mov	r6, r0
   b42b0:	4689      	mov	r9, r1
   b42b2:	4690      	mov	r8, r2
    if (it >= param.end())
   b42b4:	f080 80c2 	bcs.w	b443c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   b42b8:	a805      	add	r0, sp, #20
   b42ba:	880d      	ldrh	r5, [r1, #0]
   b42bc:	f7ff ff7e 	bl	b41bc <_ZN10BlynkParam8iteratorppEv>
   b42c0:	6803      	ldr	r3, [r0, #0]
   b42c2:	42bb      	cmp	r3, r7
   b42c4:	f080 80ba 	bcs.w	b443c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        const char* asStr() const       { return ptr; }
   b42c8:	9805      	ldr	r0, [sp, #20]
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b42ca:	7803      	ldrb	r3, [r0, #0]
   b42cc:	2b41      	cmp	r3, #65	; 0x41
   b42ce:	d149      	bne.n	b4364 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc4>
   b42d0:	3001      	adds	r0, #1
   b42d2:	f004 f8eb 	bl	b84ac <atoi>
   b42d6:	2805      	cmp	r0, #5
   b42d8:	dd37      	ble.n	b434a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xaa>
   b42da:	24ff      	movs	r4, #255	; 0xff

    switch(cmd16) {
   b42dc:	f247 2376 	movw	r3, #29302	; 0x7276
   b42e0:	429d      	cmp	r5, r3
   b42e2:	f000 80d3 	beq.w	b448c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>
   b42e6:	d841      	bhi.n	b436c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xcc>
   b42e8:	f247 2361 	movw	r3, #29281	; 0x7261
   b42ec:	429d      	cmp	r5, r3
   b42ee:	f000 80a8 	beq.w	b4442 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a2>
   b42f2:	f247 2364 	movw	r3, #29284	; 0x7264
   b42f6:	429d      	cmp	r5, r3
   b42f8:	d06b      	beq.n	b43d2 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x132>
   b42fa:	f646 5370 	movw	r3, #28016	; 0x6d70
   b42fe:	429d      	cmp	r5, r3
   b4300:	d141      	bne.n	b4386 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xe6>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   b4302:	4d78      	ldr	r5, [pc, #480]	; (b44e4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x244>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b4304:	4e78      	ldr	r6, [pc, #480]	; (b44e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x248>)
   b4306:	f8df 81f4 	ldr.w	r8, [pc, #500]	; b44fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x25c>
        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
   b430a:	9805      	ldr	r0, [sp, #20]
        while (it < param.end()) {
   b430c:	42b8      	cmp	r0, r7
   b430e:	f080 8095 	bcs.w	b443c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4312:	7803      	ldrb	r3, [r0, #0]
   b4314:	2b41      	cmp	r3, #65	; 0x41
   b4316:	d14b      	bne.n	b43b0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x110>
   b4318:	3001      	adds	r0, #1
   b431a:	f004 f8c7 	bl	b84ac <atoi>
   b431e:	2805      	cmp	r0, #5
   b4320:	dd39      	ble.n	b4396 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
   b4322:	24ff      	movs	r4, #255	; 0xff
            ++it;
   b4324:	a805      	add	r0, sp, #20
   b4326:	f7ff ff49 	bl	b41bc <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b432a:	f8dd 9014 	ldr.w	r9, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   b432e:	4629      	mov	r1, r5
   b4330:	4648      	mov	r0, r9
   b4332:	f004 f907 	bl	b8544 <strcmp>
   b4336:	4601      	mov	r1, r0
   b4338:	2800      	cmp	r0, #0
   b433a:	d13d      	bne.n	b43b8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x118>
                pinMode(pin, OUTPUT);
   b433c:	4620      	mov	r0, r4
   b433e:	f003 fea5 	bl	b808c <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   b4342:	a805      	add	r0, sp, #20
   b4344:	f7ff ff3a 	bl	b41bc <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   b4348:	e7df      	b.n	b430a <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x6a>
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b434a:	9805      	ldr	r0, [sp, #20]
   b434c:	3001      	adds	r0, #1
   b434e:	f004 f8ad 	bl	b84ac <atoi>
   b4352:	2800      	cmp	r0, #0
   b4354:	dbc1      	blt.n	b42da <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3a>
   b4356:	9805      	ldr	r0, [sp, #20]
   b4358:	3001      	adds	r0, #1
   b435a:	f004 f8a7 	bl	b84ac <atoi>
   b435e:	300e      	adds	r0, #14
   b4360:	b2c4      	uxtb	r4, r0
   b4362:	e7bb      	b.n	b42dc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x3c>
   b4364:	a805      	add	r0, sp, #20
   b4366:	f7ff ff1f 	bl	b41a8 <_ZNK10BlynkParam8iterator5asIntEv>
   b436a:	e7f9      	b.n	b4360 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xc0>
    switch(cmd16) {
   b436c:	f247 7364 	movw	r3, #30564	; 0x7764
   b4370:	429d      	cmp	r5, r3
   b4372:	d04f      	beq.n	b4414 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x174>
   b4374:	f247 7376 	movw	r3, #30582	; 0x7776
   b4378:	429d      	cmp	r5, r3
   b437a:	f000 8097 	beq.w	b44ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x20c>
   b437e:	f247 7361 	movw	r3, #30561	; 0x7761
   b4382:	429d      	cmp	r5, r3
   b4384:	d06f      	beq.n	b4466 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1c6>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b4386:	2300      	movs	r3, #0
   b4388:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b438c:	2202      	movs	r2, #2
   b438e:	9200      	str	r2, [sp, #0]
   b4390:	8b72      	ldrh	r2, [r6, #26]
   b4392:	4619      	mov	r1, r3
   b4394:	e03a      	b.n	b440c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x16c>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b4396:	9805      	ldr	r0, [sp, #20]
   b4398:	3001      	adds	r0, #1
   b439a:	f004 f887 	bl	b84ac <atoi>
   b439e:	2800      	cmp	r0, #0
   b43a0:	dbbf      	blt.n	b4322 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x82>
   b43a2:	9805      	ldr	r0, [sp, #20]
   b43a4:	3001      	adds	r0, #1
   b43a6:	f004 f881 	bl	b84ac <atoi>
   b43aa:	300e      	adds	r0, #14
   b43ac:	b2c4      	uxtb	r4, r0
   b43ae:	e7b9      	b.n	b4324 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x84>
   b43b0:	a805      	add	r0, sp, #20
   b43b2:	f7ff fef9 	bl	b41a8 <_ZNK10BlynkParam8iterator5asIntEv>
   b43b6:	e7f9      	b.n	b43ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10c>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b43b8:	4631      	mov	r1, r6
   b43ba:	4648      	mov	r0, r9
   b43bc:	f004 f8c2 	bl	b8544 <strcmp>
   b43c0:	b128      	cbz	r0, b43ce <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x12e>
   b43c2:	4641      	mov	r1, r8
   b43c4:	4648      	mov	r0, r9
   b43c6:	f004 f8bd 	bl	b8544 <strcmp>
   b43ca:	2800      	cmp	r0, #0
   b43cc:	d1b9      	bne.n	b4342 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa2>
                pinMode(pin, OUTPUT);
   b43ce:	2101      	movs	r1, #1
   b43d0:	e7b4      	b.n	b433c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x9c>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b43d2:	ab0a      	add	r3, sp, #40	; 0x28
        rsp.add("dw");
   b43d4:	4945      	ldr	r1, [pc, #276]	; (b44ec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x24c>)
   b43d6:	9307      	str	r3, [sp, #28]
   b43d8:	a807      	add	r0, sp, #28
   b43da:	2310      	movs	r3, #16
   b43dc:	2500      	movs	r5, #0
   b43de:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b43e2:	f7ff fefa 	bl	b41da <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b43e6:	a807      	add	r0, sp, #28
   b43e8:	4621      	mov	r1, r4
   b43ea:	f7ff ff13 	bl	b4214 <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   b43ee:	4620      	mov	r0, r4
   b43f0:	f003 fe76 	bl	b80e0 <digitalRead>
        rsp.add(analogRead(pin));
   b43f4:	4601      	mov	r1, r0
   b43f6:	a807      	add	r0, sp, #28
   b43f8:	f7ff ff1e 	bl	b4238 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   b43fc:	9b08      	ldr	r3, [sp, #32]
   b43fe:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b4402:	3b01      	subs	r3, #1
   b4404:	9300      	str	r3, [sp, #0]
   b4406:	9b07      	ldr	r3, [sp, #28]
   b4408:	462a      	mov	r2, r5
   b440a:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b440c:	4630      	mov	r0, r6
   b440e:	f000 fae1 	bl	b49d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   b4412:	e013      	b.n	b443c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        if (++it >= param.end())
   b4414:	a805      	add	r0, sp, #20
   b4416:	f7ff fed1 	bl	b41bc <_ZN10BlynkParam8iteratorppEv>
   b441a:	6803      	ldr	r3, [r0, #0]
   b441c:	429f      	cmp	r7, r3
   b441e:	d90d      	bls.n	b443c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b4420:	b2a4      	uxth	r4, r4
   b4422:	2101      	movs	r1, #1
   b4424:	4620      	mov	r0, r4
   b4426:	f003 fe31 	bl	b808c <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   b442a:	a805      	add	r0, sp, #20
   b442c:	f7ff febc 	bl	b41a8 <_ZNK10BlynkParam8iterator5asIntEv>
   b4430:	1e01      	subs	r1, r0, #0
   b4432:	bf18      	it	ne
   b4434:	2101      	movne	r1, #1
   b4436:	4620      	mov	r0, r4
   b4438:	f003 fe39 	bl	b80ae <digitalWrite>
    }
}
   b443c:	b00f      	add	sp, #60	; 0x3c
   b443e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b4442:	ab0a      	add	r3, sp, #40	; 0x28
   b4444:	9307      	str	r3, [sp, #28]
        rsp.add("aw");
   b4446:	a807      	add	r0, sp, #28
   b4448:	2310      	movs	r3, #16
   b444a:	4929      	ldr	r1, [pc, #164]	; (b44f0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x250>)
   b444c:	2500      	movs	r5, #0
   b444e:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b4452:	f7ff fec2 	bl	b41da <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b4456:	a807      	add	r0, sp, #28
   b4458:	4621      	mov	r1, r4
   b445a:	f7ff fedb 	bl	b4214 <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   b445e:	4620      	mov	r0, r4
   b4460:	f003 fe51 	bl	b8106 <analogRead>
   b4464:	e7c6      	b.n	b43f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x154>
        if (++it >= param.end())
   b4466:	a805      	add	r0, sp, #20
   b4468:	f7ff fea8 	bl	b41bc <_ZN10BlynkParam8iteratorppEv>
   b446c:	6803      	ldr	r3, [r0, #0]
   b446e:	429f      	cmp	r7, r3
   b4470:	d9e4      	bls.n	b443c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        pinMode(pin, OUTPUT);
   b4472:	b2a4      	uxth	r4, r4
   b4474:	2101      	movs	r1, #1
   b4476:	4620      	mov	r0, r4
   b4478:	f003 fe08 	bl	b808c <pinMode>
        analogWrite(pin, it.asInt());
   b447c:	a805      	add	r0, sp, #20
   b447e:	f7ff fe93 	bl	b41a8 <_ZNK10BlynkParam8iterator5asIntEv>
   b4482:	4601      	mov	r1, r0
   b4484:	4620      	mov	r0, r4
   b4486:	f003 fe55 	bl	b8134 <_Z11analogWritetm>
    } break;
   b448a:	e7d7      	b.n	b443c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   b448c:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   b448e:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   b4492:	f002 f951 	bl	b6738 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   b4496:	4603      	mov	r3, r0
            handler(req);
   b4498:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   b449a:	b123      	cbz	r3, b44a6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
   b449c:	4a15      	ldr	r2, [pc, #84]	; (b44f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x254>)
   b449e:	4293      	cmp	r3, r2
   b44a0:	d001      	beq.n	b44a6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x206>
            handler(req);
   b44a2:	4798      	blx	r3
   b44a4:	e7ca      	b.n	b443c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        } else {
            BlynkWidgetReadDefault(req);
   b44a6:	f002 f943 	bl	b6730 <BlynkWidgetRead>
        }
    }
   b44aa:	e7c7      	b.n	b443c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
        ++it;
   b44ac:	a805      	add	r0, sp, #20
   b44ae:	f7ff fe85 	bl	b41bc <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b44b2:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   b44b4:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   b44b8:	eba3 0109 	sub.w	r1, r3, r9
   b44bc:	eba8 0101 	sub.w	r1, r8, r1
        WidgetWriteHandler handler = GetWriteHandler(pin);
   b44c0:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   b44c2:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
   b44c6:	910c      	str	r1, [sp, #48]	; 0x30
   b44c8:	f002 f940 	bl	b674c <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   b44cc:	4603      	mov	r3, r0
            handler(req, param);
   b44ce:	a90a      	add	r1, sp, #40	; 0x28
   b44d0:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   b44d2:	b123      	cbz	r3, b44de <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
   b44d4:	4a08      	ldr	r2, [pc, #32]	; (b44f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x258>)
   b44d6:	4293      	cmp	r3, r2
   b44d8:	d001      	beq.n	b44de <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x23e>
            handler(req, param);
   b44da:	4798      	blx	r3
   b44dc:	e7ae      	b.n	b443c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
            BlynkWidgetWriteDefault(req, param);
   b44de:	f002 f928 	bl	b6732 <BlynkWidgetWrite>
    } break;
   b44e2:	e7ab      	b.n	b443c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x19c>
   b44e4:	000b87b5 	.word	0x000b87b5
   b44e8:	000b87b8 	.word	0x000b87b8
   b44ec:	000b87c0 	.word	0x000b87c0
   b44f0:	000b87c3 	.word	0x000b87c3
   b44f4:	000b6731 	.word	0x000b6731
   b44f8:	000b6733 	.word	0x000b6733
   b44fc:	000b87bc 	.word	0x000b87bc

000b4500 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   b4500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4504:	b08c      	sub	sp, #48	; 0x30
   b4506:	af04      	add	r7, sp, #16
   b4508:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   b450a:	2205      	movs	r2, #5
   b450c:	6800      	ldr	r0, [r0, #0]
   b450e:	1d39      	adds	r1, r7, #4
   b4510:	f003 f807 	bl	b7522 <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   b4514:	b398      	cbz	r0, b457e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x7e>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   b4516:	2805      	cmp	r0, #5
   b4518:	d004      	beq.n	b4524 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   b451a:	2000      	movs	r0, #0
}
   b451c:	3720      	adds	r7, #32
   b451e:	46bd      	mov	sp, r7
   b4520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
   b4524:	f8b7 3005 	ldrh.w	r3, [r7, #5]
   b4528:	ba5b      	rev16	r3, r3
   b452a:	b29a      	uxth	r2, r3
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   b452c:	f8a7 3005 	strh.w	r3, [r7, #5]
   b4530:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b4534:	ba5b      	rev16	r3, r3
   b4536:	fa1f f883 	uxth.w	r8, r3
    hdr.length = ntohs(hdr.length);
   b453a:	f8a7 3007 	strh.w	r3, [r7, #7]
    if (ret < 0 || hdr.msg_id == 0) {
   b453e:	2a00      	cmp	r2, #0
   b4540:	d0eb      	beq.n	b451a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   b4542:	793b      	ldrb	r3, [r7, #4]
   b4544:	bb23      	cbnz	r3, b4590 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x90>
        lastActivityIn = BlynkMillis();
   b4546:	f002 f8f1 	bl	b672c <_Z11BlynkMillisv>
   b454a:	4602      	mov	r2, r0
   b454c:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   b454e:	7f60      	ldrb	r0, [r4, #29]
   b4550:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b4554:	b9c0      	cbnz	r0, b4588 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x88>
   b4556:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   b455a:	2901      	cmp	r1, #1
   b455c:	d114      	bne.n	b4588 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x88>
            switch (hdr.length) {
   b455e:	2b09      	cmp	r3, #9
   b4560:	d00f      	beq.n	b4582 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
   b4562:	2bc8      	cmp	r3, #200	; 0xc8
   b4564:	d001      	beq.n	b456a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6a>
   b4566:	2b04      	cmp	r3, #4
   b4568:	d1d8      	bne.n	b451c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   b456a:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   b456c:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   b456e:	4620      	mov	r0, r4
                state = CONNECTED;
   b4570:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   b4572:	f000 fadd 	bl	b4b30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   b4576:	f7ff fe0b 	bl	b4190 <_ZN10CloudClass7processEv>
                BlynkOnConnected();
   b457a:	f002 f8db 	bl	b6734 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   b457e:	2001      	movs	r0, #1
   b4580:	e7cc      	b.n	b451c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   b4582:	2303      	movs	r3, #3
   b4584:	7763      	strb	r3, [r4, #29]
                break;
   b4586:	e7c9      	b.n	b451c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   b4588:	1f58      	subs	r0, r3, #5
   b458a:	bf18      	it	ne
   b458c:	2001      	movne	r0, #1
   b458e:	e7c5      	b.n	b451c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   b4590:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   b4594:	d903      	bls.n	b459e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x9e>
        internalReconnect();
   b4596:	4620      	mov	r0, r4
   b4598:	f7ff fe78 	bl	b428c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b459c:	e7ef      	b.n	b457e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x7e>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   b459e:	f108 0308 	add.w	r3, r8, #8
   b45a2:	466e      	mov	r6, sp
   b45a4:	08db      	lsrs	r3, r3, #3
   b45a6:	eba6 03c3 	sub.w	r3, r6, r3, lsl #3
   b45aa:	469d      	mov	sp, r3
   b45ac:	ad04      	add	r5, sp, #16
   b45ae:	6820      	ldr	r0, [r4, #0]
   b45b0:	4642      	mov	r2, r8
   b45b2:	4629      	mov	r1, r5
   b45b4:	f002 ffb5 	bl	b7522 <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   b45b8:	4580      	cmp	r8, r0
   b45ba:	f04f 0000 	mov.w	r0, #0
   b45be:	d17f      	bne.n	b46c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
    inputBuffer[hdr.length] = '\0';
   b45c0:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b45c4:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   b45c6:	f002 f8b1 	bl	b672c <_Z11BlynkMillisv>
    switch (hdr.type)
   b45ca:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   b45cc:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   b45ce:	2b14      	cmp	r3, #20
   b45d0:	f000 80a6 	beq.w	b4720 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
   b45d4:	d848      	bhi.n	b4668 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x168>
   b45d6:	2b0f      	cmp	r3, #15
   b45d8:	f000 80a2 	beq.w	b4720 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
   b45dc:	d807      	bhi.n	b45ee <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xee>
   b45de:	2b02      	cmp	r3, #2
   b45e0:	d048      	beq.n	b4674 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x174>
   b45e2:	2b06      	cmp	r3, #6
   b45e4:	d051      	beq.n	b468a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18a>
        internalReconnect();
   b45e6:	4620      	mov	r0, r4
   b45e8:	f7ff fe50 	bl	b428c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b45ec:	e058      	b.n	b46a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
    switch (hdr.type)
   b45ee:	2b11      	cmp	r3, #17
   b45f0:	d1f9      	bne.n	b45e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe6>
        BlynkReq req = { 0 };
   b45f2:	2300      	movs	r3, #0
   b45f4:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   b45f6:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b45fa:	442b      	add	r3, r5
        if (it >= param.end())
   b45fc:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b45fe:	e9c7 5303 	strd	r5, r3, [r7, #12]
   b4602:	d24d      	bcs.n	b46a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
        ++it;
   b4604:	f107 000c 	add.w	r0, r7, #12
   b4608:	f8d5 8000 	ldr.w	r8, [r5]
   b460c:	f7ff fdd6 	bl	b41bc <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b4610:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   b4612:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   b4616:	1b5d      	subs	r5, r3, r5
   b4618:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   b461a:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   b461e:	687b      	ldr	r3, [r7, #4]
   b4620:	61fd      	str	r5, [r7, #28]
   b4622:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b4626:	8363      	strh	r3, [r4, #26]
   b4628:	4b64      	ldr	r3, [pc, #400]	; (b47bc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2bc>)
   b462a:	4598      	cmp	r8, r3
   b462c:	f000 80bf 	beq.w	b47ae <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2ae>
   b4630:	f200 808c 	bhi.w	b474c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24c>
   b4634:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   b4638:	f46f 7200 	mvn.w	r2, #512	; 0x200
   b463c:	4413      	add	r3, r2
   b463e:	4598      	cmp	r8, r3
   b4640:	f000 809d 	beq.w	b477e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x27e>
   b4644:	d879      	bhi.n	b473a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23a>
   b4646:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   b464a:	3b06      	subs	r3, #6
   b464c:	4598      	cmp	r8, r3
   b464e:	f000 809c 	beq.w	b478a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x28a>
   b4652:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b4656:	3303      	adds	r3, #3
   b4658:	4598      	cmp	r8, r3
   b465a:	d16b      	bne.n	b4734 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   b465c:	f107 0114 	add.w	r1, r7, #20
   b4660:	4638      	mov	r0, r7
   b4662:	f002 f866 	bl	b6732 <BlynkWidgetWrite>
   b4666:	e065      	b.n	b4734 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
    switch (hdr.type)
   b4668:	2b29      	cmp	r3, #41	; 0x29
   b466a:	d01b      	beq.n	b46a4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b466c:	2b37      	cmp	r3, #55	; 0x37
   b466e:	d017      	beq.n	b46a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b4670:	2b1d      	cmp	r3, #29
   b4672:	d1b8      	bne.n	b45e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xe6>
        if (state == CONNECTING) {
   b4674:	7f63      	ldrb	r3, [r4, #29]
   b4676:	b943      	cbnz	r3, b468a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18a>
            state = CONNECTED;
   b4678:	2301      	movs	r3, #1
   b467a:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   b467c:	4620      	mov	r0, r4
   b467e:	f000 fa57 	bl	b4b30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   b4682:	f7ff fd85 	bl	b4190 <_ZN10CloudClass7processEv>
            BlynkOnConnected();
   b4686:	f002 f855 	bl	b6734 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   b468a:	2300      	movs	r3, #0
   b468c:	21c8      	movs	r1, #200	; 0xc8
   b468e:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   b4692:	9100      	str	r1, [sp, #0]
   b4694:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b4698:	4619      	mov	r1, r3
   b469a:	4620      	mov	r0, r4
   b469c:	f000 f99a 	bl	b49d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   b46a0:	2001      	movs	r0, #1
   b46a2:	e00d      	b.n	b46c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c0>
        if (!redir_serv) {
   b46a4:	68a3      	ldr	r3, [r4, #8]
   b46a6:	b91b      	cbnz	r3, b46b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b0>
             redir_serv = (char*)malloc(64);
   b46a8:	2040      	movs	r0, #64	; 0x40
   b46aa:	f002 fba5 	bl	b6df8 <malloc>
   b46ae:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   b46b0:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b46b4:	44a8      	add	r8, r5
        if (it >= param.end())
   b46b6:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b46b8:	e9c7 5805 	strd	r5, r8, [r7, #20]
   b46bc:	d302      	bcc.n	b46c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
            return false;
   b46be:	2000      	movs	r0, #0
   b46c0:	46b5      	mov	sp, r6
   b46c2:	e72b      	b.n	b451c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   b46c4:	4629      	mov	r1, r5
   b46c6:	2240      	movs	r2, #64	; 0x40
   b46c8:	68a0      	ldr	r0, [r4, #8]
   b46ca:	f003 ff4d 	bl	b8568 <strncpy>
        redir_serv[63] = '\0';
   b46ce:	68a3      	ldr	r3, [r4, #8]
   b46d0:	2500      	movs	r5, #0
   b46d2:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   b46d6:	f107 0014 	add.w	r0, r7, #20
   b46da:	f7ff fd6f 	bl	b41bc <_ZN10BlynkParam8iteratorppEv>
   b46de:	6803      	ldr	r3, [r0, #0]
   b46e0:	4598      	cmp	r8, r3
   b46e2:	d91b      	bls.n	b471c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21c>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b46e4:	6978      	ldr	r0, [r7, #20]
   b46e6:	b120      	cbz	r0, b46f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f2>
   b46e8:	69bb      	ldr	r3, [r7, #24]
   b46ea:	4298      	cmp	r0, r3
   b46ec:	d214      	bcs.n	b4718 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x218>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   b46ee:	f003 fee1 	bl	b84b4 <atol>
            redir_port = it.asLong();
   b46f2:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   b46f4:	6820      	ldr	r0, [r4, #0]
   b46f6:	f003 fa73 	bl	b7be0 <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   b46fa:	6823      	ldr	r3, [r4, #0]
   b46fc:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   b46fe:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   b4700:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   b4702:	2300      	movs	r3, #0
   b4704:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b4706:	f002 f811 	bl	b672c <_Z11BlynkMillisv>
   b470a:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b470e:	3808      	subs	r0, #8
   b4710:	e9c4 0003 	strd	r0, r0, [r4, #12]
   b4714:	6160      	str	r0, [r4, #20]
   b4716:	e7c3      	b.n	b46a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b4718:	4628      	mov	r0, r5
   b471a:	e7ea      	b.n	b46f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f2>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   b471c:	2550      	movs	r5, #80	; 0x50
   b471e:	e7e9      	b.n	b46f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f4>
        msgIdOutOverride = hdr.msg_id;
   b4720:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   b4722:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   b4726:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b472a:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   b472c:	4629      	mov	r1, r5
   b472e:	4620      	mov	r0, r4
   b4730:	f7ff fdb6 	bl	b42a0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   b4734:	2300      	movs	r3, #0
   b4736:	8363      	strh	r3, [r4, #26]
   b4738:	e7b2      	b.n	b46a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a0>
   b473a:	4b21      	ldr	r3, [pc, #132]	; (b47c0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c0>)
   b473c:	4598      	cmp	r8, r3
   b473e:	d1f9      	bne.n	b4734 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   b4740:	f107 0114 	add.w	r1, r7, #20
   b4744:	4638      	mov	r0, r7
   b4746:	f001 fff4 	bl	b6732 <BlynkWidgetWrite>
   b474a:	e7f3      	b.n	b4734 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
   b474c:	4b1d      	ldr	r3, [pc, #116]	; (b47c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   b474e:	4598      	cmp	r8, r3
   b4750:	d021      	beq.n	b4796 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x296>
   b4752:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   b4756:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b475a:	f503 7380 	add.w	r3, r3, #256	; 0x100
   b475e:	4598      	cmp	r8, r3
   b4760:	d01f      	beq.n	b47a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2a2>
   b4762:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   b4766:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   b476a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   b476e:	4598      	cmp	r8, r3
   b4770:	d1e0      	bne.n	b4734 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   b4772:	f107 0114 	add.w	r1, r7, #20
   b4776:	4638      	mov	r0, r7
   b4778:	f001 ffdb 	bl	b6732 <BlynkWidgetWrite>
   b477c:	e7da      	b.n	b4734 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   b477e:	f107 0114 	add.w	r1, r7, #20
   b4782:	4638      	mov	r0, r7
   b4784:	f001 ffd5 	bl	b6732 <BlynkWidgetWrite>
   b4788:	e7d4      	b.n	b4734 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   b478a:	f107 0114 	add.w	r1, r7, #20
   b478e:	4638      	mov	r0, r7
   b4790:	f001 ffcf 	bl	b6732 <BlynkWidgetWrite>
   b4794:	e7ce      	b.n	b4734 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   b4796:	f107 0114 	add.w	r1, r7, #20
   b479a:	4638      	mov	r0, r7
   b479c:	f001 ffc9 	bl	b6732 <BlynkWidgetWrite>
   b47a0:	e7c8      	b.n	b4734 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   b47a2:	f107 0114 	add.w	r1, r7, #20
   b47a6:	4638      	mov	r0, r7
   b47a8:	f001 ffc3 	bl	b6732 <BlynkWidgetWrite>
   b47ac:	e7c2      	b.n	b4734 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   b47ae:	f107 0114 	add.w	r1, r7, #20
   b47b2:	4638      	mov	r0, r7
   b47b4:	f001 ffbd 	bl	b6732 <BlynkWidgetWrite>
   b47b8:	e7bc      	b.n	b4734 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x234>
   b47ba:	bf00      	nop
   b47bc:	00736676 	.word	0x00736676
   b47c0:	00676264 	.word	0x00676264
   b47c4:	6e6f6361 	.word	0x6e6f6361

000b47c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>:
bool BlynkProtocol<Transp>::run(bool avail)
   b47c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b47cc:	4604      	mov	r4, r0
   b47ce:	b08c      	sub	sp, #48	; 0x30
   b47d0:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   b47d2:	f7ff fcdd 	bl	b4190 <_ZN10CloudClass7processEv>
    if (state == DISCONNECTED) {
   b47d6:	7f63      	ldrb	r3, [r4, #29]
   b47d8:	2b02      	cmp	r3, #2
   b47da:	d01e      	beq.n	b481a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x52>
    return false;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   b47dc:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   b47de:	8b62      	ldrh	r2, [r4, #26]
   b47e0:	3301      	adds	r3, #1
   b47e2:	b2db      	uxtb	r3, r3
   b47e4:	7723      	strb	r3, [r4, #28]
   b47e6:	b9aa      	cbnz	r2, b4814 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b47e8:	2b02      	cmp	r3, #2
   b47ea:	d813      	bhi.n	b4814 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   b47ec:	6820      	ldr	r0, [r4, #0]
   b47ee:	f003 f8bf 	bl	b7970 <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   b47f2:	b1a8      	cbz	r0, b4820 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
        while (avail || conn.available() > 0) {
   b47f4:	b925      	cbnz	r5, b4800 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x38>
    int available() { return client.available(); }
   b47f6:	6820      	ldr	r0, [r4, #0]
   b47f8:	f003 f998 	bl	b7b2c <_ZN9TCPClient9availableEv>
   b47fc:	2800      	cmp	r0, #0
   b47fe:	dd0f      	ble.n	b4820 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
            if (!processInput()) {
   b4800:	4620      	mov	r0, r4
   b4802:	f7ff fe7d 	bl	b4500 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   b4806:	2800      	cmp	r0, #0
   b4808:	d1f5      	bne.n	b47f6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x2e>
    void disconnect() { client.stop(); }
   b480a:	6820      	ldr	r0, [r4, #0]
   b480c:	f003 f9e8 	bl	b7be0 <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   b4810:	f001 ff90 	bl	b6734 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   b4814:	7f23      	ldrb	r3, [r4, #28]
   b4816:	3b01      	subs	r3, #1
   b4818:	7723      	strb	r3, [r4, #28]
}
   b481a:	b00c      	add	sp, #48	; 0x30
   b481c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   b4820:	f001 ff84 	bl	b672c <_Z11BlynkMillisv>
   b4824:	4605      	mov	r5, r0
    bool connected() { return client.connected(); }
   b4826:	6820      	ldr	r0, [r4, #0]
   b4828:	f003 f8a2 	bl	b7970 <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   b482c:	7f67      	ldrb	r7, [r4, #29]
   b482e:	2f01      	cmp	r7, #1
   b4830:	4606      	mov	r6, r0
   b4832:	d124      	bne.n	b487e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb6>
        if (!tconn) {
   b4834:	b920      	cbnz	r0, b4840 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x78>
            lastHeartbeat = t;
   b4836:	6165      	str	r5, [r4, #20]
            internalReconnect();
   b4838:	4620      	mov	r0, r4
   b483a:	f7ff fd27 	bl	b428c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   b483e:	e7e9      	b.n	b4814 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   b4840:	68e3      	ldr	r3, [r4, #12]
   b4842:	f24f 6218 	movw	r2, #63000	; 0xf618
   b4846:	1aeb      	subs	r3, r5, r3
   b4848:	4293      	cmp	r3, r2
   b484a:	d8f5      	bhi.n	b4838 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x70>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b484c:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   b4850:	4293      	cmp	r3, r2
   b4852:	d803      	bhi.n	b485c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x94>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4854:	6923      	ldr	r3, [r4, #16]
   b4856:	1aeb      	subs	r3, r5, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b4858:	4293      	cmp	r3, r2
   b485a:	d9db      	bls.n	b4814 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b485c:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b485e:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b4862:	1aeb      	subs	r3, r5, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b4864:	4293      	cmp	r3, r2
   b4866:	d9d5      	bls.n	b4814 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
            sendCmd(BLYNK_CMD_PING);
   b4868:	2300      	movs	r3, #0
   b486a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b486e:	9300      	str	r3, [sp, #0]
   b4870:	461a      	mov	r2, r3
   b4872:	2106      	movs	r1, #6
   b4874:	4620      	mov	r0, r4
   b4876:	f000 f8ad 	bl	b49d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                lastLogin = t;
   b487a:	6165      	str	r5, [r4, #20]
                return false;
   b487c:	e7ca      	b.n	b4814 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    } else if (state == CONNECTING) {
   b487e:	2f00      	cmp	r7, #0
   b4880:	d1c8      	bne.n	b4814 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b4882:	6963      	ldr	r3, [r4, #20]
   b4884:	1aeb      	subs	r3, r5, r3
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   b4886:	b140      	cbz	r0, b489a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xd2>
   b4888:	f241 7270 	movw	r2, #6000	; 0x1770
   b488c:	4293      	cmp	r3, r2
   b488e:	d9c1      	bls.n	b4814 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    void disconnect() { client.stop(); }
   b4890:	6820      	ldr	r0, [r4, #0]
   b4892:	f003 f9a5 	bl	b7be0 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b4896:	7767      	strb	r7, [r4, #29]
            return false;
   b4898:	e7bc      	b.n	b4814 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   b489a:	f241 3288 	movw	r2, #5000	; 0x1388
   b489e:	4293      	cmp	r3, r2
   b48a0:	d9b8      	bls.n	b4814 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b48a2:	6820      	ldr	r0, [r4, #0]
   b48a4:	f003 f99c 	bl	b7be0 <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   b48a8:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   b48ac:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   b48b0:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   b48b4:	f1be 0f00 	cmp.w	lr, #0
   b48b8:	d01b      	beq.n	b48f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x12a>
            return (1 == client.connect(domain, port));
   b48ba:	4633      	mov	r3, r6
   b48bc:	4642      	mov	r2, r8
   b48be:	4671      	mov	r1, lr
   b48c0:	4660      	mov	r0, ip
   b48c2:	f002 ffd7 	bl	b7874 <_ZN9TCPClient7connectEPKctm>
   b48c6:	2801      	cmp	r0, #1
   b48c8:	d1d7      	bne.n	b487a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb2>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b48ca:	6863      	ldr	r3, [r4, #4]
   b48cc:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   b48ce:	2501      	movs	r5, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b48d0:	4618      	mov	r0, r3
            msgIdOut = 1;
   b48d2:	8325      	strh	r5, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b48d4:	f003 fe40 	bl	b8558 <strlen>
   b48d8:	2200      	movs	r2, #0
   b48da:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b48de:	9b05      	ldr	r3, [sp, #20]
   b48e0:	9000      	str	r0, [sp, #0]
   b48e2:	462a      	mov	r2, r5
   b48e4:	211d      	movs	r1, #29
   b48e6:	4620      	mov	r0, r4
   b48e8:	f000 f874 	bl	b49d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   b48ec:	6923      	ldr	r3, [r4, #16]
   b48ee:	6163      	str	r3, [r4, #20]
            return true;
   b48f0:	e790      	b.n	b4814 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b48f2:	4b08      	ldr	r3, [pc, #32]	; (b4914 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x14c>)
   b48f4:	9306      	str	r3, [sp, #24]
   b48f6:	f10c 0720 	add.w	r7, ip, #32
   b48fa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b48fc:	ae07      	add	r6, sp, #28
   b48fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b4900:	683b      	ldr	r3, [r7, #0]
   b4902:	7033      	strb	r3, [r6, #0]
            return (1 == client.connect(addr, port));
   b4904:	4642      	mov	r2, r8
   b4906:	4673      	mov	r3, lr
   b4908:	a906      	add	r1, sp, #24
   b490a:	4660      	mov	r0, ip
   b490c:	f003 f892 	bl	b7a34 <_ZN9TCPClient7connectE9IPAddresstm>
   b4910:	e7d9      	b.n	b48c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xfe>
   b4912:	bf00      	nop
   b4914:	000b9824 	.word	0x000b9824

000b4918 <loop>:
  display.setTextColor(WHITE);
  display.setTextSize(4);
  display.display();
}

void loop() {
   b4918:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  display.loop();
   b491a:	4825      	ldr	r0, [pc, #148]	; (b49b0 <loop+0x98>)
   b491c:	f001 ff91 	bl	b6842 <_ZN16OledWingAdafruit4loopEv>
  Blynk.run();
   b4920:	4824      	ldr	r0, [pc, #144]	; (b49b4 <loop+0x9c>)
   b4922:	2100      	movs	r1, #0
   b4924:	f7ff ff50 	bl	b47c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>

  if (client.isConnected()) {
   b4928:	4823      	ldr	r0, [pc, #140]	; (b49b8 <loop+0xa0>)
   b492a:	f001 fbdb 	bl	b60e4 <_ZN4MQTT11isConnectedEv>
   b492e:	b328      	cbz	r0, b497c <loop+0x64>
    client.loop();
   b4930:	4821      	ldr	r0, [pc, #132]	; (b49b8 <loop+0xa0>)
   b4932:	f001 fdae 	bl	b6492 <_ZN4MQTT4loopEv>
    client.subscribe("cade/led");
    client.subscribe("cade/buttons");
    client.subscribe("christianity");
  }

  if (display.pressedA()) {
   b4936:	481e      	ldr	r0, [pc, #120]	; (b49b0 <loop+0x98>)
   b4938:	f001 ff9c 	bl	b6874 <_ZN16OledWingAdafruit8pressedAEv>
   b493c:	b148      	cbz	r0, b4952 <loop+0x3a>
    Serial.println("A");
   b493e:	f003 fa67 	bl	b7e10 <_Z16_fetch_usbserialv>
   b4942:	491e      	ldr	r1, [pc, #120]	; (b49bc <loop+0xa4>)
   b4944:	f002 fcc7 	bl	b72d6 <_ZN5Print7printlnEPKc>
    client.publish("cade/buttons", "A");
   b4948:	4a1c      	ldr	r2, [pc, #112]	; (b49bc <loop+0xa4>)
   b494a:	491d      	ldr	r1, [pc, #116]	; (b49c0 <loop+0xa8>)
   b494c:	481a      	ldr	r0, [pc, #104]	; (b49b8 <loop+0xa0>)
   b494e:	f001 fd44 	bl	b63da <_ZN4MQTT7publishEPKcS1_>
  }
  if (display.pressedB()) {
   b4952:	4817      	ldr	r0, [pc, #92]	; (b49b0 <loop+0x98>)
   b4954:	f001 ff98 	bl	b6888 <_ZN16OledWingAdafruit8pressedBEv>
   b4958:	b120      	cbz	r0, b4964 <loop+0x4c>
    client.publish("cade/buttons", "B");
   b495a:	4a1a      	ldr	r2, [pc, #104]	; (b49c4 <loop+0xac>)
   b495c:	4918      	ldr	r1, [pc, #96]	; (b49c0 <loop+0xa8>)
   b495e:	4816      	ldr	r0, [pc, #88]	; (b49b8 <loop+0xa0>)
   b4960:	f001 fd3b 	bl	b63da <_ZN4MQTT7publishEPKcS1_>
  }
  if (display.pressedC()) {
   b4964:	4812      	ldr	r0, [pc, #72]	; (b49b0 <loop+0x98>)
   b4966:	f001 ff99 	bl	b689c <_ZN16OledWingAdafruit8pressedCEv>
   b496a:	b1f0      	cbz	r0, b49aa <loop+0x92>
    client.publish("cade/buttons", "C");
   b496c:	4a16      	ldr	r2, [pc, #88]	; (b49c8 <loop+0xb0>)
   b496e:	4914      	ldr	r1, [pc, #80]	; (b49c0 <loop+0xa8>)
   b4970:	4811      	ldr	r0, [pc, #68]	; (b49b8 <loop+0xa0>)
  }
   b4972:	b005      	add	sp, #20
   b4974:	f85d eb04 	ldr.w	lr, [sp], #4
    client.publish("cade/buttons", "C");
   b4978:	f001 bd2f 	b.w	b63da <_ZN4MQTT7publishEPKcS1_>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b497c:	4668      	mov	r0, sp
   b497e:	f002 f9cb 	bl	b6d18 <spark_deviceID>
    client.connect(System.deviceID());
   b4982:	9900      	ldr	r1, [sp, #0]
   b4984:	480c      	ldr	r0, [pc, #48]	; (b49b8 <loop+0xa0>)
   b4986:	f001 fc9d 	bl	b62c4 <_ZN4MQTT7connectEPKc>
   b498a:	4668      	mov	r0, sp
   b498c:	f002 fdde 	bl	b754c <_ZN6StringD1Ev>
    client.subscribe("cade/led");
   b4990:	490e      	ldr	r1, [pc, #56]	; (b49cc <loop+0xb4>)
   b4992:	4809      	ldr	r0, [pc, #36]	; (b49b8 <loop+0xa0>)
   b4994:	f001 fec5 	bl	b6722 <_ZN4MQTT9subscribeEPKc>
    client.subscribe("cade/buttons");
   b4998:	4909      	ldr	r1, [pc, #36]	; (b49c0 <loop+0xa8>)
   b499a:	4807      	ldr	r0, [pc, #28]	; (b49b8 <loop+0xa0>)
   b499c:	f001 fec1 	bl	b6722 <_ZN4MQTT9subscribeEPKc>
    client.subscribe("christianity");
   b49a0:	490b      	ldr	r1, [pc, #44]	; (b49d0 <loop+0xb8>)
   b49a2:	4805      	ldr	r0, [pc, #20]	; (b49b8 <loop+0xa0>)
   b49a4:	f001 febd 	bl	b6722 <_ZN4MQTT9subscribeEPKc>
   b49a8:	e7c5      	b.n	b4936 <loop+0x1e>
   b49aa:	b005      	add	sp, #20
   b49ac:	f85d fb04 	ldr.w	pc, [sp], #4
   b49b0:	2003e638 	.word	0x2003e638
   b49b4:	2003e57c 	.word	0x2003e57c
   b49b8:	2003e5d8 	.word	0x2003e5d8
   b49bc:	000b87dc 	.word	0x000b87dc
   b49c0:	000b87cf 	.word	0x000b87cf
   b49c4:	000b8dd3 	.word	0x000b8dd3
   b49c8:	000b87de 	.word	0x000b87de
   b49cc:	000b87c6 	.word	0x000b87c6
   b49d0:	000b87a8 	.word	0x000b87a8

000b49d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   b49d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b49d8:	b083      	sub	sp, #12
   b49da:	af00      	add	r7, sp, #0
   b49dc:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   b49de:	6800      	ldr	r0, [r0, #0]
   b49e0:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   b49e2:	4688      	mov	r8, r1
   b49e4:	4616      	mov	r6, r2
   b49e6:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   b49e8:	46eb      	mov	fp, sp
   b49ea:	f002 ffc1 	bl	b7970 <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   b49ee:	2800      	cmp	r0, #0
   b49f0:	d07f      	beq.n	b4af2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   b49f2:	f1b8 0f1d 	cmp.w	r8, #29
   b49f6:	d804      	bhi.n	b4a02 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x2e>
   b49f8:	4b4c      	ldr	r3, [pc, #304]	; (b4b2c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x158>)
   b49fa:	fa23 f308 	lsr.w	r3, r3, r8
   b49fe:	07db      	lsls	r3, r3, #31
   b4a00:	d402      	bmi.n	b4a08 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x34>
   b4a02:	7f63      	ldrb	r3, [r4, #29]
   b4a04:	2b01      	cmp	r3, #1
   b4a06:	d174      	bne.n	b4af2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    if (0 == id) {
   b4a08:	b946      	cbnz	r6, b4a1c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   b4a0a:	8b66      	ldrh	r6, [r4, #26]
   b4a0c:	b936      	cbnz	r6, b4a1c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x48>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   b4a0e:	8b23      	ldrh	r3, [r4, #24]
   b4a10:	3301      	adds	r3, #1
   b4a12:	b29b      	uxth	r3, r3
   b4a14:	2b00      	cmp	r3, #0
   b4a16:	d071      	beq.n	b4afc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x128>
        msgIdOut = 1;
   b4a18:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   b4a1a:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   b4a1c:	f1a8 030c 	sub.w	r3, r8, #12
   b4a20:	2b08      	cmp	r3, #8
   b4a22:	d816      	bhi.n	b4a52 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   b4a24:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   b4a28:	4293      	cmp	r3, r2
   b4a2a:	bf38      	it	cc
   b4a2c:	4613      	movcc	r3, r2
   b4a2e:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   b4a32:	f001 fe7b 	bl	b672c <_Z11BlynkMillisv>
   b4a36:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   b4a3a:	2800      	cmp	r0, #0
   b4a3c:	db60      	blt.n	b4b00 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
                run();
   b4a3e:	2100      	movs	r1, #0
   b4a40:	4620      	mov	r0, r4
   b4a42:	f7ff fec1 	bl	b47c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
                wait_time = allowed_time - BlynkMillis();
   b4a46:	f001 fe71 	bl	b672c <_Z11BlynkMillisv>
   b4a4a:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   b4a4e:	2800      	cmp	r0, #0
   b4a50:	daf5      	bge.n	b4a3e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6a>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4a52:	f1b9 0f00 	cmp.w	r9, #0
   b4a56:	d05a      	beq.n	b4b0e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13a>
   b4a58:	1d6b      	adds	r3, r5, #5
                               (data2 ? length2 : 0);
   b4a5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   b4a5c:	2a00      	cmp	r2, #0
   b4a5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   b4a60:	bf08      	it	eq
   b4a62:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4a64:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   b4a68:	f10a 0307 	add.w	r3, sl, #7
   b4a6c:	f023 0307 	bic.w	r3, r3, #7
   b4a70:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->length = htons(length+length2);
   b4a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    uint8_t buff[full_length];
   b4a76:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->length = htons(length+length2);
   b4a7a:	18ea      	adds	r2, r5, r3
   b4a7c:	f3c2 2307 	ubfx	r3, r2, #8, #8
    hdr->msg_id = htons(id);
   b4a80:	ba76      	rev16	r6, r6
    hdr->length = htons(length+length2);
   b4a82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    hdr->type = cmd;
   b4a86:	f88d 8000 	strb.w	r8, [sp]
    hdr->msg_id = htons(id);
   b4a8a:	f8ad 6001 	strh.w	r6, [sp, #1]
    hdr->length = htons(length+length2);
   b4a8e:	f8ad 3003 	strh.w	r3, [sp, #3]
    if (data && length) {
   b4a92:	f1b9 0f00 	cmp.w	r9, #0
   b4a96:	d03c      	beq.n	b4b12 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   b4a98:	2d00      	cmp	r5, #0
   b4a9a:	d03a      	beq.n	b4b12 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
        memcpy(buff + pos, data, length);
   b4a9c:	462a      	mov	r2, r5
   b4a9e:	4649      	mov	r1, r9
   b4aa0:	f10d 0005 	add.w	r0, sp, #5
   b4aa4:	f003 fd0a 	bl	b84bc <memcpy>
        pos += length;
   b4aa8:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   b4aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   b4aac:	b13b      	cbz	r3, b4abe <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
   b4aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   b4ab0:	b12b      	cbz	r3, b4abe <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xea>
        memcpy(buff + pos, data2, length2);
   b4ab2:	461a      	mov	r2, r3
   b4ab4:	687b      	ldr	r3, [r7, #4]
   b4ab6:	6b79      	ldr	r1, [r7, #52]	; 0x34
   b4ab8:	4418      	add	r0, r3
   b4aba:	f003 fcff 	bl	b84bc <memcpy>
    size_t pos = sizeof(BlynkHeader);
   b4abe:	2500      	movs	r5, #0
    while (wlen < full_length) {
   b4ac0:	4555      	cmp	r5, sl
   b4ac2:	d22a      	bcs.n	b4b1a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   b4ac4:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   b4ac8:	687b      	ldr	r3, [r7, #4]
   b4aca:	6820      	ldr	r0, [r4, #0]
   b4acc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   b4ad0:	bf28      	it	cs
   b4ad2:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   b4ad6:	1959      	adds	r1, r3, r5
   b4ad8:	f002 fdfd 	bl	b76d6 <_ZN9TCPClient5writeEPKhj>
   b4adc:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   b4ade:	2000      	movs	r0, #0
   b4ae0:	f001 fe22 	bl	b6728 <_Z10BlynkDelaym>
        if (w == 0) {
   b4ae4:	b9be      	cbnz	r6, b4b16 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
    void disconnect() { client.stop(); }
   b4ae6:	6820      	ldr	r0, [r4, #0]
   b4ae8:	f003 f87a 	bl	b7be0 <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b4aec:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   b4aee:	f001 fe21 	bl	b6734 <BlynkNoOpCbk>
}
   b4af2:	370c      	adds	r7, #12
   b4af4:	46dd      	mov	sp, fp
   b4af6:	46bd      	mov	sp, r7
   b4af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   b4afc:	2301      	movs	r3, #1
   b4afe:	e78b      	b.n	b4a18 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x44>
        } else if (nesting == 0) {
   b4b00:	7f21      	ldrb	r1, [r4, #28]
   b4b02:	2900      	cmp	r1, #0
   b4b04:	d1a5      	bne.n	b4a52 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
            run();
   b4b06:	4620      	mov	r0, r4
   b4b08:	f7ff fe5e 	bl	b47c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
   b4b0c:	e7a1      	b.n	b4a52 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x7e>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b4b0e:	2305      	movs	r3, #5
   b4b10:	e7a3      	b.n	b4a5a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x86>
    size_t pos = sizeof(BlynkHeader);
   b4b12:	2005      	movs	r0, #5
   b4b14:	e7c9      	b.n	b4aaa <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xd6>
        wlen += w;
   b4b16:	4435      	add	r5, r6
    while (wlen < full_length) {
   b4b18:	e7d2      	b.n	b4ac0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xec>
    if (wlen != full_length) {
   b4b1a:	d003      	beq.n	b4b24 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x150>
        internalReconnect();
   b4b1c:	4620      	mov	r0, r4
   b4b1e:	f7ff fbb5 	bl	b428c <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   b4b22:	e7e6      	b.n	b4af2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
    lastActivityOut = BlynkMillis();
   b4b24:	f001 fe02 	bl	b672c <_Z11BlynkMillisv>
   b4b28:	6120      	str	r0, [r4, #16]
   b4b2a:	e7e2      	b.n	b4af2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x11e>
   b4b2c:	20000045 	.word	0x20000045

000b4b30 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   b4b30:	b500      	push	{lr}
   b4b32:	b095      	sub	sp, #84	; 0x54
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   b4b34:	ab04      	add	r3, sp, #16
   b4b36:	2200      	movs	r2, #0
   b4b38:	9301      	str	r3, [sp, #4]
   b4b3a:	234f      	movs	r3, #79	; 0x4f
   b4b3c:	9300      	str	r3, [sp, #0]
   b4b3e:	9202      	str	r2, [sp, #8]
   b4b40:	4b03      	ldr	r3, [pc, #12]	; (b4b50 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x20>)
   b4b42:	2111      	movs	r1, #17
   b4b44:	f7ff ff46 	bl	b49d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   b4b48:	b015      	add	sp, #84	; 0x54
   b4b4a:	f85d fb04 	ldr.w	pc, [sp], #4
   b4b4e:	bf00      	nop
   b4b50:	000b8818 	.word	0x000b8818

000b4b54 <setup>:
void setup() {
   b4b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4b58:	b094      	sub	sp, #80	; 0x50
  Serial.begin(9600);
   b4b5a:	f003 f959 	bl	b7e10 <_Z16_fetch_usbserialv>
   b4b5e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4b62:	f003 f949 	bl	b7df8 <_ZN9USBSerial5beginEl>
  display.setup();
   b4b66:	4832      	ldr	r0, [pc, #200]	; (b4c30 <setup+0xdc>)
        this->authkey = auth;
   b4b68:	4d32      	ldr	r5, [pc, #200]	; (b4c34 <setup+0xe0>)
   b4b6a:	f001 fe41 	bl	b67f0 <_ZN16OledWingAdafruit5setupEv>
  Blynk.begin("gev9UlWHupS8yCBJ2wpDXDNm6THMu0oS", IPAddress(167, 172, 234, 162), 8080);
   b4b6e:	23a2      	movs	r3, #162	; 0xa2
   b4b70:	22ac      	movs	r2, #172	; 0xac
   b4b72:	21a7      	movs	r1, #167	; 0xa7
   b4b74:	9300      	str	r3, [sp, #0]
   b4b76:	a802      	add	r0, sp, #8
   b4b78:	23ea      	movs	r3, #234	; 0xea
   b4b7a:	f002 fa9b 	bl	b70b4 <_ZN9IPAddressC1Ehhhh>
   b4b7e:	ac03      	add	r4, sp, #12

    void begin( const char* auth,
                IPAddress addr,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   b4b80:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b4b84:	f001 fdd0 	bl	b6728 <_Z10BlynkDelaym>
   b4b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4b8a:	af09      	add	r7, sp, #36	; 0x24
   b4b8c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b4b8e:	6823      	ldr	r3, [r4, #0]
   b4b90:	703b      	strb	r3, [r7, #0]
   b4b92:	4b29      	ldr	r3, [pc, #164]	; (b4c38 <setup+0xe4>)
   b4b94:	606b      	str	r3, [r5, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b4b96:	f001 fdc9 	bl	b672c <_Z11BlynkMillisv>
   b4b9a:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b4b9e:	3808      	subs	r0, #8
   b4ba0:	f10d 0c24 	add.w	ip, sp, #36	; 0x24
   b4ba4:	e9c5 0003 	strd	r0, r0, [r5, #12]
   b4ba8:	6168      	str	r0, [r5, #20]
   b4baa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b4bae:	ae0f      	add	r6, sp, #60	; 0x3c
   b4bb0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
        this->conn.begin(addr, port);
   b4bb2:	682c      	ldr	r4, [r5, #0]
   b4bb4:	683b      	ldr	r3, [r7, #0]
   b4bb6:	7033      	strb	r3, [r6, #0]
   b4bb8:	af0f      	add	r7, sp, #60	; 0x3c
        port = p;
   b4bba:	f641 7390 	movw	r3, #8080	; 0x1f90
   b4bbe:	8723      	strh	r3, [r4, #56]	; 0x38
   b4bc0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
        domain = NULL;
   b4bc2:	f04f 0800 	mov.w	r8, #0
   b4bc6:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   b4bca:	3420      	adds	r4, #32
   b4bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b4bce:	6833      	ldr	r3, [r6, #0]
   b4bd0:	7023      	strb	r3, [r4, #0]
        while ((state != CONNECTED) &&
   b4bd2:	f244 664f 	movw	r6, #17999	; 0x464f
    void disconnect() { client.stop(); }
   b4bd6:	6828      	ldr	r0, [r5, #0]
   b4bd8:	f003 f802 	bl	b7be0 <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   b4bdc:	f885 801d 	strb.w	r8, [r5, #29]
        millis_time_t started = BlynkMillis();
   b4be0:	f001 fda4 	bl	b672c <_Z11BlynkMillisv>
   b4be4:	4604      	mov	r4, r0
        while ((state != CONNECTED) &&
   b4be6:	7f6b      	ldrb	r3, [r5, #29]
   b4be8:	2b01      	cmp	r3, #1
   b4bea:	d00c      	beq.n	b4c06 <setup+0xb2>
               (BlynkMillis() - started < timeout))
   b4bec:	f001 fd9e 	bl	b672c <_Z11BlynkMillisv>
   b4bf0:	1b00      	subs	r0, r0, r4
        while ((state != CONNECTED) &&
   b4bf2:	42b0      	cmp	r0, r6
   b4bf4:	d804      	bhi.n	b4c00 <setup+0xac>
            run();
   b4bf6:	2100      	movs	r1, #0
   b4bf8:	4628      	mov	r0, r5
   b4bfa:	f7ff fde5 	bl	b47c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
        while ((state != CONNECTED) &&
   b4bfe:	e7f2      	b.n	b4be6 <setup+0x92>
        config(auth, addr, port);
        while(this->connect() != true) {}
   b4c00:	7f6b      	ldrb	r3, [r5, #29]
   b4c02:	2b01      	cmp	r3, #1
   b4c04:	d1e7      	bne.n	b4bd6 <setup+0x82>
  pinMode(D7, OUTPUT);
   b4c06:	2101      	movs	r1, #1
   b4c08:	2007      	movs	r0, #7
   b4c0a:	f003 fa3f 	bl	b808c <pinMode>
  display.clearDisplay();
   b4c0e:	4808      	ldr	r0, [pc, #32]	; (b4c30 <setup+0xdc>)
   b4c10:	f000 fde6 	bl	b57e0 <_ZN16Adafruit_SSD130612clearDisplayEv>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4c14:	4806      	ldr	r0, [pc, #24]	; (b4c30 <setup+0xdc>)
   b4c16:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4c1a:	6143      	str	r3, [r0, #20]
  display.setTextSize(4);
   b4c1c:	2104      	movs	r1, #4
   b4c1e:	f000 fc26 	bl	b546e <_ZN12Adafruit_GFX11setTextSizeEh>
  display.display();
   b4c22:	4803      	ldr	r0, [pc, #12]	; (b4c30 <setup+0xdc>)
}
   b4c24:	b014      	add	sp, #80	; 0x50
   b4c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  display.display();
   b4c2a:	f001 b847 	b.w	b5cbc <_ZN16Adafruit_SSD13067displayEv>
   b4c2e:	bf00      	nop
   b4c30:	2003e638 	.word	0x2003e638
   b4c34:	2003e57c 	.word	0x2003e57c
   b4c38:	000b87e0 	.word	0x000b87e0

000b4c3c <_GLOBAL__sub_I_Blynk>:
   b4c3c:	b513      	push	{r0, r1, r4, lr}
        : domain(NULL), port(0)
   b4c3e:	4c15      	ldr	r4, [pc, #84]	; (b4c94 <_GLOBAL__sub_I_Blynk+0x58>)
SYSTEM_THREAD(ENABLED);
   b4c40:	2100      	movs	r1, #0
   b4c42:	2001      	movs	r0, #1
   b4c44:	f002 f844 	bl	b6cd0 <system_thread_set_state>
   b4c48:	4620      	mov	r0, r4
   b4c4a:	f003 f813 	bl	b7c74 <_ZN9TCPClientC1Ev>
   b4c4e:	f104 001c 	add.w	r0, r4, #28
   b4c52:	f002 f9eb 	bl	b702c <_ZN9IPAddressC1Ev>
        , state(CONNECTING)
   b4c56:	4a10      	ldr	r2, [pc, #64]	; (b4c98 <_GLOBAL__sub_I_Blynk+0x5c>)
MQTT client("lab.thewcl.com", 1883, callback);
   b4c58:	4910      	ldr	r1, [pc, #64]	; (b4c9c <_GLOBAL__sub_I_Blynk+0x60>)
   b4c5a:	4811      	ldr	r0, [pc, #68]	; (b4ca0 <_GLOBAL__sub_I_Blynk+0x64>)
   b4c5c:	2300      	movs	r3, #0
   b4c5e:	e9c2 4300 	strd	r4, r3, [r2]
   b4c62:	e9c2 3302 	strd	r3, r3, [r2, #8]
   b4c66:	e9c2 3304 	strd	r3, r3, [r2, #16]
   b4c6a:	6193      	str	r3, [r2, #24]
   b4c6c:	8393      	strh	r3, [r2, #28]
   b4c6e:	6363      	str	r3, [r4, #52]	; 0x34
   b4c70:	8723      	strh	r3, [r4, #56]	; 0x38
   b4c72:	9300      	str	r3, [sp, #0]
   b4c74:	f240 725b 	movw	r2, #1883	; 0x75b
   b4c78:	4b0a      	ldr	r3, [pc, #40]	; (b4ca4 <_GLOBAL__sub_I_Blynk+0x68>)
   b4c7a:	f001 f957 	bl	b5f2c <_ZN4MQTTC1EPKctPFvPcPhjEb>
OledWingAdafruit display;
   b4c7e:	2107      	movs	r1, #7
   b4c80:	4809      	ldr	r0, [pc, #36]	; (b4ca8 <_GLOBAL__sub_I_Blynk+0x6c>)
   b4c82:	f001 fd87 	bl	b6794 <_ZN16OledWingAdafruitC1Ei>
String message;
   b4c86:	4909      	ldr	r1, [pc, #36]	; (b4cac <_GLOBAL__sub_I_Blynk+0x70>)
   b4c88:	4809      	ldr	r0, [pc, #36]	; (b4cb0 <_GLOBAL__sub_I_Blynk+0x74>)
   b4c8a:	b002      	add	sp, #8
   b4c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
String message;
   b4c90:	f002 bca7 	b.w	b75e2 <_ZN6StringC1EPK19__FlashStringHelper>
   b4c94:	2003e59c 	.word	0x2003e59c
   b4c98:	2003e57c 	.word	0x2003e57c
   b4c9c:	000b8801 	.word	0x000b8801
   b4ca0:	2003e5d8 	.word	0x2003e5d8
   b4ca4:	000b40cd 	.word	0x000b40cd
   b4ca8:	2003e638 	.word	0x2003e638
   b4cac:	000b8dcc 	.word	0x000b8dcc
   b4cb0:	2003e6a8 	.word	0x2003e6a8

000b4cb4 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4cb8:	b085      	sub	sp, #20
   b4cba:	461f      	mov	r7, r3
   b4cbc:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4cc0:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4cc4:	eba8 0902 	sub.w	r9, r8, r2
   b4cc8:	eba7 0a01 	sub.w	sl, r7, r1
   b4ccc:	f1b9 0f00 	cmp.w	r9, #0
   b4cd0:	bfb8      	it	lt
   b4cd2:	f1c9 0900 	rsblt	r9, r9, #0
   b4cd6:	f1ba 0f00 	cmp.w	sl, #0
   b4cda:	bfb8      	it	lt
   b4cdc:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b4ce0:	45d1      	cmp	r9, sl
        uint16_t color) {
   b4ce2:	4683      	mov	fp, r0
   b4ce4:	460c      	mov	r4, r1
   b4ce6:	4615      	mov	r5, r2
    if (steep) {
   b4ce8:	dd04      	ble.n	b4cf4 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b4cea:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b4cec:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b4cee:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b4cf0:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b4cf2:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b4cf4:	42bc      	cmp	r4, r7
   b4cf6:	dd05      	ble.n	b4d04 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b4cf8:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b4cfa:	4645      	mov	r5, r8
   b4cfc:	4690      	mov	r8, r2
    if (x0 > x1) {
   b4cfe:	4622      	mov	r2, r4
   b4d00:	463c      	mov	r4, r7
   b4d02:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b4d04:	1b3e      	subs	r6, r7, r4
   b4d06:	b2b2      	uxth	r2, r6
   b4d08:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b4d0a:	eba8 0205 	sub.w	r2, r8, r5
   b4d0e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b4d12:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b4d16:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b4d1a:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b4d1e:	4545      	cmp	r5, r8
   b4d20:	bfb4      	ite	lt
   b4d22:	2201      	movlt	r2, #1
   b4d24:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b4d28:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b4d2a:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b4d2c:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b4d2e:	42bc      	cmp	r4, r7
   b4d30:	dc1c      	bgt.n	b4d6c <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b4d32:	f8db 2000 	ldr.w	r2, [fp]
   b4d36:	9303      	str	r3, [sp, #12]
        if (steep) {
   b4d38:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b4d3a:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b4d3e:	bfc7      	ittee	gt
   b4d40:	4629      	movgt	r1, r5
   b4d42:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b4d44:	462a      	movle	r2, r5
   b4d46:	4621      	movle	r1, r4
   b4d48:	4658      	mov	r0, fp
   b4d4a:	47c0      	blx	r8
        }
        err -= dy;
   b4d4c:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b4d4e:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b4d50:	1ab6      	subs	r6, r6, r2
   b4d52:	b2b1      	uxth	r1, r6
   b4d54:	b236      	sxth	r6, r6
        if (err < 0) {
   b4d56:	2e00      	cmp	r6, #0
   b4d58:	da05      	bge.n	b4d66 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b4d5a:	9a02      	ldr	r2, [sp, #8]
   b4d5c:	4415      	add	r5, r2
            err += dx;
   b4d5e:	9a00      	ldr	r2, [sp, #0]
   b4d60:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b4d62:	b22d      	sxth	r5, r5
            err += dx;
   b4d64:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b4d66:	3401      	adds	r4, #1
   b4d68:	b224      	sxth	r4, r4
   b4d6a:	e7e0      	b.n	b4d2e <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b4d6c:	b005      	add	sp, #20
   b4d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b4d72 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b4d72:	4770      	bx	lr

000b4d74 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b4d74:	b410      	push	{r4}
    drawPixel(x, y, color);
   b4d76:	6804      	ldr	r4, [r0, #0]
   b4d78:	6924      	ldr	r4, [r4, #16]
   b4d7a:	46a4      	mov	ip, r4
}
   b4d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b4d80:	4760      	bx	ip

000b4d82 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4d82:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b4d84:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b4d86:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b4d8a:	9502      	str	r5, [sp, #8]
   b4d8c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b4d8e:	46a4      	mov	ip, r4
}
   b4d90:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b4d92:	4760      	bx	ip

000b4d94 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4d94:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b4d96:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b4d98:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b4d9c:	9502      	str	r5, [sp, #8]
   b4d9e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b4da0:	46a4      	mov	ip, r4
}
   b4da2:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b4da4:	4760      	bx	ip

000b4da6 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4da6:	b470      	push	{r4, r5, r6}
   b4da8:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b4dac:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b4db0:	6804      	ldr	r4, [r0, #0]
   b4db2:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b4db6:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b4db8:	46a4      	mov	ip, r4
}
   b4dba:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b4dbc:	4760      	bx	ip

000b4dbe <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b4dbe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4dc2:	461c      	mov	r4, r3
    startWrite();
   b4dc4:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b4dc6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4dca:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b4dcc:	4605      	mov	r5, r0
   b4dce:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b4dd0:	3c01      	subs	r4, #1
   b4dd2:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b4dd4:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b4dd6:	b224      	sxth	r4, r4
    startWrite();
   b4dd8:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b4dda:	682b      	ldr	r3, [r5, #0]
   b4ddc:	f8cd 8004 	str.w	r8, [sp, #4]
   b4de0:	9400      	str	r4, [sp, #0]
   b4de2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b4de4:	4628      	mov	r0, r5
   b4de6:	463b      	mov	r3, r7
   b4de8:	4632      	mov	r2, r6
   b4dea:	4639      	mov	r1, r7
   b4dec:	47a0      	blx	r4
    endWrite();
   b4dee:	682b      	ldr	r3, [r5, #0]
   b4df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4df2:	4628      	mov	r0, r5
}
   b4df4:	b002      	add	sp, #8
   b4df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4dfa:	4718      	bx	r3

000b4dfc <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b4dfc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4e00:	461d      	mov	r5, r3
    startWrite();
   b4e02:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b4e04:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4e08:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b4e0a:	4604      	mov	r4, r0
   b4e0c:	4617      	mov	r7, r2
   b4e0e:	460e      	mov	r6, r1
    startWrite();
   b4e10:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b4e12:	e9cd 7800 	strd	r7, r8, [sp]
   b4e16:	6822      	ldr	r2, [r4, #0]
   b4e18:	1e6b      	subs	r3, r5, #1
   b4e1a:	4433      	add	r3, r6
   b4e1c:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b4e1e:	4620      	mov	r0, r4
   b4e20:	b21b      	sxth	r3, r3
   b4e22:	463a      	mov	r2, r7
   b4e24:	4631      	mov	r1, r6
   b4e26:	47a8      	blx	r5
    endWrite();
   b4e28:	6823      	ldr	r3, [r4, #0]
   b4e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4e2c:	4620      	mov	r0, r4
}
   b4e2e:	b002      	add	sp, #8
   b4e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4e34:	4718      	bx	r3

000b4e36 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4e36:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4e3a:	461e      	mov	r6, r3
    startWrite();
   b4e3c:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4e3e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b4e42:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4e44:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b4e48:	460c      	mov	r4, r1
   b4e4a:	4605      	mov	r5, r0
   b4e4c:	4617      	mov	r7, r2
    startWrite();
   b4e4e:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b4e50:	4426      	add	r6, r4
   b4e52:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b4e54:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b4e56:	da0b      	bge.n	b4e70 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b4e58:	f8cd 8000 	str.w	r8, [sp]
   b4e5c:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4e60:	4621      	mov	r1, r4
   b4e62:	464b      	mov	r3, r9
   b4e64:	463a      	mov	r2, r7
   b4e66:	4628      	mov	r0, r5
   b4e68:	3401      	adds	r4, #1
   b4e6a:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b4e6c:	b224      	sxth	r4, r4
   b4e6e:	e7f0      	b.n	b4e52 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b4e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4e72:	4628      	mov	r0, r5
}
   b4e74:	b002      	add	sp, #8
   b4e76:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4e7a:	4718      	bx	r3

000b4e7c <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b4e7c:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b4e7e:	6802      	ldr	r2, [r0, #0]
   b4e80:	9101      	str	r1, [sp, #4]
   b4e82:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b4e86:	9100      	str	r1, [sp, #0]
   b4e88:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b4e8a:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4e8e:	2200      	movs	r2, #0
   b4e90:	4611      	mov	r1, r2
   b4e92:	47a0      	blx	r4
}
   b4e94:	b002      	add	sp, #8
   b4e96:	bd10      	pop	{r4, pc}

000b4e98 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4e98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b4e9c:	4299      	cmp	r1, r3
        uint16_t color) {
   b4e9e:	4616      	mov	r6, r2
   b4ea0:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b4ea4:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4ea8:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b4eaa:	4680      	mov	r8, r0
   b4eac:	460d      	mov	r5, r1
   b4eae:	461c      	mov	r4, r3
    if(x0 == x1){
   b4eb0:	d113      	bne.n	b4eda <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4eb2:	42be      	cmp	r6, r7
   b4eb4:	bfc8      	it	gt
   b4eb6:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4eb8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4ebc:	bfc4      	itt	gt
   b4ebe:	463e      	movgt	r6, r7
   b4ec0:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4ec2:	1c7b      	adds	r3, r7, #1
   b4ec4:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b4ec6:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4ec8:	b21b      	sxth	r3, r3
   b4eca:	4632      	mov	r2, r6
   b4ecc:	4629      	mov	r1, r5
   b4ece:	4640      	mov	r0, r8
   b4ed0:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b4ed2:	b003      	add	sp, #12
   b4ed4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4ed8:	4760      	bx	ip
    } else if(y0 == y1){
   b4eda:	42be      	cmp	r6, r7
   b4edc:	d10a      	bne.n	b4ef4 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b4ede:	4299      	cmp	r1, r3
   b4ee0:	bfc2      	ittt	gt
   b4ee2:	460b      	movgt	r3, r1
   b4ee4:	4625      	movgt	r5, r4
   b4ee6:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4ee8:	1c63      	adds	r3, r4, #1
   b4eea:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b4eee:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b4ef0:	1b5b      	subs	r3, r3, r5
   b4ef2:	e7e9      	b.n	b4ec8 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b4ef4:	6953      	ldr	r3, [r2, #20]
   b4ef6:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b4ef8:	e9cd 7900 	strd	r7, r9, [sp]
   b4efc:	f8d8 3000 	ldr.w	r3, [r8]
   b4f00:	4640      	mov	r0, r8
   b4f02:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b4f04:	4632      	mov	r2, r6
   b4f06:	4623      	mov	r3, r4
   b4f08:	4629      	mov	r1, r5
   b4f0a:	47b8      	blx	r7
        endWrite();
   b4f0c:	f8d8 3000 	ldr.w	r3, [r8]
   b4f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4f12:	4640      	mov	r0, r8
}
   b4f14:	b003      	add	sp, #12
   b4f16:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b4f1a:	4718      	bx	r3

000b4f1c <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4f1c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4f20:	461d      	mov	r5, r3
    startWrite();
   b4f22:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4f24:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b4f28:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b4f2a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b4f2e:	4604      	mov	r4, r0
   b4f30:	460f      	mov	r7, r1
   b4f32:	4616      	mov	r6, r2
    startWrite();
   b4f34:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b4f36:	6823      	ldr	r3, [r4, #0]
   b4f38:	f8cd 8000 	str.w	r8, [sp]
   b4f3c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4f40:	4632      	mov	r2, r6
   b4f42:	462b      	mov	r3, r5
   b4f44:	4639      	mov	r1, r7
   b4f46:	4620      	mov	r0, r4
   b4f48:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b4f4a:	6823      	ldr	r3, [r4, #0]
   b4f4c:	f8cd 8000 	str.w	r8, [sp]
   b4f50:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b4f54:	4432      	add	r2, r6
   b4f56:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b4f5a:	4639      	mov	r1, r7
   b4f5c:	462b      	mov	r3, r5
   b4f5e:	4620      	mov	r0, r4
   b4f60:	b212      	sxth	r2, r2
   b4f62:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b4f64:	6823      	ldr	r3, [r4, #0]
   b4f66:	f8cd 8000 	str.w	r8, [sp]
   b4f6a:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b4f6e:	4632      	mov	r2, r6
   b4f70:	464b      	mov	r3, r9
   b4f72:	4639      	mov	r1, r7
   b4f74:	4620      	mov	r0, r4
   b4f76:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b4f78:	1e6b      	subs	r3, r5, #1
   b4f7a:	19d9      	adds	r1, r3, r7
   b4f7c:	6823      	ldr	r3, [r4, #0]
   b4f7e:	f8cd 8000 	str.w	r8, [sp]
   b4f82:	6a1d      	ldr	r5, [r3, #32]
   b4f84:	4620      	mov	r0, r4
   b4f86:	464b      	mov	r3, r9
   b4f88:	4632      	mov	r2, r6
   b4f8a:	b209      	sxth	r1, r1
   b4f8c:	47a8      	blx	r5
    endWrite();
   b4f8e:	6823      	ldr	r3, [r4, #0]
   b4f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4f92:	4620      	mov	r0, r4
}
   b4f94:	b002      	add	sp, #8
   b4f96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b4f9a:	4718      	bx	r3

000b4f9c <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b4f9c:	4770      	bx	lr

000b4f9e <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b4f9e:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b4fa2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b4fa6:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b4fa8:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b4faa:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b4fae:	bf59      	ittee	pl
   b4fb0:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b4fb2:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b4fb4:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b4fb6:	81c3      	strhmi	r3, [r0, #14]
}
   b4fb8:	4770      	bx	lr
	...

000b4fbc <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b4fbc:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b4fbe:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b4fc0:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b4fc2:	4a07      	ldr	r2, [pc, #28]	; (b4fe0 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b4fc4:	4d07      	ldr	r5, [pc, #28]	; (b4fe4 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b4fc6:	8101      	strh	r1, [r0, #8]
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   b4fc8:	2400      	movs	r4, #0
    _width    = WIDTH;
   b4fca:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b4fcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b4fd0:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b4fd4:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b4fd6:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b4fd8:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b4fda:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b4fdc:	6204      	str	r4, [r0, #32]
}
   b4fde:	bd30      	pop	{r4, r5, pc}
   b4fe0:	01000101 	.word	0x01000101
   b4fe4:	000b8d74 	.word	0x000b8d74

000b4fe8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4fec:	b089      	sub	sp, #36	; 0x24
   b4fee:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b4ff2:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4ff4:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b4ff8:	9304      	str	r3, [sp, #16]
   b4ffa:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b4ffe:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5000:	9305      	str	r3, [sp, #20]
   b5002:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b5006:	4604      	mov	r4, r0
    startWrite();
   b5008:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b500a:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b500e:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5012:	bf48      	it	mi
   b5014:	f108 020e 	addmi.w	r2, r8, #14
   b5018:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b501c:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b501e:	4635      	mov	r5, r6
   b5020:	9b03      	ldr	r3, [sp, #12]
   b5022:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b5024:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b5028:	189a      	adds	r2, r3, r2
   b502a:	9b05      	ldr	r3, [sp, #20]
   b502c:	428b      	cmp	r3, r1
   b502e:	b212      	sxth	r2, r2
   b5030:	dd27      	ble.n	b5082 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5032:	9b04      	ldr	r3, [sp, #16]
   b5034:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b5036:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b503a:	9306      	str	r3, [sp, #24]
   b503c:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b5040:	4580      	cmp	r8, r0
   b5042:	fa1f f189 	uxth.w	r1, r9
   b5046:	dd17      	ble.n	b5078 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5048:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b504a:	bf05      	ittet	eq
   b504c:	9b06      	ldreq	r3, [sp, #24]
   b504e:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b5050:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5052:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b5054:	bf18      	it	ne
   b5056:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b5058:	062b      	lsls	r3, r5, #24
   b505a:	d50a      	bpl.n	b5072 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b505c:	9b02      	ldr	r3, [sp, #8]
   b505e:	6820      	ldr	r0, [r4, #0]
   b5060:	9207      	str	r2, [sp, #28]
   b5062:	4419      	add	r1, r3
   b5064:	6983      	ldr	r3, [r0, #24]
   b5066:	b209      	sxth	r1, r1
   b5068:	461f      	mov	r7, r3
   b506a:	4620      	mov	r0, r4
   b506c:	4653      	mov	r3, sl
   b506e:	47b8      	blx	r7
   b5070:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b5072:	f109 0901 	add.w	r9, r9, #1
   b5076:	e7e1      	b.n	b503c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b5078:	9b01      	ldr	r3, [sp, #4]
   b507a:	3301      	adds	r3, #1
   b507c:	9301      	str	r3, [sp, #4]
   b507e:	445e      	add	r6, fp
   b5080:	e7ce      	b.n	b5020 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b5082:	6823      	ldr	r3, [r4, #0]
   b5084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5086:	4620      	mov	r0, r4
}
   b5088:	b009      	add	sp, #36	; 0x24
   b508a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b508e:	4718      	bx	r3

000b5090 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5094:	ed2d 8b02 	vpush	{d8}
   b5098:	b091      	sub	sp, #68	; 0x44
   b509a:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b509c:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b509e:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b50a2:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b50a6:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b50aa:	9103      	str	r1, [sp, #12]
   b50ac:	461f      	mov	r7, r3
   b50ae:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b50b2:	9304      	str	r3, [sp, #16]
   b50b4:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b50b6:	2a00      	cmp	r2, #0
   b50b8:	f040 80c5 	bne.w	b5246 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b50bc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b50c0:	428b      	cmp	r3, r1
   b50c2:	f340 814c 	ble.w	b535e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b50c6:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b50ca:	42b3      	cmp	r3, r6
   b50cc:	f340 8147 	ble.w	b535e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b50d0:	2306      	movs	r3, #6
   b50d2:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b50d6:	2b00      	cmp	r3, #0
   b50d8:	f340 8141 	ble.w	b535e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b50dc:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b50e0:	2b00      	cmp	r3, #0
   b50e2:	f340 813c 	ble.w	b535e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b50e6:	7f03      	ldrb	r3, [r0, #28]
   b50e8:	b91b      	cbnz	r3, b50f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b50ea:	2faf      	cmp	r7, #175	; 0xaf
   b50ec:	bf84      	itt	hi
   b50ee:	3701      	addhi	r7, #1
   b50f0:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b50f2:	f8db 3000 	ldr.w	r3, [fp]
   b50f6:	4658      	mov	r0, fp
   b50f8:	695b      	ldr	r3, [r3, #20]
   b50fa:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b50fc:	2205      	movs	r2, #5
   b50fe:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5100:	2200      	movs	r2, #0
   b5102:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5104:	4a98      	ldr	r2, [pc, #608]	; (b5368 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b5106:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b510a:	18d3      	adds	r3, r2, r3
   b510c:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b510e:	b2b3      	uxth	r3, r6
   b5110:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5112:	9a05      	ldr	r2, [sp, #20]
   b5114:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5116:	5c9b      	ldrb	r3, [r3, r2]
   b5118:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b511a:	b2ab      	uxth	r3, r5
   b511c:	930b      	str	r3, [sp, #44]	; 0x2c
   b511e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b5122:	9308      	str	r3, [sp, #32]
   b5124:	9b03      	ldr	r3, [sp, #12]
   b5126:	fb02 f905 	mul.w	r9, r2, r5
   b512a:	fa19 f983 	uxtah	r9, r9, r3
   b512e:	fa0f f389 	sxth.w	r3, r9
   b5132:	ee08 3a10 	vmov	s16, r3
   b5136:	2308      	movs	r3, #8
   b5138:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b513a:	9b03      	ldr	r3, [sp, #12]
   b513c:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5140:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5144:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b5148:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b514a:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b514e:	07d2      	lsls	r2, r2, #31
   b5150:	d552      	bpl.n	b51f8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b5152:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5154:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5158:	d13e      	bne.n	b51d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b515a:	2c01      	cmp	r4, #1
   b515c:	d13c      	bne.n	b51d8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b515e:	699b      	ldr	r3, [r3, #24]
   b5160:	9906      	ldr	r1, [sp, #24]
   b5162:	461f      	mov	r7, r3
   b5164:	9b04      	ldr	r3, [sp, #16]
   b5166:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b5168:	b212      	sxth	r2, r2
   b516a:	4651      	mov	r1, sl
   b516c:	4658      	mov	r0, fp
   b516e:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5170:	f109 0301 	add.w	r3, r9, #1
   b5174:	fa4f f983 	sxtb.w	r9, r3
   b5178:	9b07      	ldr	r3, [sp, #28]
   b517a:	085b      	lsrs	r3, r3, #1
   b517c:	9307      	str	r3, [sp, #28]
   b517e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5180:	3b01      	subs	r3, #1
   b5182:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5186:	930a      	str	r3, [sp, #40]	; 0x28
   b5188:	d1de      	bne.n	b5148 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b518a:	9f05      	ldr	r7, [sp, #20]
   b518c:	3701      	adds	r7, #1
   b518e:	b27b      	sxtb	r3, r7
   b5190:	9305      	str	r3, [sp, #20]
   b5192:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5194:	3b01      	subs	r3, #1
   b5196:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b519a:	9309      	str	r3, [sp, #36]	; 0x24
   b519c:	d1b9      	bne.n	b5112 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b519e:	9b04      	ldr	r3, [sp, #16]
   b51a0:	4543      	cmp	r3, r8
   b51a2:	d00f      	beq.n	b51c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b51a4:	2d01      	cmp	r5, #1
   b51a6:	f8db 3000 	ldr.w	r3, [fp]
   b51aa:	d13b      	bne.n	b5224 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b51ac:	2c01      	cmp	r4, #1
   b51ae:	d139      	bne.n	b5224 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b51b0:	9908      	ldr	r1, [sp, #32]
   b51b2:	f8cd 8000 	str.w	r8, [sp]
   b51b6:	3105      	adds	r1, #5
   b51b8:	6a1c      	ldr	r4, [r3, #32]
   b51ba:	4632      	mov	r2, r6
   b51bc:	2308      	movs	r3, #8
   b51be:	b209      	sxth	r1, r1
   b51c0:	4658      	mov	r0, fp
   b51c2:	47a0      	blx	r4
        endWrite();
   b51c4:	f8db 3000 	ldr.w	r3, [fp]
   b51c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b51ca:	4658      	mov	r0, fp
}
   b51cc:	b011      	add	sp, #68	; 0x44
   b51ce:	ecbd 8b02 	vpop	{d8}
   b51d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b51d6:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b51d8:	9906      	ldr	r1, [sp, #24]
   b51da:	fb14 f202 	smulbb	r2, r4, r2
   b51de:	440a      	add	r2, r1
   b51e0:	9904      	ldr	r1, [sp, #16]
   b51e2:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b51e4:	9400      	str	r4, [sp, #0]
   b51e6:	69db      	ldr	r3, [r3, #28]
   b51e8:	ee18 1a10 	vmov	r1, s16
   b51ec:	461f      	mov	r7, r3
   b51ee:	b212      	sxth	r2, r2
   b51f0:	462b      	mov	r3, r5
   b51f2:	4658      	mov	r0, fp
   b51f4:	47b8      	blx	r7
   b51f6:	e7bb      	b.n	b5170 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b51f8:	9a04      	ldr	r2, [sp, #16]
   b51fa:	4542      	cmp	r2, r8
   b51fc:	d0b8      	beq.n	b5170 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b51fe:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5200:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5204:	d107      	bne.n	b5216 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b5206:	2c01      	cmp	r4, #1
   b5208:	d105      	bne.n	b5216 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b520a:	699b      	ldr	r3, [r3, #24]
   b520c:	9906      	ldr	r1, [sp, #24]
   b520e:	461f      	mov	r7, r3
   b5210:	440a      	add	r2, r1
   b5212:	4643      	mov	r3, r8
   b5214:	e7a8      	b.n	b5168 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5216:	9906      	ldr	r1, [sp, #24]
   b5218:	f8cd 8004 	str.w	r8, [sp, #4]
   b521c:	fb14 f202 	smulbb	r2, r4, r2
   b5220:	440a      	add	r2, r1
   b5222:	e7df      	b.n	b51e4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b5224:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5226:	f8cd 8004 	str.w	r8, [sp, #4]
   b522a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b522e:	9a08      	ldr	r2, [sp, #32]
   b5230:	00e4      	lsls	r4, r4, #3
   b5232:	440a      	add	r2, r1
   b5234:	4611      	mov	r1, r2
   b5236:	9400      	str	r4, [sp, #0]
   b5238:	69dc      	ldr	r4, [r3, #28]
   b523a:	4632      	mov	r2, r6
   b523c:	462b      	mov	r3, r5
   b523e:	b209      	sxth	r1, r1
   b5240:	4658      	mov	r0, fp
   b5242:	47a0      	blx	r4
        endWrite();
   b5244:	e7be      	b.n	b51c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b5246:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b5248:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b524a:	6812      	ldr	r2, [r2, #0]
   b524c:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b524e:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b5250:	b2ff      	uxtb	r7, r7
   b5252:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b5256:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b525a:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b525c:	789a      	ldrb	r2, [r3, #2]
   b525e:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b5260:	78da      	ldrb	r2, [r3, #3]
   b5262:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b5264:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5266:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b526a:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b526e:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b5270:	d801      	bhi.n	b5276 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b5272:	2c01      	cmp	r4, #1
   b5274:	d957      	bls.n	b5326 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b5276:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b527a:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b527c:	fa0f f38a 	sxth.w	r3, sl
   b5280:	9307      	str	r3, [sp, #28]
        startWrite();
   b5282:	f8db 3000 	ldr.w	r3, [fp]
   b5286:	4658      	mov	r0, fp
   b5288:	695b      	ldr	r3, [r3, #20]
   b528a:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b528c:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b528e:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5292:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5294:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5298:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b529a:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b529c:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b529e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b52a0:	429f      	cmp	r7, r3
   b52a2:	d28f      	bcs.n	b51c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b52a4:	9b07      	ldr	r3, [sp, #28]
   b52a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b52a8:	443b      	add	r3, r7
   b52aa:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b52ae:	2200      	movs	r2, #0
   b52b0:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b52b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b52b4:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b52b6:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b52ba:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b52be:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b52c2:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b52c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b52c6:	9905      	ldr	r1, [sp, #20]
   b52c8:	4291      	cmp	r1, r2
   b52ca:	d241      	bcs.n	b5350 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b52cc:	1c5a      	adds	r2, r3, #1
   b52ce:	b2d2      	uxtb	r2, r2
   b52d0:	075b      	lsls	r3, r3, #29
   b52d2:	920d      	str	r2, [sp, #52]	; 0x34
   b52d4:	d107      	bne.n	b52e6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b52d6:	9b06      	ldr	r3, [sp, #24]
   b52d8:	9906      	ldr	r1, [sp, #24]
   b52da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b52dc:	3301      	adds	r3, #1
   b52de:	b29b      	uxth	r3, r3
   b52e0:	f812 9001 	ldrb.w	r9, [r2, r1]
   b52e4:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b52e6:	f019 0f80 	tst.w	r9, #128	; 0x80
   b52ea:	d012      	beq.n	b5312 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b52ec:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b52ee:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b52f2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b52f6:	d11a      	bne.n	b532e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b52f8:	2c01      	cmp	r4, #1
   b52fa:	d118      	bne.n	b532e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b52fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b52fe:	699b      	ldr	r3, [r3, #24]
   b5300:	4411      	add	r1, r2
   b5302:	9a05      	ldr	r2, [sp, #20]
   b5304:	4411      	add	r1, r2
   b5306:	461e      	mov	r6, r3
   b5308:	4652      	mov	r2, sl
   b530a:	9b04      	ldr	r3, [sp, #16]
   b530c:	b209      	sxth	r1, r1
   b530e:	4658      	mov	r0, fp
   b5310:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b5312:	9e05      	ldr	r6, [sp, #20]
   b5314:	3601      	adds	r6, #1
   b5316:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b5318:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b531c:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b531e:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b5322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b5324:	e7ce      	b.n	b52c4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b5326:	2300      	movs	r3, #0
   b5328:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b532c:	e7a9      	b.n	b5282 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b532e:	9805      	ldr	r0, [sp, #20]
   b5330:	9a08      	ldr	r2, [sp, #32]
   b5332:	4402      	add	r2, r0
   b5334:	fb02 1105 	mla	r1, r2, r5, r1
   b5338:	9a04      	ldr	r2, [sp, #16]
   b533a:	e9cd 4200 	strd	r4, r2, [sp]
   b533e:	69db      	ldr	r3, [r3, #28]
   b5340:	ee18 2a10 	vmov	r2, s16
   b5344:	461e      	mov	r6, r3
   b5346:	b209      	sxth	r1, r1
   b5348:	462b      	mov	r3, r5
   b534a:	4658      	mov	r0, fp
   b534c:	47b0      	blx	r6
   b534e:	e7e0      	b.n	b5312 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b5350:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b5352:	3701      	adds	r7, #1
   b5354:	4498      	add	r8, r3
   b5356:	fa5f f888 	uxtb.w	r8, r8
   b535a:	b2ff      	uxtb	r7, r7
   b535c:	e79f      	b.n	b529e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b535e:	b011      	add	sp, #68	; 0x44
   b5360:	ecbd 8b02 	vpop	{d8}
   b5364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5368:	000b8869 	.word	0x000b8869

000b536c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b536c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b536e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b5370:	b085      	sub	sp, #20
   b5372:	4604      	mov	r4, r0
   b5374:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b5376:	2a00      	cmp	r2, #0
   b5378:	d134      	bne.n	b53e4 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b537a:	290a      	cmp	r1, #10
   b537c:	d108      	bne.n	b5390 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b537e:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b5380:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b5382:	7e42      	ldrb	r2, [r0, #25]
   b5384:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b5388:	8263      	strh	r3, [r4, #18]
}
   b538a:	2001      	movs	r0, #1
   b538c:	b005      	add	sp, #20
   b538e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b5390:	290d      	cmp	r1, #13
   b5392:	d0fa      	beq.n	b538a <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5394:	7ee1      	ldrb	r1, [r4, #27]
   b5396:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b5398:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b539a:	b171      	cbz	r1, b53ba <_ZN12Adafruit_GFX5writeEh+0x4e>
   b539c:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b53a0:	2106      	movs	r1, #6
   b53a2:	fb11 6100 	smlabb	r1, r1, r0, r6
   b53a6:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b53aa:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b53ac:	bfc1      	itttt	gt
   b53ae:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b53b2:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b53b4:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b53b8:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b53ba:	8ae2      	ldrh	r2, [r4, #22]
   b53bc:	9201      	str	r2, [sp, #4]
   b53be:	8aa2      	ldrh	r2, [r4, #20]
   b53c0:	9200      	str	r2, [sp, #0]
   b53c2:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b53c6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b53ca:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b53ce:	4620      	mov	r0, r4
   b53d0:	f7ff fe5e 	bl	b5090 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b53d4:	7e23      	ldrb	r3, [r4, #24]
   b53d6:	8a22      	ldrh	r2, [r4, #16]
   b53d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b53dc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b53e0:	8223      	strh	r3, [r4, #16]
   b53e2:	e7d2      	b.n	b538a <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b53e4:	290a      	cmp	r1, #10
   b53e6:	d107      	bne.n	b53f8 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b53e8:	2300      	movs	r3, #0
   b53ea:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b53ec:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b53ee:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b53f0:	8a43      	ldrh	r3, [r0, #18]
   b53f2:	fb01 3302 	mla	r3, r1, r2, r3
   b53f6:	e7c7      	b.n	b5388 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b53f8:	290d      	cmp	r1, #13
   b53fa:	d0c6      	beq.n	b538a <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b53fc:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b53fe:	42a9      	cmp	r1, r5
   b5400:	d3c3      	bcc.n	b538a <_ZN12Adafruit_GFX5writeEh+0x1e>
   b5402:	7a51      	ldrb	r1, [r2, #9]
   b5404:	4299      	cmp	r1, r3
   b5406:	d3c0      	bcc.n	b538a <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b5408:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b540a:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b540c:	b2ed      	uxtb	r5, r5
   b540e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b5412:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b5414:	b328      	cbz	r0, b5462 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b5416:	78e9      	ldrb	r1, [r5, #3]
   b5418:	b319      	cbz	r1, b5462 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b541a:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b541c:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b541e:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b5420:	b191      	cbz	r1, b5448 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b5422:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b5426:	4408      	add	r0, r1
   b5428:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b542c:	fb06 1100 	mla	r1, r6, r0, r1
   b5430:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b5434:	4281      	cmp	r1, r0
   b5436:	dd07      	ble.n	b5448 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b5438:	2000      	movs	r0, #0
   b543a:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b543c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b5440:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b5442:	fb02 1207 	mla	r2, r2, r7, r1
   b5446:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b5448:	8ae2      	ldrh	r2, [r4, #22]
   b544a:	9201      	str	r2, [sp, #4]
   b544c:	8aa2      	ldrh	r2, [r4, #20]
   b544e:	9200      	str	r2, [sp, #0]
   b5450:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b5454:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5458:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b545c:	4620      	mov	r0, r4
   b545e:	f7ff fe17 	bl	b5090 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b5462:	7929      	ldrb	r1, [r5, #4]
   b5464:	7e22      	ldrb	r2, [r4, #24]
   b5466:	8a23      	ldrh	r3, [r4, #16]
   b5468:	fb01 3302 	mla	r3, r1, r2, r3
   b546c:	e7b8      	b.n	b53e0 <_ZN12Adafruit_GFX5writeEh+0x74>

000b546e <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b546e:	2901      	cmp	r1, #1
   b5470:	bf38      	it	cc
   b5472:	2101      	movcc	r1, #1
   b5474:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b5476:	7641      	strb	r1, [r0, #25]
}
   b5478:	4770      	bx	lr

000b547a <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b547a:	4770      	bx	lr

000b547c <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b547c:	b510      	push	{r4, lr}
  }
   b547e:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b5480:	4604      	mov	r4, r0
  }
   b5482:	f7fe fe0c 	bl	b409e <_ZdlPvj>
   b5486:	4620      	mov	r0, r4
   b5488:	bd10      	pop	{r4, pc}

000b548a <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b548a:	b40e      	push	{r1, r2, r3}
   b548c:	b503      	push	{r0, r1, lr}
   b548e:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b5490:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b5492:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b5496:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b5498:	f001 ff45 	bl	b7326 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b549c:	b002      	add	sp, #8
   b549e:	f85d eb04 	ldr.w	lr, [sp], #4
   b54a2:	b003      	add	sp, #12
   b54a4:	4770      	bx	lr
	...

000b54a8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b54a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b54aa:	4604      	mov	r4, r0
   b54ac:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b54ae:	7922      	ldrb	r2, [r4, #4]
   b54b0:	68a3      	ldr	r3, [r4, #8]
   b54b2:	b132      	cbz	r2, b54c2 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b54b4:	b9a3      	cbnz	r3, b54e0 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b54b6:	490b      	ldr	r1, [pc, #44]	; (b54e4 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b54b8:	b002      	add	sp, #8
   b54ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b54be:	f001 bef7 	b.w	b72b0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b54c2:	4a09      	ldr	r2, [pc, #36]	; (b54e8 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b54c4:	7b26      	ldrb	r6, [r4, #12]
   b54c6:	4d09      	ldr	r5, [pc, #36]	; (b54ec <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b54c8:	4909      	ldr	r1, [pc, #36]	; (b54f0 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b54ca:	7b64      	ldrb	r4, [r4, #13]
   b54cc:	2e01      	cmp	r6, #1
   b54ce:	bf18      	it	ne
   b54d0:	4629      	movne	r1, r5
   b54d2:	e9cd 1400 	strd	r1, r4, [sp]
   b54d6:	4907      	ldr	r1, [pc, #28]	; (b54f4 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b54d8:	f7ff ffd7 	bl	b548a <_ZN5Print6printfEPKcz>
  }
   b54dc:	b002      	add	sp, #8
   b54de:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b54e0:	4a05      	ldr	r2, [pc, #20]	; (b54f8 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b54e2:	e7ef      	b.n	b54c4 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b54e4:	000b8dd5 	.word	0x000b8dd5
   b54e8:	000b8dcc 	.word	0x000b8dcc
   b54ec:	000b8dd1 	.word	0x000b8dd1
   b54f0:	000b8dcd 	.word	0x000b8dcd
   b54f4:	000b8deb 	.word	0x000b8deb
   b54f8:	000b8dc4 	.word	0x000b8dc4

000b54fc <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b54fc:	b510      	push	{r4, lr}
   b54fe:	4b04      	ldr	r3, [pc, #16]	; (b5510 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b5500:	6003      	str	r3, [r0, #0]
   b5502:	4604      	mov	r4, r0
  if(buffer) {
   b5504:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5506:	b108      	cbz	r0, b550c <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b5508:	f001 fc7e 	bl	b6e08 <free>
    buffer = NULL;
  }
}
   b550c:	4620      	mov	r0, r4
   b550e:	bd10      	pop	{r4, pc}
   b5510:	000b92c4 	.word	0x000b92c4

000b5514 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b5514:	b510      	push	{r4, lr}
   b5516:	4604      	mov	r4, r0
}
   b5518:	f7ff fff0 	bl	b54fc <_ZN16Adafruit_SSD1306D1Ev>
   b551c:	4620      	mov	r0, r4
   b551e:	2150      	movs	r1, #80	; 0x50
   b5520:	f7fe fdbd 	bl	b409e <_ZdlPvj>
   b5524:	4620      	mov	r0, r4
   b5526:	bd10      	pop	{r4, pc}

000b5528 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b5528:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b552a:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b552c:	db4b      	blt.n	b55c6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b552e:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b5532:	428c      	cmp	r4, r1
   b5534:	dd47      	ble.n	b55c6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5536:	2a00      	cmp	r2, #0
   b5538:	db45      	blt.n	b55c6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b553a:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b553e:	4294      	cmp	r4, r2
   b5540:	dd41      	ble.n	b55c6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b5542:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b5544:	2c02      	cmp	r4, #2
   b5546:	d01f      	beq.n	b5588 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b5548:	2c03      	cmp	r4, #3
   b554a:	d026      	beq.n	b559a <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b554c:	2c01      	cmp	r4, #1
   b554e:	d104      	bne.n	b555a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b5550:	8904      	ldrh	r4, [r0, #8]
   b5552:	43d2      	mvns	r2, r2
   b5554:	4414      	add	r4, r2
      break;
   b5556:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b5558:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b555a:	2b01      	cmp	r3, #1
   b555c:	d023      	beq.n	b55a6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b555e:	2b02      	cmp	r3, #2
   b5560:	d032      	beq.n	b55c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b5562:	bb83      	cbnz	r3, b55c6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b5564:	2a00      	cmp	r2, #0
   b5566:	4613      	mov	r3, r2
   b5568:	8904      	ldrh	r4, [r0, #8]
   b556a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b556c:	bfb8      	it	lt
   b556e:	1dd3      	addlt	r3, r2, #7
   b5570:	10db      	asrs	r3, r3, #3
   b5572:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5576:	f002 0207 	and.w	r2, r2, #7
   b557a:	2301      	movs	r3, #1
   b557c:	4093      	lsls	r3, r2
   b557e:	5c42      	ldrb	r2, [r0, r1]
   b5580:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b5584:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b5586:	e01e      	b.n	b55c6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b5588:	8904      	ldrh	r4, [r0, #8]
   b558a:	3c01      	subs	r4, #1
   b558c:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b558e:	8944      	ldrh	r4, [r0, #10]
   b5590:	43d2      	mvns	r2, r2
   b5592:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b5594:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b5596:	b212      	sxth	r2, r2
      break;
   b5598:	e7df      	b.n	b555a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b559a:	8944      	ldrh	r4, [r0, #10]
   b559c:	3c01      	subs	r4, #1
   b559e:	1a64      	subs	r4, r4, r1
      break;
   b55a0:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b55a2:	b222      	sxth	r2, r4
      break;
   b55a4:	e7d9      	b.n	b555a <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b55a6:	2a00      	cmp	r2, #0
   b55a8:	8904      	ldrh	r4, [r0, #8]
   b55aa:	4613      	mov	r3, r2
   b55ac:	bfb8      	it	lt
   b55ae:	1dd3      	addlt	r3, r2, #7
   b55b0:	10db      	asrs	r3, r3, #3
   b55b2:	fb13 1104 	smlabb	r1, r3, r4, r1
   b55b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b55b8:	f002 0007 	and.w	r0, r2, #7
   b55bc:	2201      	movs	r2, #1
   b55be:	4082      	lsls	r2, r0
   b55c0:	5c58      	ldrb	r0, [r3, r1]
   b55c2:	4302      	orrs	r2, r0
   b55c4:	545a      	strb	r2, [r3, r1]
}
   b55c6:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b55c8:	2a00      	cmp	r2, #0
   b55ca:	4613      	mov	r3, r2
   b55cc:	8904      	ldrh	r4, [r0, #8]
   b55ce:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b55d0:	bfb8      	it	lt
   b55d2:	1dd3      	addlt	r3, r2, #7
   b55d4:	10db      	asrs	r3, r3, #3
   b55d6:	fb13 1104 	smlabb	r1, r3, r4, r1
   b55da:	f002 0207 	and.w	r2, r2, #7
   b55de:	2301      	movs	r3, #1
   b55e0:	fa03 f202 	lsl.w	r2, r3, r2
   b55e4:	5c43      	ldrb	r3, [r0, r1]
   b55e6:	405a      	eors	r2, r3
   b55e8:	e7cc      	b.n	b5584 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b55ec <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b55ec:	b570      	push	{r4, r5, r6, lr}
   b55ee:	4604      	mov	r4, r0
   b55f0:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b55f2:	2600      	movs	r6, #0
   b55f4:	f7ff fce2 	bl	b4fbc <_ZN12Adafruit_GFXC1Ess>
   b55f8:	4b11      	ldr	r3, [pc, #68]	; (b5640 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b55fa:	6023      	str	r3, [r4, #0]
   b55fc:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b55fe:	b915      	cbnz	r5, b5606 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b5600:	f002 fdd6 	bl	b81b0 <_Z19__fetch_global_Wirev>
   b5604:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b5606:	23ff      	movs	r3, #255	; 0xff
   b5608:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b560c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b5610:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b5614:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b5618:	4b0a      	ldr	r3, [pc, #40]	; (b5644 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b561a:	63a3      	str	r3, [r4, #56]	; 0x38
   b561c:	2301      	movs	r3, #1
   b561e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b5622:	9b05      	ldr	r3, [sp, #20]
   b5624:	64a3      	str	r3, [r4, #72]	; 0x48
   b5626:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b562a:	9b06      	ldr	r3, [sp, #24]
   b562c:	86a2      	strh	r2, [r4, #52]	; 0x34
   b562e:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b5632:	6426      	str	r6, [r4, #64]	; 0x40
   b5634:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b5638:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b563a:	4620      	mov	r0, r4
   b563c:	bd70      	pop	{r4, r5, r6, pc}
   b563e:	bf00      	nop
   b5640:	000b92c4 	.word	0x000b92c4
   b5644:	000b8e10 	.word	0x000b8e10

000b5648 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b5648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b564a:	4604      	mov	r4, r0
  if(wire) { // I2C
   b564c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b564e:	460d      	mov	r5, r1
  if(wire) { // I2C
   b5650:	b190      	cbz	r0, b5678 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b5652:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5656:	f001 fca5 	bl	b6fa4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b565a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b565c:	6803      	ldr	r3, [r0, #0]
   b565e:	2100      	movs	r1, #0
   b5660:	689b      	ldr	r3, [r3, #8]
   b5662:	4798      	blx	r3
    WIRE_WRITE(c);
   b5664:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5666:	6803      	ldr	r3, [r0, #0]
   b5668:	4629      	mov	r1, r5
   b566a:	689b      	ldr	r3, [r3, #8]
   b566c:	4798      	blx	r3
    wire->endTransmission();
   b566e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b5670:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b5674:	f001 bc9d 	b.w	b6fb2 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5678:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b567c:	4601      	mov	r1, r0
   b567e:	b298      	uxth	r0, r3
   b5680:	f002 fd15 	bl	b80ae <digitalWrite>
  if(spi) {
   b5684:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5686:	b120      	cbz	r0, b5692 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b5688:	4629      	mov	r1, r5
}
   b568a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b568e:	f001 bf2d 	b.w	b74ec <_ZN8SPIClass8transferEh>
   b5692:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5694:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5696:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b569a:	ea05 0107 	and.w	r1, r5, r7
   b569e:	b280      	uxth	r0, r0
   b56a0:	f002 fd05 	bl	b80ae <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b56a4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b56a8:	2101      	movs	r1, #1
   b56aa:	b280      	uxth	r0, r0
   b56ac:	f002 fcff 	bl	b80ae <digitalWrite>
      digitalWrite(clkPin , LOW);
   b56b0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b56b4:	2100      	movs	r1, #0
   b56b6:	b280      	uxth	r0, r0
   b56b8:	f002 fcf9 	bl	b80ae <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b56bc:	3e01      	subs	r6, #1
   b56be:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b56c2:	d1e8      	bne.n	b5696 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b56c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b56c6 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b56c6:	b538      	push	{r3, r4, r5, lr}
   b56c8:	4604      	mov	r4, r0
  TRANSACTION_START
   b56ca:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b56cc:	460d      	mov	r5, r1
  TRANSACTION_START
   b56ce:	b180      	cbz	r0, b56f2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b56d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b56d2:	f001 fc59 	bl	b6f88 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b56d6:	2d00      	cmp	r5, #0
   b56d8:	4620      	mov	r0, r4
   b56da:	bf14      	ite	ne
   b56dc:	21a7      	movne	r1, #167	; 0xa7
   b56de:	21a6      	moveq	r1, #166	; 0xa6
   b56e0:	f7ff ffb2 	bl	b5648 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b56e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b56e6:	b188      	cbz	r0, b570c <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b56e8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b56ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b56ee:	f001 bc4b 	b.w	b6f88 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b56f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b56f4:	b118      	cbz	r0, b56fe <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b56f6:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b56fa:	f001 fe89 	bl	b7410 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b56fe:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5702:	2100      	movs	r1, #0
   b5704:	b280      	uxth	r0, r0
   b5706:	f002 fcd2 	bl	b80ae <digitalWrite>
   b570a:	e7e4      	b.n	b56d6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b570c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5710:	2101      	movs	r1, #1
   b5712:	b280      	uxth	r0, r0
   b5714:	f002 fccb 	bl	b80ae <digitalWrite>
   b5718:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b571a:	b118      	cbz	r0, b5724 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b571c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b5720:	f001 be5c 	b.w	b73dc <_ZN8SPIClass14endTransactionEv>
}
   b5724:	bd38      	pop	{r3, r4, r5, pc}

000b5726 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b5726:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b572a:	4604      	mov	r4, r0
  if(wire) { // I2C
   b572c:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b572e:	460d      	mov	r5, r1
  if(wire) { // I2C
   b5730:	188f      	adds	r7, r1, r2
   b5732:	b340      	cbz	r0, b5786 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b5734:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5738:	f001 fc34 	bl	b6fa4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b573c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b573e:	6803      	ldr	r3, [r0, #0]
   b5740:	2100      	movs	r1, #0
   b5742:	689b      	ldr	r3, [r3, #8]
   b5744:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5746:	2601      	movs	r6, #1
    while(n--) {
   b5748:	42af      	cmp	r7, r5
        wire->endTransmission();
   b574a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b574c:	d017      	beq.n	b577e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b574e:	2e1f      	cmp	r6, #31
   b5750:	d90c      	bls.n	b576c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b5752:	f001 fc2e 	bl	b6fb2 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5756:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b575a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b575c:	f001 fc22 	bl	b6fa4 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5760:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5762:	6803      	ldr	r3, [r0, #0]
   b5764:	2100      	movs	r1, #0
   b5766:	689b      	ldr	r3, [r3, #8]
   b5768:	4798      	blx	r3
        bytesOut = 1;
   b576a:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b576c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b576e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5772:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5774:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5776:	689b      	ldr	r3, [r3, #8]
   b5778:	4798      	blx	r3
      bytesOut++;
   b577a:	b2f6      	uxtb	r6, r6
    while(n--) {
   b577c:	e7e4      	b.n	b5748 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b577e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b5782:	f001 bc16 	b.w	b6fb2 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5786:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b578a:	4601      	mov	r1, r0
   b578c:	b298      	uxth	r0, r3
   b578e:	f002 fc8e 	bl	b80ae <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5792:	42bd      	cmp	r5, r7
   b5794:	d022      	beq.n	b57dc <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b5796:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5798:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b579c:	b118      	cbz	r0, b57a6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b579e:	4649      	mov	r1, r9
   b57a0:	f001 fea4 	bl	b74ec <_ZN8SPIClass8transferEh>
   b57a4:	e7f5      	b.n	b5792 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b57a6:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b57a8:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b57ac:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b57b0:	ea09 0108 	and.w	r1, r9, r8
   b57b4:	b280      	uxth	r0, r0
   b57b6:	f002 fc7a 	bl	b80ae <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b57ba:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b57be:	2101      	movs	r1, #1
   b57c0:	b280      	uxth	r0, r0
   b57c2:	f002 fc74 	bl	b80ae <digitalWrite>
      digitalWrite(clkPin , LOW);
   b57c6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b57ca:	2100      	movs	r1, #0
   b57cc:	b280      	uxth	r0, r0
   b57ce:	f002 fc6e 	bl	b80ae <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b57d2:	3e01      	subs	r6, #1
   b57d4:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b57d8:	d1e8      	bne.n	b57ac <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b57da:	e7da      	b.n	b5792 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b57dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b57e0 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b57e0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b57e4:	1dda      	adds	r2, r3, #7
   b57e6:	bf48      	it	mi
   b57e8:	f103 020e 	addmi.w	r2, r3, #14
   b57ec:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b57f0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b57f2:	10d2      	asrs	r2, r2, #3
   b57f4:	435a      	muls	r2, r3
   b57f6:	2100      	movs	r1, #0
   b57f8:	f002 be6e 	b.w	b84d8 <memset>

000b57fc <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b57fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5800:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5802:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b5804:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b5808:	4604      	mov	r4, r0
   b580a:	460f      	mov	r7, r1
   b580c:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b580e:	b1c3      	cbz	r3, b5842 <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b5810:	4620      	mov	r0, r4
   b5812:	f7ff ffe5 	bl	b57e0 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b5816:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b581a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b581e:	2820      	cmp	r0, #32
   b5820:	dc21      	bgt.n	b5866 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5822:	2320      	movs	r3, #32
   b5824:	2201      	movs	r2, #1
   b5826:	3820      	subs	r0, #32
   b5828:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b582c:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b5830:	2373      	movs	r3, #115	; 0x73
   b5832:	3973      	subs	r1, #115	; 0x73
   b5834:	9300      	str	r3, [sp, #0]
   b5836:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b583a:	4b89      	ldr	r3, [pc, #548]	; (b5a60 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b583c:	f340 024f 	sbfx	r2, r0, #1, #16
   b5840:	e021      	b.n	b5886 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5842:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5846:	1dd8      	adds	r0, r3, #7
   b5848:	bf48      	it	mi
   b584a:	f103 000e 	addmi.w	r0, r3, #14
   b584e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b5852:	10c0      	asrs	r0, r0, #3
   b5854:	4358      	muls	r0, r3
   b5856:	f001 facf 	bl	b6df8 <malloc>
   b585a:	62e0      	str	r0, [r4, #44]	; 0x2c
   b585c:	2800      	cmp	r0, #0
   b585e:	d1d7      	bne.n	b5810 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b5860:	b004      	add	sp, #16
   b5862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b5866:	3840      	subs	r0, #64	; 0x40
   b5868:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b586c:	fa02 f280 	sxtah	r2, r2, r0
   b5870:	2340      	movs	r3, #64	; 0x40
   b5872:	2001      	movs	r0, #1
   b5874:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b5878:	2352      	movs	r3, #82	; 0x52
   b587a:	3952      	subs	r1, #82	; 0x52
   b587c:	9300      	str	r3, [sp, #0]
   b587e:	4b79      	ldr	r3, [pc, #484]	; (b5a64 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b5880:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5884:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5886:	4620      	mov	r0, r4
   b5888:	f341 014f 	sbfx	r1, r1, #1, #16
   b588c:	f7ff fbac 	bl	b4fe8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b5890:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b5892:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b5896:	2800      	cmp	r0, #0
   b5898:	d078      	beq.n	b598c <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b589a:	2d00      	cmp	r5, #0
   b589c:	d174      	bne.n	b5988 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b589e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b58a2:	2b20      	cmp	r3, #32
   b58a4:	bf0c      	ite	eq
   b58a6:	253c      	moveq	r5, #60	; 0x3c
   b58a8:	253d      	movne	r5, #61	; 0x3d
   b58aa:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b58ae:	f1b8 0f00 	cmp.w	r8, #0
   b58b2:	d001      	beq.n	b58b8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b58b4:	f001 fb6c 	bl	b6f90 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b58b8:	b1fe      	cbz	r6, b58fa <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b58ba:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b58be:	2800      	cmp	r0, #0
   b58c0:	db1b      	blt.n	b58fa <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b58c2:	2101      	movs	r1, #1
   b58c4:	b280      	uxth	r0, r0
   b58c6:	f002 fbe1 	bl	b808c <pinMode>
    digitalWrite(rstPin, HIGH);
   b58ca:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b58ce:	2101      	movs	r1, #1
   b58d0:	b280      	uxth	r0, r0
   b58d2:	f002 fbec 	bl	b80ae <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b58d6:	2001      	movs	r0, #1
   b58d8:	f001 face 	bl	b6e78 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b58dc:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b58e0:	2100      	movs	r1, #0
   b58e2:	b280      	uxth	r0, r0
   b58e4:	f002 fbe3 	bl	b80ae <digitalWrite>
    delay(10);                  // Wait 10 ms
   b58e8:	200a      	movs	r0, #10
   b58ea:	f001 fac5 	bl	b6e78 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b58ee:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b58f2:	2101      	movs	r1, #1
   b58f4:	b280      	uxth	r0, r0
   b58f6:	f002 fbda 	bl	b80ae <digitalWrite>
  TRANSACTION_START
   b58fa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b58fc:	2800      	cmp	r0, #0
   b58fe:	d074      	beq.n	b59ea <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b5900:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5902:	f001 fb41 	bl	b6f88 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b5906:	2204      	movs	r2, #4
   b5908:	4957      	ldr	r1, [pc, #348]	; (b5a68 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b590a:	4620      	mov	r0, r4
   b590c:	f7ff ff0b 	bl	b5726 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b5910:	8961      	ldrh	r1, [r4, #10]
   b5912:	3901      	subs	r1, #1
   b5914:	b2c9      	uxtb	r1, r1
   b5916:	4620      	mov	r0, r4
   b5918:	f7ff fe96 	bl	b5648 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b591c:	4953      	ldr	r1, [pc, #332]	; (b5a6c <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b591e:	2204      	movs	r2, #4
   b5920:	4620      	mov	r0, r4
   b5922:	f7ff ff00 	bl	b5726 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b5926:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b592a:	2b01      	cmp	r3, #1
   b592c:	bf0c      	ite	eq
   b592e:	2110      	moveq	r1, #16
   b5930:	2114      	movne	r1, #20
   b5932:	4620      	mov	r0, r4
   b5934:	f7ff fe88 	bl	b5648 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b5938:	2204      	movs	r2, #4
   b593a:	494d      	ldr	r1, [pc, #308]	; (b5a70 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b593c:	4620      	mov	r0, r4
   b593e:	f7ff fef2 	bl	b5726 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b5942:	68a3      	ldr	r3, [r4, #8]
   b5944:	4a4b      	ldr	r2, [pc, #300]	; (b5a74 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b5946:	4293      	cmp	r3, r2
   b5948:	d15c      	bne.n	b5a04 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b594a:	494b      	ldr	r1, [pc, #300]	; (b5a78 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b594c:	2204      	movs	r2, #4
   b594e:	4620      	mov	r0, r4
   b5950:	f7ff fee9 	bl	b5726 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b5954:	21d9      	movs	r1, #217	; 0xd9
   b5956:	4620      	mov	r0, r4
   b5958:	f7ff fe76 	bl	b5648 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b595c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5960:	2b01      	cmp	r3, #1
   b5962:	bf0c      	ite	eq
   b5964:	2122      	moveq	r1, #34	; 0x22
   b5966:	21f1      	movne	r1, #241	; 0xf1
   b5968:	4620      	mov	r0, r4
   b596a:	f7ff fe6d 	bl	b5648 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b596e:	4620      	mov	r0, r4
   b5970:	4942      	ldr	r1, [pc, #264]	; (b5a7c <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b5972:	2206      	movs	r2, #6
   b5974:	f7ff fed7 	bl	b5726 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b5978:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b597a:	2800      	cmp	r0, #0
   b597c:	d063      	beq.n	b5a46 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b597e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b5980:	f001 fb02 	bl	b6f88 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b5984:	2001      	movs	r0, #1
   b5986:	e76b      	b.n	b5860 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5988:	b26d      	sxtb	r5, r5
   b598a:	e78e      	b.n	b58aa <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b598c:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5990:	2101      	movs	r1, #1
   b5992:	b280      	uxth	r0, r0
   b5994:	f002 fb7a 	bl	b808c <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b5998:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b599c:	2101      	movs	r1, #1
   b599e:	b280      	uxth	r0, r0
   b59a0:	f002 fb74 	bl	b808c <pinMode>
    SSD1306_DESELECT
   b59a4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b59a8:	2101      	movs	r1, #1
   b59aa:	b280      	uxth	r0, r0
   b59ac:	f002 fb7f 	bl	b80ae <digitalWrite>
    if(spi) { // Hardware SPI
   b59b0:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b59b2:	b13d      	cbz	r5, b59c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b59b4:	f1b8 0f00 	cmp.w	r8, #0
   b59b8:	f43f af7e 	beq.w	b58b8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b59bc:	4628      	mov	r0, r5
   b59be:	f001 fcf9 	bl	b73b4 <_ZN8SPIClass5beginEv>
   b59c2:	e779      	b.n	b58b8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b59c4:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b59c8:	2101      	movs	r1, #1
   b59ca:	b280      	uxth	r0, r0
   b59cc:	f002 fb5e 	bl	b808c <pinMode>
      pinMode(clkPin , OUTPUT);
   b59d0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b59d4:	2101      	movs	r1, #1
   b59d6:	b280      	uxth	r0, r0
   b59d8:	f002 fb58 	bl	b808c <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b59dc:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b59e0:	4629      	mov	r1, r5
   b59e2:	b280      	uxth	r0, r0
   b59e4:	f002 fb63 	bl	b80ae <digitalWrite>
   b59e8:	e766      	b.n	b58b8 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b59ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b59ec:	b118      	cbz	r0, b59f6 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b59ee:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b59f2:	f001 fd0d 	bl	b7410 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b59f6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b59fa:	2100      	movs	r1, #0
   b59fc:	b280      	uxth	r0, r0
   b59fe:	f002 fb56 	bl	b80ae <digitalWrite>
   b5a02:	e780      	b.n	b5906 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b5a04:	4a1e      	ldr	r2, [pc, #120]	; (b5a80 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b5a06:	4293      	cmp	r3, r2
   b5a08:	d10e      	bne.n	b5a28 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b5a0a:	491e      	ldr	r1, [pc, #120]	; (b5a84 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b5a0c:	2203      	movs	r2, #3
   b5a0e:	4620      	mov	r0, r4
   b5a10:	f7ff fe89 	bl	b5726 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b5a14:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5a18:	2b01      	cmp	r3, #1
   b5a1a:	bf0c      	ite	eq
   b5a1c:	219f      	moveq	r1, #159	; 0x9f
   b5a1e:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5a20:	4620      	mov	r0, r4
   b5a22:	f7ff fe11 	bl	b5648 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b5a26:	e795      	b.n	b5954 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b5a28:	4a17      	ldr	r2, [pc, #92]	; (b5a88 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b5a2a:	4293      	cmp	r3, r2
   b5a2c:	d192      	bne.n	b5954 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b5a2e:	4917      	ldr	r1, [pc, #92]	; (b5a8c <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b5a30:	2203      	movs	r2, #3
   b5a32:	4620      	mov	r0, r4
   b5a34:	f7ff fe77 	bl	b5726 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5a38:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5a3c:	2b01      	cmp	r3, #1
   b5a3e:	bf0c      	ite	eq
   b5a40:	2110      	moveq	r1, #16
   b5a42:	21af      	movne	r1, #175	; 0xaf
   b5a44:	e7ec      	b.n	b5a20 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b5a46:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5a4a:	2101      	movs	r1, #1
   b5a4c:	b280      	uxth	r0, r0
   b5a4e:	f002 fb2e 	bl	b80ae <digitalWrite>
   b5a52:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5a54:	2800      	cmp	r0, #0
   b5a56:	d095      	beq.n	b5984 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5a58:	f001 fcc0 	bl	b73dc <_ZN8SPIClass14endTransactionEv>
   b5a5c:	e792      	b.n	b5984 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5a5e:	bf00      	nop
   b5a60:	000b90dc 	.word	0x000b90dc
   b5a64:	000b8e1c 	.word	0x000b8e1c
   b5a68:	000b9324 	.word	0x000b9324
   b5a6c:	000b9328 	.word	0x000b9328
   b5a70:	000b932c 	.word	0x000b932c
   b5a74:	00200080 	.word	0x00200080
   b5a78:	000b9336 	.word	0x000b9336
   b5a7c:	000b9330 	.word	0x000b9330
   b5a80:	00400080 	.word	0x00400080
   b5a84:	000b933a 	.word	0x000b933a
   b5a88:	00100060 	.word	0x00100060
   b5a8c:	000b933d 	.word	0x000b933d

000b5a90 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5a90:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5a92:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5a94:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5a98:	db3d      	blt.n	b5b16 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5a9a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5a9e:	4294      	cmp	r4, r2
   b5aa0:	dd39      	ble.n	b5b16 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b5aa2:	2900      	cmp	r1, #0
      w += x;
   b5aa4:	bfbe      	ittt	lt
   b5aa6:	185b      	addlt	r3, r3, r1
   b5aa8:	b21b      	sxthlt	r3, r3
      x  = 0;
   b5aaa:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b5aac:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b5ab0:	18ce      	adds	r6, r1, r3
   b5ab2:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b5ab4:	bfc4      	itt	gt
   b5ab6:	1a63      	subgt	r3, r4, r1
   b5ab8:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b5aba:	2b00      	cmp	r3, #0
   b5abc:	dd2b      	ble.n	b5b16 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b5abe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5ac0:	10d6      	asrs	r6, r2, #3
   b5ac2:	fb14 1106 	smlabb	r1, r4, r6, r1
   b5ac6:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b5ac8:	f002 0007 	and.w	r0, r2, #7
   b5acc:	2201      	movs	r2, #1
   b5ace:	4082      	lsls	r2, r0
      switch(color) {
   b5ad0:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b5ad2:	b2d2      	uxtb	r2, r2
      switch(color) {
   b5ad4:	d016      	beq.n	b5b04 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b5ad6:	2d02      	cmp	r5, #2
   b5ad8:	d00b      	beq.n	b5af2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b5ada:	b9e5      	cbnz	r5, b5b16 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b5adc:	43d2      	mvns	r2, r2
   b5ade:	b2d2      	uxtb	r2, r2
   b5ae0:	440b      	add	r3, r1
   b5ae2:	4299      	cmp	r1, r3
   b5ae4:	d017      	beq.n	b5b16 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5ae6:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5aea:	4010      	ands	r0, r2
   b5aec:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5af0:	e7f7      	b.n	b5ae2 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b5af2:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b5af4:	4299      	cmp	r1, r3
   b5af6:	d00e      	beq.n	b5b16 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5af8:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5afc:	4050      	eors	r0, r2
   b5afe:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5b02:	e7f7      	b.n	b5af4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b5b04:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b5b06:	4299      	cmp	r1, r3
   b5b08:	d005      	beq.n	b5b16 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5b0a:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5b0e:	4310      	orrs	r0, r2
   b5b10:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5b14:	e7f7      	b.n	b5b06 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b5b16:	bd70      	pop	{r4, r5, r6, pc}

000b5b18 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5b18:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5b1a:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5b1c:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5b20:	db76      	blt.n	b5c10 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b5b22:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b5b26:	42b1      	cmp	r1, r6
   b5b28:	da72      	bge.n	b5c10 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b5b2a:	2a00      	cmp	r2, #0
      __h += __y;
   b5b2c:	bfbe      	ittt	lt
   b5b2e:	189b      	addlt	r3, r3, r2
   b5b30:	b21b      	sxthlt	r3, r3
      __y = 0;
   b5b32:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b5b34:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5b38:	18d7      	adds	r7, r2, r3
   b5b3a:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b5b3c:	bfc4      	itt	gt
   b5b3e:	1aa3      	subgt	r3, r4, r2
   b5b40:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b5b42:	2b00      	cmp	r3, #0
   b5b44:	dd64      	ble.n	b5c10 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5b46:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b5b4a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b5b4c:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b5b50:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b5b54:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5b56:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b5b5a:	d023      	beq.n	b5ba4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b5b5c:	f1c2 0208 	rsb	r2, r2, #8
   b5b60:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5b62:	492d      	ldr	r1, [pc, #180]	; (b5c18 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5b64:	4293      	cmp	r3, r2
   b5b66:	bf3c      	itt	cc
   b5b68:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b5b6c:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5b70:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5b72:	bf3c      	itt	cc
   b5b74:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b5b78:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b5b7c:	2d01      	cmp	r5, #1
   b5b7e:	d007      	beq.n	b5b90 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b5b80:	2d02      	cmp	r5, #2
   b5b82:	d02e      	beq.n	b5be2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b5b84:	b94d      	cbnz	r5, b5b9a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b5b86:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5b8a:	ea2c 0101 	bic.w	r1, ip, r1
   b5b8e:	e003      	b.n	b5b98 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b5b90:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5b94:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b5b98:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b5b9a:	4293      	cmp	r3, r2
   b5b9c:	d338      	bcc.n	b5c10 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b5b9e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b5ba2:	440c      	add	r4, r1
        h -= mod;
   b5ba4:	1a9a      	subs	r2, r3, r2
   b5ba6:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b5ba8:	2a07      	cmp	r2, #7
   b5baa:	d90e      	bls.n	b5bca <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b5bac:	2d02      	cmp	r5, #2
   b5bae:	d11d      	bne.n	b5bec <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b5bb0:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b5bb2:	7821      	ldrb	r1, [r4, #0]
   b5bb4:	43c9      	mvns	r1, r1
   b5bb6:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b5bb8:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b5bba:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b5bbe:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b5bc0:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b5bc2:	440c      	add	r4, r1
            } while(h >= 8);
   b5bc4:	d8f5      	bhi.n	b5bb2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b5bc6:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b5bca:	b30a      	cbz	r2, b5c10 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5bcc:	4b13      	ldr	r3, [pc, #76]	; (b5c1c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b5bce:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5bd0:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b5bd2:	d01a      	beq.n	b5c0a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b5bd4:	2d02      	cmp	r5, #2
   b5bd6:	d01c      	beq.n	b5c12 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b5bd8:	b9d5      	cbnz	r5, b5c10 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b5bda:	7822      	ldrb	r2, [r4, #0]
   b5bdc:	ea22 0303 	bic.w	r3, r2, r3
   b5be0:	e015      	b.n	b5c0e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b5be2:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5be6:	ea81 010c 	eor.w	r1, r1, ip
   b5bea:	e7d5      	b.n	b5b98 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b5bec:	1e29      	subs	r1, r5, #0
   b5bee:	bf18      	it	ne
   b5bf0:	2101      	movne	r1, #1
   b5bf2:	4249      	negs	r1, r1
   b5bf4:	b2c9      	uxtb	r1, r1
   b5bf6:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b5bf8:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b5bfa:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b5bfc:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b5c00:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b5c02:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b5c04:	4434      	add	r4, r6
            } while(h >= 8);
   b5c06:	d8f7      	bhi.n	b5bf8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b5c08:	e7dd      	b.n	b5bc6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b5c0a:	7822      	ldrb	r2, [r4, #0]
   b5c0c:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b5c0e:	7023      	strb	r3, [r4, #0]
}
   b5c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b5c12:	7822      	ldrb	r2, [r4, #0]
   b5c14:	4053      	eors	r3, r2
   b5c16:	e7fa      	b.n	b5c0e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b5c18:	000b9314 	.word	0x000b9314
   b5c1c:	000b931c 	.word	0x000b931c

000b5c20 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5c20:	b470      	push	{r4, r5, r6}
   b5c22:	4614      	mov	r4, r2
  switch(rotation) {
   b5c24:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5c26:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b5c2a:	2a02      	cmp	r2, #2
   b5c2c:	d00d      	beq.n	b5c4a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b5c2e:	2a03      	cmp	r2, #3
   b5c30:	d018      	beq.n	b5c64 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b5c32:	2a01      	cmp	r2, #1
   b5c34:	d111      	bne.n	b5c5a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b5c36:	8902      	ldrh	r2, [r0, #8]
   b5c38:	43e4      	mvns	r4, r4
   b5c3a:	4414      	add	r4, r2
   b5c3c:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b5c3e:	9603      	str	r6, [sp, #12]
   b5c40:	460a      	mov	r2, r1
   b5c42:	4621      	mov	r1, r4
}
   b5c44:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b5c46:	f7ff bf67 	b.w	b5b18 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b5c4a:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b5c4c:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b5c4e:	43e4      	mvns	r4, r4
    x -= (w-1);
   b5c50:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b5c52:	4414      	add	r4, r2
    x -= (w-1);
   b5c54:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b5c56:	b224      	sxth	r4, r4
    x -= (w-1);
   b5c58:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b5c5a:	9603      	str	r6, [sp, #12]
   b5c5c:	4622      	mov	r2, r4
}
   b5c5e:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b5c60:	f7ff bf16 	b.w	b5a90 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b5c64:	8945      	ldrh	r5, [r0, #10]
   b5c66:	4419      	add	r1, r3
   b5c68:	1a69      	subs	r1, r5, r1
   b5c6a:	b209      	sxth	r1, r1
    break;
   b5c6c:	e7e7      	b.n	b5c3e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b5c6e <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5c6e:	b430      	push	{r4, r5}
   b5c70:	4614      	mov	r4, r2
  switch(rotation) {
   b5c72:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5c74:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b5c78:	2a02      	cmp	r2, #2
   b5c7a:	d00d      	beq.n	b5c98 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b5c7c:	2a03      	cmp	r2, #3
   b5c7e:	d018      	beq.n	b5cb2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b5c80:	2a01      	cmp	r2, #1
   b5c82:	d111      	bne.n	b5ca8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b5c84:	18e2      	adds	r2, r4, r3
   b5c86:	8904      	ldrh	r4, [r0, #8]
   b5c88:	1aa4      	subs	r4, r4, r2
   b5c8a:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5c8c:	9502      	str	r5, [sp, #8]
   b5c8e:	460a      	mov	r2, r1
   b5c90:	4621      	mov	r1, r4
}
   b5c92:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5c94:	f7ff befc 	b.w	b5a90 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b5c98:	8902      	ldrh	r2, [r0, #8]
   b5c9a:	43c9      	mvns	r1, r1
   b5c9c:	4411      	add	r1, r2
    y -= (h-1);
   b5c9e:	18e2      	adds	r2, r4, r3
   b5ca0:	8944      	ldrh	r4, [r0, #10]
   b5ca2:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b5ca4:	b209      	sxth	r1, r1
    y -= (h-1);
   b5ca6:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b5ca8:	9502      	str	r5, [sp, #8]
   b5caa:	4622      	mov	r2, r4
}
   b5cac:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b5cae:	f7ff bf33 	b.w	b5b18 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b5cb2:	8942      	ldrh	r2, [r0, #10]
   b5cb4:	43c9      	mvns	r1, r1
   b5cb6:	4411      	add	r1, r2
   b5cb8:	b209      	sxth	r1, r1
    break;
   b5cba:	e7e7      	b.n	b5c8c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b5cbc <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b5cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5cc0:	4604      	mov	r4, r0
  TRANSACTION_START
   b5cc2:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b5cc4:	2800      	cmp	r0, #0
   b5cc6:	d042      	beq.n	b5d4e <_ZN16Adafruit_SSD13067displayEv+0x92>
   b5cc8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5cca:	f001 f95d 	bl	b6f88 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b5cce:	4947      	ldr	r1, [pc, #284]	; (b5dec <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b5cd0:	2205      	movs	r2, #5
   b5cd2:	4620      	mov	r0, r4
   b5cd4:	f7ff fd27 	bl	b5726 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b5cd8:	8921      	ldrh	r1, [r4, #8]
   b5cda:	3901      	subs	r1, #1
   b5cdc:	4620      	mov	r0, r4
   b5cde:	b2c9      	uxtb	r1, r1
   b5ce0:	f7ff fcb2 	bl	b5648 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b5ce4:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5ce8:	1dde      	adds	r6, r3, #7
   b5cea:	bf48      	it	mi
   b5cec:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b5cf0:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b5cf4:	8923      	ldrh	r3, [r4, #8]
   b5cf6:	10f6      	asrs	r6, r6, #3
   b5cf8:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b5cfc:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b5d00:	2800      	cmp	r0, #0
   b5d02:	d03a      	beq.n	b5d7a <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b5d04:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5d08:	f001 f94c 	bl	b6fa4 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b5d0c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5d0e:	6803      	ldr	r3, [r0, #0]
   b5d10:	2140      	movs	r1, #64	; 0x40
   b5d12:	689b      	ldr	r3, [r3, #8]
   b5d14:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5d16:	2701      	movs	r7, #1
    while(count--) {
   b5d18:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b5d1a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b5d1c:	d024      	beq.n	b5d68 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b5d1e:	2f1f      	cmp	r7, #31
   b5d20:	d90c      	bls.n	b5d3c <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b5d22:	f001 f946 	bl	b6fb2 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5d26:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5d2a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5d2c:	f001 f93a 	bl	b6fa4 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b5d30:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5d32:	6803      	ldr	r3, [r0, #0]
   b5d34:	2140      	movs	r1, #64	; 0x40
   b5d36:	689b      	ldr	r3, [r3, #8]
   b5d38:	4798      	blx	r3
        bytesOut = 1;
   b5d3a:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b5d3c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5d3e:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5d42:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5d44:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b5d46:	689b      	ldr	r3, [r3, #8]
   b5d48:	4798      	blx	r3
      bytesOut++;
   b5d4a:	b2ff      	uxtb	r7, r7
    while(count--) {
   b5d4c:	e7e4      	b.n	b5d18 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b5d4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5d50:	b118      	cbz	r0, b5d5a <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b5d52:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5d56:	f001 fb5b 	bl	b7410 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5d5a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5d5e:	2100      	movs	r1, #0
   b5d60:	b280      	uxth	r0, r0
   b5d62:	f002 f9a4 	bl	b80ae <digitalWrite>
   b5d66:	e7b2      	b.n	b5cce <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b5d68:	f001 f923 	bl	b6fb2 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b5d6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5d6e:	b378      	cbz	r0, b5dd0 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b5d70:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b5d72:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5d76:	f001 b907 	b.w	b6f88 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b5d7a:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5d7e:	2101      	movs	r1, #1
   b5d80:	b280      	uxth	r0, r0
   b5d82:	f002 f994 	bl	b80ae <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b5d86:	42ae      	cmp	r6, r5
   b5d88:	d0f0      	beq.n	b5d6c <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b5d8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b5d8c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b5d90:	b118      	cbz	r0, b5d9a <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b5d92:	4649      	mov	r1, r9
   b5d94:	f001 fbaa 	bl	b74ec <_ZN8SPIClass8transferEh>
   b5d98:	e7f5      	b.n	b5d86 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b5d9a:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5d9c:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5da0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5da4:	ea09 0108 	and.w	r1, r9, r8
   b5da8:	b280      	uxth	r0, r0
   b5daa:	f002 f980 	bl	b80ae <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5dae:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5db2:	2101      	movs	r1, #1
   b5db4:	b280      	uxth	r0, r0
   b5db6:	f002 f97a 	bl	b80ae <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5dba:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5dbe:	2100      	movs	r1, #0
   b5dc0:	b280      	uxth	r0, r0
   b5dc2:	f002 f974 	bl	b80ae <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5dc6:	3f01      	subs	r7, #1
   b5dc8:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b5dcc:	d1e8      	bne.n	b5da0 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b5dce:	e7da      	b.n	b5d86 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b5dd0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5dd4:	2101      	movs	r1, #1
   b5dd6:	b280      	uxth	r0, r0
   b5dd8:	f002 f969 	bl	b80ae <digitalWrite>
   b5ddc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5dde:	b118      	cbz	r0, b5de8 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b5de0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b5de4:	f001 bafa 	b.w	b73dc <_ZN8SPIClass14endTransactionEv>
}
   b5de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b5dec:	000b9340 	.word	0x000b9340

000b5df0 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b5df0:	2100      	movs	r1, #0
   b5df2:	220a      	movs	r2, #10
   b5df4:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b5df8:	4770      	bx	lr

000b5dfa <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b5dfa:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b5dfc:	b510      	push	{r4, lr}
   b5dfe:	4604      	mov	r4, r0
    this->pin = pin;
   b5e00:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b5e02:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b5e04:	b288      	uxth	r0, r1
   b5e06:	f002 f96b 	bl	b80e0 <digitalRead>
   b5e0a:	b108      	cbz	r0, b5e10 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b5e0c:	2303      	movs	r3, #3
   b5e0e:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5e10:	f000 fd86 	bl	b6920 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b5e14:	6020      	str	r0, [r4, #0]
#endif
}
   b5e16:	bd10      	pop	{r4, pc}

000b5e18 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b5e18:	b538      	push	{r3, r4, r5, lr}
   b5e1a:	460c      	mov	r4, r1
   b5e1c:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b5e1e:	4611      	mov	r1, r2
   b5e20:	b2a0      	uxth	r0, r4
   b5e22:	f002 f933 	bl	b808c <pinMode>
  
  this->attach(pin);
   b5e26:	4621      	mov	r1, r4
   b5e28:	4628      	mov	r0, r5
}
   b5e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b5e2e:	f7ff bfe4 	b.w	b5dfa <_ZN8Debounce6attachEi>

000b5e32 <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b5e32:	b538      	push	{r3, r4, r5, lr}
   b5e34:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b5e36:	79c0      	ldrb	r0, [r0, #7]
   b5e38:	f002 f952 	bl	b80e0 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b5e3c:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b5e3e:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b5e40:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b5e44:	bf18      	it	ne
   b5e46:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b5e48:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b5e4c:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b5e4e:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b5e50:	d00a      	beq.n	b5e68 <_ZN8Debounce6updateEv+0x36>
   b5e52:	f000 fd65 	bl	b6920 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b5e56:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b5e58:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b5e5a:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b5e5e:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b5e60:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b5e62:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b5e66:	bd38      	pop	{r3, r4, r5, pc}
   b5e68:	f000 fd5a 	bl	b6920 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b5e6c:	6823      	ldr	r3, [r4, #0]
   b5e6e:	1ac0      	subs	r0, r0, r3
   b5e70:	88a3      	ldrh	r3, [r4, #4]
   b5e72:	4298      	cmp	r0, r3
   b5e74:	d3f4      	bcc.n	b5e60 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b5e76:	79a3      	ldrb	r3, [r4, #6]
   b5e78:	f003 0301 	and.w	r3, r3, #1
   b5e7c:	42ab      	cmp	r3, r5
   b5e7e:	d0ef      	beq.n	b5e60 <_ZN8Debounce6updateEv+0x2e>
   b5e80:	f000 fd4e 	bl	b6920 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b5e84:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b5e86:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b5e88:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b5e8c:	f043 0308 	orr.w	r3, r3, #8
   b5e90:	e7e5      	b.n	b5e5e <_ZN8Debounce6updateEv+0x2c>

000b5e92 <_ZN8Debounce4fellEv>:
    return ( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
}

bool Debounce::fell()
{
    return !( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
   b5e92:	7980      	ldrb	r0, [r0, #6]
   b5e94:	f000 0009 	and.w	r0, r0, #9
   b5e98:	f1a0 0308 	sub.w	r3, r0, #8
   b5e9c:	4258      	negs	r0, r3
   b5e9e:	4158      	adcs	r0, r3
   b5ea0:	4770      	bx	lr

000b5ea2 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b5ea2:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b5ea6:	b510      	push	{r4, lr}
   b5ea8:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b5eaa:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b5eac:	b113      	cbz	r3, b5eb4 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b5eae:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b5eb0:	f000 fd0e 	bl	b68d0 <os_mutex_lock>
#endif
#endif
#endif
        }
   b5eb4:	4620      	mov	r0, r4
   b5eb6:	bd10      	pop	{r4, pc}

000b5eb8 <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b5eb8:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b5eba:	6803      	ldr	r3, [r0, #0]
   b5ebc:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b5ec0:	4604      	mov	r4, r0
            if (mqtt->thread)
   b5ec2:	b112      	cbz	r2, b5eca <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b5ec4:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b5ec6:	f000 fd0b 	bl	b68e0 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b5eca:	4620      	mov	r0, r4
   b5ecc:	bd10      	pop	{r4, pc}

000b5ece <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b5ece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5ed0:	461f      	mov	r7, r3
   b5ed2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b5ed6:	4604      	mov	r4, r0
   b5ed8:	460d      	mov	r5, r1
   b5eda:	4616      	mov	r6, r2
    if (thread) {
   b5edc:	b12b      	cbz	r3, b5eea <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b5ede:	2301      	movs	r3, #1
   b5ee0:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b5ee4:	3058      	adds	r0, #88	; 0x58
   b5ee6:	f000 fce3 	bl	b68b0 <os_mutex_create>
    }
    this->callback = callback;
   b5eea:	9b08      	ldr	r3, [sp, #32]
   b5eec:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b5eee:	2300      	movs	r3, #0
   b5ef0:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b5ef2:	b106      	cbz	r6, b5ef6 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b5ef4:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b5ef6:	b125      	cbz	r5, b5f02 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b5ef8:	4629      	mov	r1, r5
   b5efa:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b5efe:	f001 fb84 	bl	b760a <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b5f02:	9b06      	ldr	r3, [sp, #24]
   b5f04:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b5f06:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b5f08:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b5f0a:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b5f0e:	2bff      	cmp	r3, #255	; 0xff
   b5f10:	bfb8      	it	lt
   b5f12:	23ff      	movlt	r3, #255	; 0xff
   b5f14:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b5f18:	b108      	cbz	r0, b5f1e <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b5f1a:	f7fe f8be 	bl	b409a <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b5f1e:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b5f22:	f7fe f8b8 	bl	b4096 <_Znaj>
   b5f26:	61e0      	str	r0, [r4, #28]
}
   b5f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000b5f2c <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b5f2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5f30:	4604      	mov	r4, r0
            bool thread) {
   b5f32:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b5f34:	4617      	mov	r7, r2
   b5f36:	4698      	mov	r8, r3
   b5f38:	460e      	mov	r6, r1
            bool thread) {
   b5f3a:	f001 fe9b 	bl	b7c74 <_ZN9TCPClientC1Ev>
   b5f3e:	490d      	ldr	r1, [pc, #52]	; (b5f74 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b5f40:	61e5      	str	r5, [r4, #28]
   b5f42:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b5f46:	f001 fb4c 	bl	b75e2 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b5f4a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b5f4e:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b5f50:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b5f54:	22ff      	movs	r2, #255	; 0xff
   b5f56:	230f      	movs	r3, #15
   b5f58:	e9cd 3200 	strd	r3, r2, [sp]
   b5f5c:	4620      	mov	r0, r4
            bool thread) {
   b5f5e:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b5f62:	463b      	mov	r3, r7
   b5f64:	462a      	mov	r2, r5
   b5f66:	4631      	mov	r1, r6
   b5f68:	f7ff ffb1 	bl	b5ece <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b5f6c:	4620      	mov	r0, r4
   b5f6e:	b004      	add	sp, #16
   b5f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5f74:	000b8dcc 	.word	0x000b8dcc

000b5f78 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b5f78:	b510      	push	{r4, lr}
   b5f7a:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b5f7c:	4620      	mov	r0, r4
   b5f7e:	f001 fdd5 	bl	b7b2c <_ZN9TCPClient9availableEv>
   b5f82:	2800      	cmp	r0, #0
   b5f84:	d0fa      	beq.n	b5f7c <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b5f86:	4620      	mov	r0, r4
   b5f88:	f001 fbba 	bl	b7700 <_ZN9TCPClient4readEv>
}
   b5f8c:	b2c0      	uxtb	r0, r0
   b5f8e:	bd10      	pop	{r4, pc}

000b5f90 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b5f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5f94:	4605      	mov	r5, r0
   b5f96:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b5f98:	f7ff ffee 	bl	b5f78 <_ZN4MQTT8readByteEv>
   b5f9c:	69eb      	ldr	r3, [r5, #28]
   b5f9e:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b5fa0:	69eb      	ldr	r3, [r5, #28]
   b5fa2:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b5fa6:	f04f 0901 	mov.w	r9, #1
   b5faa:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b5fae:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b5fb0:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b5fb2:	4628      	mov	r0, r5
   b5fb4:	f7ff ffe0 	bl	b5f78 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b5fb8:	4626      	mov	r6, r4
   b5fba:	69eb      	ldr	r3, [r5, #28]
   b5fbc:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b5fbe:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b5fc2:	fb13 f309 	smulbb	r3, r3, r9
   b5fc6:	441f      	add	r7, r3
        buffer[len++] = digit;
   b5fc8:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b5fca:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b5fcc:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b5fce:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b5fd0:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b5fd4:	d4ed      	bmi.n	b5fb2 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b5fd6:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b5fd8:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b5fdc:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b5fe0:	d11e      	bne.n	b6020 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b5fe2:	4628      	mov	r0, r5
   b5fe4:	f7ff ffc8 	bl	b5f78 <_ZN4MQTT8readByteEv>
   b5fe8:	69eb      	ldr	r3, [r5, #28]
   b5fea:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b5fec:	4628      	mov	r0, r5
   b5fee:	f7ff ffc3 	bl	b5f78 <_ZN4MQTT8readByteEv>
   b5ff2:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b5ff4:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b5ff6:	b2b6      	uxth	r6, r6
   b5ff8:	69eb      	ldr	r3, [r5, #28]
   b5ffa:	b2a4      	uxth	r4, r4
   b5ffc:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b5ffe:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b6000:	b2b6      	uxth	r6, r6
   b6002:	42be      	cmp	r6, r7
   b6004:	d20e      	bcs.n	b6024 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b6006:	4628      	mov	r0, r5
   b6008:	f7ff ffb6 	bl	b5f78 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b600c:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b6010:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b6012:	bf84      	itt	hi
   b6014:	69eb      	ldrhi	r3, [r5, #28]
   b6016:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b6018:	3401      	adds	r4, #1
   b601a:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b601c:	3601      	adds	r6, #1
   b601e:	e7ef      	b.n	b6000 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b6020:	2600      	movs	r6, #0
   b6022:	e7ed      	b.n	b6000 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b6024:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b6028:	42a3      	cmp	r3, r4
   b602a:	bf2c      	ite	cs
   b602c:	4620      	movcs	r0, r4
   b602e:	2000      	movcc	r0, #0
   b6030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b6034 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b6034:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b6038:	4615      	mov	r5, r2
   b603a:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b603c:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b603e:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b6040:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b6042:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b6044:	a802      	add	r0, sp, #8
        digit = len % 128;
   b6046:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b604a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b604e:	f103 0401 	add.w	r4, r3, #1
   b6052:	4403      	add	r3, r0
            digit |= 0x80;
   b6054:	bf88      	it	hi
   b6056:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b605a:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b605e:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b6062:	b2e4      	uxtb	r4, r4
   b6064:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b6068:	d81e      	bhi.n	b60a8 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b606a:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b606e:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b6072:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b6074:	4622      	mov	r2, r4
   b6076:	a901      	add	r1, sp, #4
   b6078:	4428      	add	r0, r5
    buf[4-llen] = header;
   b607a:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b607e:	f002 fa1d 	bl	b84bc <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b6082:	1c72      	adds	r2, r6, #1
   b6084:	4422      	add	r2, r4
   b6086:	4641      	mov	r1, r8
   b6088:	4638      	mov	r0, r7
   b608a:	f001 fb24 	bl	b76d6 <_ZN9TCPClient5writeEPKhj>
   b608e:	4605      	mov	r5, r0
   b6090:	f000 fc46 	bl	b6920 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b6094:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b6096:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b6098:	4432      	add	r2, r6
   b609a:	b2a8      	uxth	r0, r5
}
   b609c:	1a13      	subs	r3, r2, r0
   b609e:	4258      	negs	r0, r3
   b60a0:	4158      	adcs	r0, r3
   b60a2:	b002      	add	sp, #8
   b60a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b60a8:	4623      	mov	r3, r4
   b60aa:	e7ca      	b.n	b6042 <_ZN4MQTT5writeEhPht+0xe>

000b60ac <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b60ac:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b60ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   b60b0:	4605      	mov	r5, r0
    pos += 2;
   b60b2:	b298      	uxth	r0, r3
   b60b4:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b60b6:	5cce      	ldrb	r6, [r1, r3]
   b60b8:	b29c      	uxth	r4, r3
   b60ba:	b156      	cbz	r6, b60d2 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b60bc:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b60c0:	4584      	cmp	ip, r0
   b60c2:	f103 0701 	add.w	r7, r3, #1
   b60c6:	d904      	bls.n	b60d2 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b60c8:	1c44      	adds	r4, r0, #1
   b60ca:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b60cc:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b60ce:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b60d0:	e7f1      	b.n	b60b6 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b60d2:	b299      	uxth	r1, r3
   b60d4:	1a41      	subs	r1, r0, r1
   b60d6:	440a      	add	r2, r1
   b60d8:	0a21      	lsrs	r1, r4, #8
   b60da:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b60de:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b60e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b60e4 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b60e4:	b538      	push	{r3, r4, r5, lr}
   b60e6:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b60e8:	f001 fc42 	bl	b7970 <_ZN9TCPClient9connectedEv>
   b60ec:	2800      	cmp	r0, #0
   b60ee:	bf14      	ite	ne
   b60f0:	2501      	movne	r5, #1
   b60f2:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b60f4:	d102      	bne.n	b60fc <_ZN4MQTT11isConnectedEv+0x18>
   b60f6:	4620      	mov	r0, r4
   b60f8:	f001 fd72 	bl	b7be0 <_ZN9TCPClient4stopEv>
    return rc;
}
   b60fc:	4628      	mov	r0, r5
   b60fe:	bd38      	pop	{r3, r4, r5, pc}

000b6100 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b6100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6104:	b088      	sub	sp, #32
   b6106:	4604      	mov	r4, r0
   b6108:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b610c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b6110:	4689      	mov	r9, r1
   b6112:	4617      	mov	r7, r2
   b6114:	461e      	mov	r6, r3
    if (!isConnected()) {
   b6116:	f7ff ffe5 	bl	b60e4 <_ZN4MQTT11isConnectedEv>
   b611a:	4605      	mov	r5, r0
   b611c:	2800      	cmp	r0, #0
   b611e:	f040 80cd 	bne.w	b62bc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b6122:	4621      	mov	r1, r4
   b6124:	a801      	add	r0, sp, #4
   b6126:	f7ff febc 	bl	b5ea2 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b612a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b612c:	2900      	cmp	r1, #0
   b612e:	f040 8088 	bne.w	b6242 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b6132:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b6136:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b6138:	462b      	mov	r3, r5
   b613a:	4620      	mov	r0, r4
   b613c:	f001 fb9a 	bl	b7874 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b6140:	2800      	cmp	r0, #0
   b6142:	d07a      	beq.n	b623a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b6144:	2301      	movs	r3, #1
   b6146:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b6148:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b614c:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b614e:	2b04      	cmp	r3, #4
   b6150:	4b5b      	ldr	r3, [pc, #364]	; (b62c0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b6152:	f040 8081 	bne.w	b6258 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b6156:	6818      	ldr	r0, [r3, #0]
   b6158:	8899      	ldrh	r1, [r3, #4]
   b615a:	799b      	ldrb	r3, [r3, #6]
   b615c:	f8ad 100c 	strh.w	r1, [sp, #12]
   b6160:	f88d 300e 	strb.w	r3, [sp, #14]
   b6164:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b6166:	f8c2 0005 	str.w	r0, [r2, #5]
   b616a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b616e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b6172:	f8a2 1009 	strh.w	r1, [r2, #9]
   b6176:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b6178:	230c      	movs	r3, #12
            if (willTopic) {
   b617a:	f1b8 0f00 	cmp.w	r8, #0
   b617e:	f000 8081 	beq.w	b6284 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b6182:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b6186:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b618a:	0140      	lsls	r0, r0, #5
   b618c:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b6190:	f040 0006 	orr.w	r0, r0, #6
   b6194:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b6196:	f1ba 0f00 	cmp.w	sl, #0
   b619a:	d101      	bne.n	b61a0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b619c:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b61a0:	b11f      	cbz	r7, b61aa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b61a2:	2e00      	cmp	r6, #0
   b61a4:	d170      	bne.n	b6288 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b61a6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b61aa:	69e2      	ldr	r2, [r4, #28]
   b61ac:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b61ae:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b61b0:	69e1      	ldr	r1, [r4, #28]
   b61b2:	1c58      	adds	r0, r3, #1
   b61b4:	1212      	asrs	r2, r2, #8
   b61b6:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b61b8:	1c9a      	adds	r2, r3, #2
   b61ba:	69e1      	ldr	r1, [r4, #28]
   b61bc:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b61be:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b61c0:	3303      	adds	r3, #3
   b61c2:	69e2      	ldr	r2, [r4, #28]
   b61c4:	4649      	mov	r1, r9
   b61c6:	4620      	mov	r0, r4
   b61c8:	f7ff ff70 	bl	b60ac <_ZN4MQTT11writeStringEPKcPht>
   b61cc:	4603      	mov	r3, r0
            if (willTopic) {
   b61ce:	f1b8 0f00 	cmp.w	r8, #0
   b61d2:	d00b      	beq.n	b61ec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b61d4:	69e2      	ldr	r2, [r4, #28]
   b61d6:	4641      	mov	r1, r8
   b61d8:	4620      	mov	r0, r4
   b61da:	f7ff ff67 	bl	b60ac <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b61de:	69e2      	ldr	r2, [r4, #28]
   b61e0:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b61e2:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b61e4:	4620      	mov	r0, r4
   b61e6:	f7ff ff61 	bl	b60ac <_ZN4MQTT11writeStringEPKcPht>
   b61ea:	4603      	mov	r3, r0
            if(user != NULL) {
   b61ec:	b167      	cbz	r7, b6208 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b61ee:	69e2      	ldr	r2, [r4, #28]
   b61f0:	4639      	mov	r1, r7
   b61f2:	4620      	mov	r0, r4
   b61f4:	f7ff ff5a 	bl	b60ac <_ZN4MQTT11writeStringEPKcPht>
   b61f8:	4603      	mov	r3, r0
                if(pass != NULL) {
   b61fa:	b12e      	cbz	r6, b6208 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b61fc:	69e2      	ldr	r2, [r4, #28]
   b61fe:	4631      	mov	r1, r6
   b6200:	4620      	mov	r0, r4
   b6202:	f7ff ff53 	bl	b60ac <_ZN4MQTT11writeStringEPKcPht>
   b6206:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b6208:	3b05      	subs	r3, #5
   b620a:	69e2      	ldr	r2, [r4, #28]
   b620c:	b29b      	uxth	r3, r3
   b620e:	2110      	movs	r1, #16
   b6210:	4620      	mov	r0, r4
   b6212:	f7ff ff0f 	bl	b6034 <_ZN4MQTT5writeEhPht>
   b6216:	f000 fb83 	bl	b6920 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b621a:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b621e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b6222:	4620      	mov	r0, r4
   b6224:	f001 fc82 	bl	b7b2c <_ZN9TCPClient9availableEv>
   b6228:	bb88      	cbnz	r0, b628e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b622a:	f000 fb79 	bl	b6920 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b622e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b6230:	1ac0      	subs	r0, r0, r3
   b6232:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b6234:	4373      	muls	r3, r6
   b6236:	4298      	cmp	r0, r3
   b6238:	d9f3      	bls.n	b6222 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b623a:	4620      	mov	r0, r4
   b623c:	f001 fcd0 	bl	b7be0 <_ZN9TCPClient4stopEv>
   b6240:	e035      	b.n	b62ae <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b6242:	a802      	add	r0, sp, #8
   b6244:	f000 ff42 	bl	b70cc <_ZN9IPAddressC1EPKh>
   b6248:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b624c:	462b      	mov	r3, r5
   b624e:	a902      	add	r1, sp, #8
   b6250:	4620      	mov	r0, r4
   b6252:	f001 fbef 	bl	b7a34 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6256:	e773      	b.n	b6140 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b6258:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b625c:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b6260:	7bdb      	ldrb	r3, [r3, #15]
   b6262:	f10d 0c08 	add.w	ip, sp, #8
   b6266:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b626a:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b626e:	ab02      	add	r3, sp, #8
   b6270:	cb03      	ldmia	r3!, {r0, r1}
   b6272:	f8c2 0005 	str.w	r0, [r2, #5]
   b6276:	f8c2 1009 	str.w	r1, [r2, #9]
   b627a:	f89c 3000 	ldrb.w	r3, [ip]
   b627e:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b6280:	230e      	movs	r3, #14
   b6282:	e77a      	b.n	b617a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b6284:	2002      	movs	r0, #2
   b6286:	e786      	b.n	b6196 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b6288:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b628c:	e78d      	b.n	b61aa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b628e:	a902      	add	r1, sp, #8
   b6290:	4620      	mov	r0, r4
   b6292:	f7ff fe7d 	bl	b5f90 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b6296:	2804      	cmp	r0, #4
   b6298:	d1cf      	bne.n	b623a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b629a:	69e3      	ldr	r3, [r4, #28]
   b629c:	78de      	ldrb	r6, [r3, #3]
   b629e:	2e00      	cmp	r6, #0
   b62a0:	d1cb      	bne.n	b623a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b62a2:	f000 fb3d 	bl	b6920 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b62a6:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b62a8:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b62aa:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b62ae:	a801      	add	r0, sp, #4
   b62b0:	f7ff fe02 	bl	b5eb8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b62b4:	4628      	mov	r0, r5
   b62b6:	b008      	add	sp, #32
   b62b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b62bc:	2500      	movs	r5, #0
   b62be:	e7f9      	b.n	b62b4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b62c0:	000b9345 	.word	0x000b9345

000b62c4 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b62c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b62c6:	2301      	movs	r3, #1
   b62c8:	2204      	movs	r2, #4
   b62ca:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b62ce:	2300      	movs	r3, #0
   b62d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b62d4:	e9cd 3300 	strd	r3, r3, [sp]
   b62d8:	461a      	mov	r2, r3
   b62da:	f7ff ff11 	bl	b6100 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b62de:	b007      	add	sp, #28
   b62e0:	f85d fb04 	ldr.w	pc, [sp], #4

000b62e4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b62e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b62e8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   b62ec:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   b62f0:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   b62f4:	4604      	mov	r4, r0
   b62f6:	468b      	mov	fp, r1
   b62f8:	4616      	mov	r6, r2
   b62fa:	461f      	mov	r7, r3
    if (isConnected()) {
   b62fc:	f7ff fef2 	bl	b60e4 <_ZN4MQTT11isConnectedEv>
   b6300:	4682      	mov	sl, r0
   b6302:	2800      	cmp	r0, #0
   b6304:	d051      	beq.n	b63aa <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   b6306:	4621      	mov	r1, r4
   b6308:	a801      	add	r0, sp, #4
   b630a:	f7ff fdca 	bl	b5ea2 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   b630e:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   b6312:	69e0      	ldr	r0, [r4, #28]
   b6314:	2100      	movs	r1, #0
   b6316:	f002 f8df 	bl	b84d8 <memset>
        length = writeString(topic, buffer, length);
   b631a:	2305      	movs	r3, #5
   b631c:	69e2      	ldr	r2, [r4, #28]
   b631e:	4659      	mov	r1, fp
   b6320:	4620      	mov	r0, r4
   b6322:	f7ff fec3 	bl	b60ac <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   b6326:	1e6b      	subs	r3, r5, #1
   b6328:	2b01      	cmp	r3, #1
   b632a:	d815      	bhi.n	b6358 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   b632c:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b632e:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   b6330:	3101      	adds	r1, #1
   b6332:	b289      	uxth	r1, r1
   b6334:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b6336:	0a09      	lsrs	r1, r1, #8
   b6338:	5419      	strb	r1, [r3, r0]
   b633a:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   b633c:	69e3      	ldr	r3, [r4, #28]
   b633e:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   b6340:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   b6342:	3002      	adds	r0, #2
   b6344:	5499      	strb	r1, [r3, r2]
   b6346:	b280      	uxth	r0, r0
            if (messageid != NULL)
   b6348:	f1b8 0f00 	cmp.w	r8, #0
   b634c:	d004      	beq.n	b6358 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   b634e:	8c23      	ldrh	r3, [r4, #32]
   b6350:	1c5a      	adds	r2, r3, #1
   b6352:	8422      	strh	r2, [r4, #32]
   b6354:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   b6358:	2100      	movs	r1, #0
   b635a:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b635c:	428f      	cmp	r7, r1
            buffer[length++] = payload[i];
   b635e:	69e2      	ldr	r2, [r4, #28]
   b6360:	b29b      	uxth	r3, r3
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b6362:	d90a      	bls.n	b637a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   b6364:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   b6368:	459c      	cmp	ip, r3
   b636a:	d906      	bls.n	b637a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   b636c:	f816 c001 	ldrb.w	ip, [r6, r1]
   b6370:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   b6374:	3101      	adds	r1, #1
   b6376:	b289      	uxth	r1, r1
   b6378:	e7ef      	b.n	b635a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   b637a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   b637e:	2900      	cmp	r1, #0
   b6380:	bf0c      	ite	eq
   b6382:	2130      	moveq	r1, #48	; 0x30
   b6384:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   b6386:	f1b9 0f00 	cmp.w	r9, #0
   b638a:	d001      	beq.n	b6390 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   b638c:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   b6390:	2d02      	cmp	r5, #2
   b6392:	d10e      	bne.n	b63b2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   b6394:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   b6398:	3b05      	subs	r3, #5
   b639a:	b29b      	uxth	r3, r3
   b639c:	4620      	mov	r0, r4
   b639e:	f7ff fe49 	bl	b6034 <_ZN4MQTT5writeEhPht>
   b63a2:	4682      	mov	sl, r0
        MutexLocker lock(this);
   b63a4:	a801      	add	r0, sp, #4
   b63a6:	f7ff fd87 	bl	b5eb8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b63aa:	4650      	mov	r0, sl
   b63ac:	b003      	add	sp, #12
   b63ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   b63b2:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   b63b4:	bf08      	it	eq
   b63b6:	f041 0102 	orreq.w	r1, r1, #2
   b63ba:	e7ed      	b.n	b6398 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000b63bc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   b63bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   b63be:	9c08      	ldr	r4, [sp, #32]
   b63c0:	9403      	str	r4, [sp, #12]
   b63c2:	2400      	movs	r4, #0
   b63c4:	9402      	str	r4, [sp, #8]
   b63c6:	f89d 401c 	ldrb.w	r4, [sp, #28]
   b63ca:	9401      	str	r4, [sp, #4]
   b63cc:	f89d 4018 	ldrb.w	r4, [sp, #24]
   b63d0:	9400      	str	r4, [sp, #0]
   b63d2:	f7ff ff87 	bl	b62e4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   b63d6:	b004      	add	sp, #16
   b63d8:	bd10      	pop	{r4, pc}

000b63da <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   b63da:	b530      	push	{r4, r5, lr}
   b63dc:	b087      	sub	sp, #28
   b63de:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b63e0:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   b63e2:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   b63e4:	9204      	str	r2, [sp, #16]
   b63e6:	f002 f8b7 	bl	b8558 <strlen>
   b63ea:	2500      	movs	r5, #0
   b63ec:	4603      	mov	r3, r0
   b63ee:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b63f2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   b63f6:	9500      	str	r5, [sp, #0]
   b63f8:	4620      	mov	r0, r4
   b63fa:	f7ff ffdf 	bl	b63bc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   b63fe:	b007      	add	sp, #28
   b6400:	bd30      	pop	{r4, r5, pc}

000b6402 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b6402:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6404:	4604      	mov	r4, r0
   b6406:	460e      	mov	r6, r1
    if (isConnected()) {
   b6408:	f7ff fe6c 	bl	b60e4 <_ZN4MQTT11isConnectedEv>
   b640c:	4605      	mov	r5, r0
   b640e:	b1c8      	cbz	r0, b6444 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b6410:	4621      	mov	r1, r4
   b6412:	a801      	add	r0, sp, #4
   b6414:	f7ff fd45 	bl	b5ea2 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b6418:	69e3      	ldr	r3, [r4, #28]
   b641a:	2262      	movs	r2, #98	; 0x62
   b641c:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b641e:	69e3      	ldr	r3, [r4, #28]
   b6420:	2202      	movs	r2, #2
   b6422:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b6424:	69e3      	ldr	r3, [r4, #28]
   b6426:	0a32      	lsrs	r2, r6, #8
   b6428:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b642a:	69e3      	ldr	r3, [r4, #28]
   b642c:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b642e:	69e1      	ldr	r1, [r4, #28]
   b6430:	2204      	movs	r2, #4
   b6432:	4620      	mov	r0, r4
   b6434:	f001 f94f 	bl	b76d6 <_ZN9TCPClient5writeEPKhj>
   b6438:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b643a:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b643c:	bf18      	it	ne
   b643e:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b6440:	f7ff fd3a 	bl	b5eb8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6444:	4628      	mov	r0, r5
   b6446:	b002      	add	sp, #8
   b6448:	bd70      	pop	{r4, r5, r6, pc}

000b644a <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b644a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b644c:	4604      	mov	r4, r0
   b644e:	460e      	mov	r6, r1
    if (isConnected()) {
   b6450:	f7ff fe48 	bl	b60e4 <_ZN4MQTT11isConnectedEv>
   b6454:	4605      	mov	r5, r0
   b6456:	b1c8      	cbz	r0, b648c <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b6458:	4621      	mov	r1, r4
   b645a:	a801      	add	r0, sp, #4
   b645c:	f7ff fd21 	bl	b5ea2 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b6460:	69e3      	ldr	r3, [r4, #28]
   b6462:	2272      	movs	r2, #114	; 0x72
   b6464:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b6466:	69e3      	ldr	r3, [r4, #28]
   b6468:	2202      	movs	r2, #2
   b646a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b646c:	69e3      	ldr	r3, [r4, #28]
   b646e:	0a32      	lsrs	r2, r6, #8
   b6470:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b6472:	69e3      	ldr	r3, [r4, #28]
   b6474:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b6476:	69e1      	ldr	r1, [r4, #28]
   b6478:	2204      	movs	r2, #4
   b647a:	4620      	mov	r0, r4
   b647c:	f001 f92b 	bl	b76d6 <_ZN9TCPClient5writeEPKhj>
   b6480:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b6482:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b6484:	bf18      	it	ne
   b6486:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b6488:	f7ff fd16 	bl	b5eb8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b648c:	4628      	mov	r0, r5
   b648e:	b002      	add	sp, #8
   b6490:	bd70      	pop	{r4, r5, r6, pc}

000b6492 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b6492:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6496:	ed2d 8b02 	vpush	{d8}
   b649a:	b087      	sub	sp, #28
   b649c:	af00      	add	r7, sp, #0
   b649e:	4604      	mov	r4, r0
    if (isConnected()) {
   b64a0:	f7ff fe20 	bl	b60e4 <_ZN4MQTT11isConnectedEv>
   b64a4:	4681      	mov	r9, r0
   b64a6:	b1f8      	cbz	r0, b64e8 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b64a8:	4621      	mov	r1, r4
   b64aa:	f107 0014 	add.w	r0, r7, #20
   b64ae:	f7ff fcf8 	bl	b5ea2 <_ZN4MQTT11MutexLockerC1EPS_>
   b64b2:	f000 fa35 	bl	b6920 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b64b6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b64b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b64bc:	4353      	muls	r3, r2
   b64be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b64c0:	1a82      	subs	r2, r0, r2
   b64c2:	429a      	cmp	r2, r3
   b64c4:	4606      	mov	r6, r0
   b64c6:	d803      	bhi.n	b64d0 <_ZN4MQTT4loopEv+0x3e>
   b64c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b64ca:	1a82      	subs	r2, r0, r2
   b64cc:	4293      	cmp	r3, r2
   b64ce:	d221      	bcs.n	b6514 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b64d0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b64d4:	b17b      	cbz	r3, b64f6 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b64d6:	4620      	mov	r0, r4
   b64d8:	f001 fb82 	bl	b7be0 <_ZN9TCPClient4stopEv>
                return false;
   b64dc:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b64e0:	f107 0014 	add.w	r0, r7, #20
   b64e4:	f7ff fce8 	bl	b5eb8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b64e8:	4648      	mov	r0, r9
   b64ea:	371c      	adds	r7, #28
   b64ec:	46bd      	mov	sp, r7
   b64ee:	ecbd 8b02 	vpop	{d8}
   b64f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b64f6:	69e2      	ldr	r2, [r4, #28]
   b64f8:	21c0      	movs	r1, #192	; 0xc0
   b64fa:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b64fc:	69e2      	ldr	r2, [r4, #28]
   b64fe:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b6500:	69e1      	ldr	r1, [r4, #28]
   b6502:	2202      	movs	r2, #2
   b6504:	4620      	mov	r0, r4
   b6506:	f001 f8e6 	bl	b76d6 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b650a:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b650e:	2301      	movs	r3, #1
   b6510:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b6514:	4620      	mov	r0, r4
   b6516:	f001 fb09 	bl	b7b2c <_ZN9TCPClient9availableEv>
   b651a:	2800      	cmp	r0, #0
   b651c:	d0e0      	beq.n	b64e0 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b651e:	f107 0113 	add.w	r1, r7, #19
   b6522:	4620      	mov	r0, r4
   b6524:	f7ff fd34 	bl	b5f90 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b6528:	4683      	mov	fp, r0
   b652a:	2800      	cmp	r0, #0
   b652c:	d0d8      	beq.n	b64e0 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b652e:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b6530:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b6532:	7819      	ldrb	r1, [r3, #0]
   b6534:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b6538:	2a30      	cmp	r2, #48	; 0x30
   b653a:	d17f      	bne.n	b663c <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b653c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b6540:	f1ba 0f00 	cmp.w	sl, #0
   b6544:	d0cc      	beq.n	b64e0 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b6546:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b654a:	466a      	mov	r2, sp
   b654c:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b6550:	eb03 020c 	add.w	r2, r3, ip
   b6554:	7851      	ldrb	r1, [r2, #1]
   b6556:	7895      	ldrb	r5, [r2, #2]
   b6558:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b655c:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b655e:	f105 0208 	add.w	r2, r5, #8
   b6562:	4669      	mov	r1, sp
   b6564:	08d2      	lsrs	r2, r2, #3
   b6566:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b656a:	4695      	mov	sp, r2
   b656c:	f10c 0203 	add.w	r2, ip, #3
   b6570:	60fa      	str	r2, [r7, #12]
   b6572:	eb03 0e02 	add.w	lr, r3, r2
   b6576:	eb0d 0205 	add.w	r2, sp, r5
   b657a:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b657c:	f8c7 d008 	str.w	sp, [r7, #8]
   b6580:	607a      	str	r2, [r7, #4]
   b6582:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b6586:	428a      	cmp	r2, r1
   b6588:	d006      	beq.n	b6598 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b658a:	460a      	mov	r2, r1
   b658c:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b6590:	f802 8b01 	strb.w	r8, [r2], #1
   b6594:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b6596:	e7f4      	b.n	b6582 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b6598:	2200      	movs	r2, #0
   b659a:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b659c:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b65a0:	68f9      	ldr	r1, [r7, #12]
   b65a2:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b65a6:	ebab 020c 	sub.w	r2, fp, ip
   b65aa:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b65ac:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b65b0:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b65b4:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b65b6:	d125      	bne.n	b6604 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b65b8:	f813 e001 	ldrb.w	lr, [r3, r1]
   b65bc:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b65be:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b65c0:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b65c4:	f10c 0105 	add.w	r1, ip, #5
   b65c8:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b65ca:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b65cc:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b65d0:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b65d2:	69e3      	ldr	r3, [r4, #28]
   b65d4:	2240      	movs	r2, #64	; 0x40
   b65d6:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b65d8:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b65da:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b65de:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b65e2:	69e3      	ldr	r3, [r4, #28]
   b65e4:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b65e8:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b65ea:	69e3      	ldr	r3, [r4, #28]
   b65ec:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b65f0:	69e1      	ldr	r1, [r4, #28]
   b65f2:	2204      	movs	r2, #4
   b65f4:	4620      	mov	r0, r4
   b65f6:	f001 f86e 	bl	b76d6 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b65fa:	6266      	str	r6, [r4, #36]	; 0x24
   b65fc:	ee18 3a10 	vmov	r3, s16
   b6600:	469d      	mov	sp, r3
   b6602:	e76d      	b.n	b64e0 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b6604:	f1b8 0f04 	cmp.w	r8, #4
   b6608:	d115      	bne.n	b6636 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b660a:	f813 e001 	ldrb.w	lr, [r3, r1]
   b660e:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b6610:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6612:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b6616:	f10c 0105 	add.w	r1, ip, #5
   b661a:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b661c:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b661e:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b6622:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b6624:	69e3      	ldr	r3, [r4, #28]
   b6626:	2250      	movs	r2, #80	; 0x50
   b6628:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b662a:	69e3      	ldr	r3, [r4, #28]
   b662c:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b662e:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b6632:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b6634:	e7d5      	b.n	b65e2 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b6636:	4419      	add	r1, r3
   b6638:	47d0      	blx	sl
   b663a:	e7df      	b.n	b65fc <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b663c:	2a50      	cmp	r2, #80	; 0x50
   b663e:	d108      	bne.n	b6652 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b6640:	789a      	ldrb	r2, [r3, #2]
   b6642:	78d9      	ldrb	r1, [r3, #3]
   b6644:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b6648:	b289      	uxth	r1, r1
   b664a:	4620      	mov	r0, r4
   b664c:	f7ff fed9 	bl	b6402 <_ZN4MQTT14publishReleaseEt>
   b6650:	e746      	b.n	b64e0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b6652:	2a40      	cmp	r2, #64	; 0x40
   b6654:	d112      	bne.n	b667c <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b6656:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b6658:	2a00      	cmp	r2, #0
   b665a:	f43f af41 	beq.w	b64e0 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b665e:	f1bb 0f04 	cmp.w	fp, #4
   b6662:	f47f af3d 	bne.w	b64e0 <_ZN4MQTT4loopEv+0x4e>
   b6666:	f011 0f06 	tst.w	r1, #6
   b666a:	f47f af39 	bne.w	b64e0 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b666e:	7899      	ldrb	r1, [r3, #2]
   b6670:	78d8      	ldrb	r0, [r3, #3]
   b6672:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b6676:	b280      	uxth	r0, r0
   b6678:	4790      	blx	r2
   b667a:	e731      	b.n	b64e0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b667c:	2a60      	cmp	r2, #96	; 0x60
   b667e:	d108      	bne.n	b6692 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b6680:	789a      	ldrb	r2, [r3, #2]
   b6682:	78d9      	ldrb	r1, [r3, #3]
   b6684:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b6688:	b289      	uxth	r1, r1
   b668a:	4620      	mov	r0, r4
   b668c:	f7ff fedd 	bl	b644a <_ZN4MQTT15publishCompleteEt>
   b6690:	e726      	b.n	b64e0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b6692:	2a70      	cmp	r2, #112	; 0x70
   b6694:	d0df      	beq.n	b6656 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b6696:	2a90      	cmp	r2, #144	; 0x90
   b6698:	f43f af22 	beq.w	b64e0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b669c:	2ac0      	cmp	r2, #192	; 0xc0
   b669e:	d10a      	bne.n	b66b6 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b66a0:	22d0      	movs	r2, #208	; 0xd0
   b66a2:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b66a4:	69e3      	ldr	r3, [r4, #28]
   b66a6:	2200      	movs	r2, #0
   b66a8:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b66aa:	69e1      	ldr	r1, [r4, #28]
   b66ac:	2202      	movs	r2, #2
   b66ae:	4620      	mov	r0, r4
   b66b0:	f001 f811 	bl	b76d6 <_ZN9TCPClient5writeEPKhj>
   b66b4:	e714      	b.n	b64e0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b66b6:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b66b8:	bf04      	itt	eq
   b66ba:	2300      	moveq	r3, #0
   b66bc:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b66c0:	e70e      	b.n	b64e0 <_ZN4MQTT4loopEv+0x4e>

000b66c2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b66c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b66c4:	4604      	mov	r4, r0
   b66c6:	460f      	mov	r7, r1
   b66c8:	4616      	mov	r6, r2
    if (isConnected()) {
   b66ca:	f7ff fd0b 	bl	b60e4 <_ZN4MQTT11isConnectedEv>
   b66ce:	4605      	mov	r5, r0
   b66d0:	b310      	cbz	r0, b6718 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b66d2:	4621      	mov	r1, r4
   b66d4:	a801      	add	r0, sp, #4
   b66d6:	f7ff fbe4 	bl	b5ea2 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b66da:	8c23      	ldrh	r3, [r4, #32]
   b66dc:	3301      	adds	r3, #1
   b66de:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b66e0:	b1eb      	cbz	r3, b671e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b66e2:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b66e4:	8c23      	ldrh	r3, [r4, #32]
   b66e6:	69e2      	ldr	r2, [r4, #28]
   b66e8:	0a1b      	lsrs	r3, r3, #8
   b66ea:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b66ec:	69e3      	ldr	r3, [r4, #28]
   b66ee:	8c22      	ldrh	r2, [r4, #32]
   b66f0:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b66f2:	69e2      	ldr	r2, [r4, #28]
   b66f4:	2307      	movs	r3, #7
   b66f6:	4639      	mov	r1, r7
   b66f8:	4620      	mov	r0, r4
   b66fa:	f7ff fcd7 	bl	b60ac <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b66fe:	69e3      	ldr	r3, [r4, #28]
   b6700:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b6702:	3804      	subs	r0, #4
   b6704:	b283      	uxth	r3, r0
   b6706:	69e2      	ldr	r2, [r4, #28]
   b6708:	2182      	movs	r1, #130	; 0x82
   b670a:	4620      	mov	r0, r4
   b670c:	f7ff fc92 	bl	b6034 <_ZN4MQTT5writeEhPht>
   b6710:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b6712:	a801      	add	r0, sp, #4
   b6714:	f7ff fbd0 	bl	b5eb8 <_ZN4MQTT11MutexLockerD1Ev>
}
   b6718:	4628      	mov	r0, r5
   b671a:	b003      	add	sp, #12
   b671c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b671e:	2301      	movs	r3, #1
   b6720:	e7df      	b.n	b66e2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b6722 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b6722:	2200      	movs	r2, #0
   b6724:	f7ff bfcd 	b.w	b66c2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000b6728 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   b6728:	f000 bba6 	b.w	b6e78 <delay>

000b672c <_Z11BlynkMillisv>:
   b672c:	f000 b8f8 	b.w	b6920 <HAL_Timer_Get_Milli_Seconds>

000b6730 <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   b6730:	4770      	bx	lr

000b6732 <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   b6732:	4770      	bx	lr

000b6734 <BlynkNoOpCbk>:
{}
   b6734:	4770      	bx	lr
	...

000b6738 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   b6738:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   b673a:	bf5a      	itte	pl
   b673c:	4b02      	ldrpl	r3, [pc, #8]	; (b6748 <GetReadHandler+0x10>)
   b673e:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b6742:	2000      	movmi	r0, #0
#endif
}
   b6744:	4770      	bx	lr
   b6746:	bf00      	nop
   b6748:	000b9358 	.word	0x000b9358

000b674c <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   b674c:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   b674e:	bf5a      	itte	pl
   b6750:	4b02      	ldrpl	r3, [pc, #8]	; (b675c <GetWriteHandler+0x10>)
   b6752:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b6756:	2000      	movmi	r0, #0
#endif
}
   b6758:	4770      	bx	lr
   b675a:	bf00      	nop
   b675c:	000b9558 	.word	0x000b9558

000b6760 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b6760:	b510      	push	{r4, lr}
   b6762:	4b06      	ldr	r3, [pc, #24]	; (b677c <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b6764:	6003      	str	r3, [r0, #0]
   b6766:	4604      	mov	r4, r0
	if (mutex) {
   b6768:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b676a:	b108      	cbz	r0, b6770 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b676c:	f000 f8a8 	bl	b68c0 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b6770:	4620      	mov	r0, r4
   b6772:	f7fe fec3 	bl	b54fc <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b6776:	4620      	mov	r0, r4
   b6778:	bd10      	pop	{r4, pc}
   b677a:	bf00      	nop
   b677c:	000b9760 	.word	0x000b9760

000b6780 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b6780:	b510      	push	{r4, lr}
   b6782:	4604      	mov	r4, r0
}
   b6784:	f7ff ffec 	bl	b6760 <_ZN16OledWingAdafruitD1Ev>
   b6788:	4620      	mov	r0, r4
   b678a:	2170      	movs	r1, #112	; 0x70
   b678c:	f7fd fc87 	bl	b409e <_ZdlPvj>
   b6790:	4620      	mov	r0, r4
   b6792:	bd10      	pop	{r4, pc}

000b6794 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b6794:	b530      	push	{r4, r5, lr}
   b6796:	b085      	sub	sp, #20
   b6798:	4604      	mov	r4, r0
   b679a:	460d      	mov	r5, r1
   b679c:	f001 fd08 	bl	b81b0 <_Z19__fetch_global_Wirev>
   b67a0:	4a10      	ldr	r2, [pc, #64]	; (b67e4 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b67a2:	4911      	ldr	r1, [pc, #68]	; (b67e8 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b67a4:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b67a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b67ac:	2180      	movs	r1, #128	; 0x80
   b67ae:	4603      	mov	r3, r0
   b67b0:	9200      	str	r2, [sp, #0]
   b67b2:	4620      	mov	r0, r4
   b67b4:	2220      	movs	r2, #32
   b67b6:	f7fe ff19 	bl	b55ec <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b67ba:	4b0c      	ldr	r3, [pc, #48]	; (b67ec <_ZN16OledWingAdafruitC1Ei+0x58>)
   b67bc:	6023      	str	r3, [r4, #0]
   b67be:	2300      	movs	r3, #0
   b67c0:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b67c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b67c8:	f7ff fb12 	bl	b5df0 <_ZN8DebounceC1Ev>
   b67cc:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b67d0:	f7ff fb0e 	bl	b5df0 <_ZN8DebounceC1Ev>
   b67d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b67d8:	f7ff fb0a 	bl	b5df0 <_ZN8DebounceC1Ev>
}
   b67dc:	4620      	mov	r0, r4
   b67de:	b005      	add	sp, #20
   b67e0:	bd30      	pop	{r4, r5, pc}
   b67e2:	bf00      	nop
   b67e4:	00061a80 	.word	0x00061a80
   b67e8:	000186a0 	.word	0x000186a0
   b67ec:	000b9760 	.word	0x000b9760

000b67f0 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b67f0:	b513      	push	{r0, r1, r4, lr}
   b67f2:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b67f4:	3050      	adds	r0, #80	; 0x50
   b67f6:	f000 f85b 	bl	b68b0 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b67fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b67fc:	07d9      	lsls	r1, r3, #31
   b67fe:	d505      	bpl.n	b680c <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b6800:	2202      	movs	r2, #2
   b6802:	2104      	movs	r1, #4
   b6804:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b6808:	f7ff fb06 	bl	b5e18 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b680c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b680e:	079a      	lsls	r2, r3, #30
   b6810:	d505      	bpl.n	b681e <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b6812:	2200      	movs	r2, #0
   b6814:	2103      	movs	r1, #3
   b6816:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b681a:	f7ff fafd 	bl	b5e18 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b681e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6820:	075b      	lsls	r3, r3, #29
   b6822:	d505      	bpl.n	b6830 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b6824:	2202      	movs	r2, #2
   b6826:	4611      	mov	r1, r2
   b6828:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b682c:	f7ff faf4 	bl	b5e18 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b6830:	2301      	movs	r3, #1
   b6832:	9300      	str	r3, [sp, #0]
   b6834:	223c      	movs	r2, #60	; 0x3c
   b6836:	2102      	movs	r1, #2
   b6838:	4620      	mov	r0, r4
   b683a:	f7fe ffdf 	bl	b57fc <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b683e:	b002      	add	sp, #8
   b6840:	bd10      	pop	{r4, pc}

000b6842 <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b6842:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b6844:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b6846:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b6848:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b684a:	d502      	bpl.n	b6852 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b684c:	3058      	adds	r0, #88	; 0x58
   b684e:	f7ff faf0 	bl	b5e32 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b6852:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6854:	079a      	lsls	r2, r3, #30
   b6856:	d503      	bpl.n	b6860 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b6858:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b685c:	f7ff fae9 	bl	b5e32 <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b6860:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6862:	075b      	lsls	r3, r3, #29
   b6864:	d505      	bpl.n	b6872 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b6866:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b686a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b686e:	f7ff bae0 	b.w	b5e32 <_ZN8Debounce6updateEv>
}
   b6872:	bd10      	pop	{r4, pc}

000b6874 <_ZN16OledWingAdafruit8pressedAEv>:

bool OledWingAdafruit::pressedA() {
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   b6874:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedA() {
   b6876:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   b6878:	f013 0001 	ands.w	r0, r3, #1
   b687c:	d003      	beq.n	b6886 <_ZN16OledWingAdafruit8pressedAEv+0x12>
   b687e:	f102 0058 	add.w	r0, r2, #88	; 0x58
   b6882:	f7ff bb06 	b.w	b5e92 <_ZN8Debounce4fellEv>
}
   b6886:	4770      	bx	lr

000b6888 <_ZN16OledWingAdafruit8pressedBEv>:

bool OledWingAdafruit::pressedB() {
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   b6888:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedB() {
   b688a:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   b688c:	f013 0002 	ands.w	r0, r3, #2
   b6890:	d003      	beq.n	b689a <_ZN16OledWingAdafruit8pressedBEv+0x12>
   b6892:	f102 0060 	add.w	r0, r2, #96	; 0x60
   b6896:	f7ff bafc 	b.w	b5e92 <_ZN8Debounce4fellEv>
}
   b689a:	4770      	bx	lr

000b689c <_ZN16OledWingAdafruit8pressedCEv>:

bool OledWingAdafruit::pressedC() {
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   b689c:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedC() {
   b689e:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   b68a0:	f013 0004 	ands.w	r0, r3, #4
   b68a4:	d003      	beq.n	b68ae <_ZN16OledWingAdafruit8pressedCEv+0x12>
   b68a6:	f102 0068 	add.w	r0, r2, #104	; 0x68
   b68aa:	f7ff baf2 	b.w	b5e92 <_ZN8Debounce4fellEv>
}
   b68ae:	4770      	bx	lr

000b68b0 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b68b0:	b508      	push	{r3, lr}
   b68b2:	4b02      	ldr	r3, [pc, #8]	; (b68bc <os_mutex_create+0xc>)
   b68b4:	681b      	ldr	r3, [r3, #0]
   b68b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b68b8:	9301      	str	r3, [sp, #4]
   b68ba:	bd08      	pop	{r3, pc}
   b68bc:	00030248 	.word	0x00030248

000b68c0 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b68c0:	b508      	push	{r3, lr}
   b68c2:	4b02      	ldr	r3, [pc, #8]	; (b68cc <os_mutex_destroy+0xc>)
   b68c4:	681b      	ldr	r3, [r3, #0]
   b68c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b68c8:	9301      	str	r3, [sp, #4]
   b68ca:	bd08      	pop	{r3, pc}
   b68cc:	00030248 	.word	0x00030248

000b68d0 <os_mutex_lock>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b68d0:	b508      	push	{r3, lr}
   b68d2:	4b02      	ldr	r3, [pc, #8]	; (b68dc <os_mutex_lock+0xc>)
   b68d4:	681b      	ldr	r3, [r3, #0]
   b68d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b68d8:	9301      	str	r3, [sp, #4]
   b68da:	bd08      	pop	{r3, pc}
   b68dc:	00030248 	.word	0x00030248

000b68e0 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b68e0:	b508      	push	{r3, lr}
   b68e2:	4b02      	ldr	r3, [pc, #8]	; (b68ec <os_mutex_unlock+0xc>)
   b68e4:	681b      	ldr	r3, [r3, #0]
   b68e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b68e8:	9301      	str	r3, [sp, #4]
   b68ea:	bd08      	pop	{r3, pc}
   b68ec:	00030248 	.word	0x00030248

000b68f0 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b68f0:	b508      	push	{r3, lr}
   b68f2:	4b02      	ldr	r3, [pc, #8]	; (b68fc <os_mutex_recursive_create+0xc>)
   b68f4:	681b      	ldr	r3, [r3, #0]
   b68f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b68f8:	9301      	str	r3, [sp, #4]
   b68fa:	bd08      	pop	{r3, pc}
   b68fc:	00030248 	.word	0x00030248

000b6900 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6900:	b508      	push	{r3, lr}
   b6902:	4b02      	ldr	r3, [pc, #8]	; (b690c <HAL_RNG_GetRandomNumber+0xc>)
   b6904:	681b      	ldr	r3, [r3, #0]
   b6906:	685b      	ldr	r3, [r3, #4]
   b6908:	9301      	str	r3, [sp, #4]
   b690a:	bd08      	pop	{r3, pc}
   b690c:	00030218 	.word	0x00030218

000b6910 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6910:	b508      	push	{r3, lr}
   b6912:	4b02      	ldr	r3, [pc, #8]	; (b691c <HAL_Delay_Microseconds+0xc>)
   b6914:	681b      	ldr	r3, [r3, #0]
   b6916:	68db      	ldr	r3, [r3, #12]
   b6918:	9301      	str	r3, [sp, #4]
   b691a:	bd08      	pop	{r3, pc}
   b691c:	00030218 	.word	0x00030218

000b6920 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6920:	b508      	push	{r3, lr}
   b6922:	4b02      	ldr	r3, [pc, #8]	; (b692c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6924:	681b      	ldr	r3, [r3, #0]
   b6926:	695b      	ldr	r3, [r3, #20]
   b6928:	9301      	str	r3, [sp, #4]
   b692a:	bd08      	pop	{r3, pc}
   b692c:	00030218 	.word	0x00030218

000b6930 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b6930:	b508      	push	{r3, lr}
   b6932:	4b02      	ldr	r3, [pc, #8]	; (b693c <HAL_Validate_Pin_Function+0xc>)
   b6934:	681b      	ldr	r3, [r3, #0]
   b6936:	685b      	ldr	r3, [r3, #4]
   b6938:	9301      	str	r3, [sp, #4]
   b693a:	bd08      	pop	{r3, pc}
   b693c:	0003022c 	.word	0x0003022c

000b6940 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6940:	b508      	push	{r3, lr}
   b6942:	4b02      	ldr	r3, [pc, #8]	; (b694c <HAL_Pin_Mode+0xc>)
   b6944:	681b      	ldr	r3, [r3, #0]
   b6946:	689b      	ldr	r3, [r3, #8]
   b6948:	9301      	str	r3, [sp, #4]
   b694a:	bd08      	pop	{r3, pc}
   b694c:	0003022c 	.word	0x0003022c

000b6950 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6950:	b508      	push	{r3, lr}
   b6952:	4b02      	ldr	r3, [pc, #8]	; (b695c <HAL_Get_Pin_Mode+0xc>)
   b6954:	681b      	ldr	r3, [r3, #0]
   b6956:	68db      	ldr	r3, [r3, #12]
   b6958:	9301      	str	r3, [sp, #4]
   b695a:	bd08      	pop	{r3, pc}
   b695c:	0003022c 	.word	0x0003022c

000b6960 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6960:	b508      	push	{r3, lr}
   b6962:	4b02      	ldr	r3, [pc, #8]	; (b696c <HAL_GPIO_Write+0xc>)
   b6964:	681b      	ldr	r3, [r3, #0]
   b6966:	691b      	ldr	r3, [r3, #16]
   b6968:	9301      	str	r3, [sp, #4]
   b696a:	bd08      	pop	{r3, pc}
   b696c:	0003022c 	.word	0x0003022c

000b6970 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b6970:	b508      	push	{r3, lr}
   b6972:	4b02      	ldr	r3, [pc, #8]	; (b697c <HAL_GPIO_Read+0xc>)
   b6974:	681b      	ldr	r3, [r3, #0]
   b6976:	695b      	ldr	r3, [r3, #20]
   b6978:	9301      	str	r3, [sp, #4]
   b697a:	bd08      	pop	{r3, pc}
   b697c:	0003022c 	.word	0x0003022c

000b6980 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
   b6980:	b508      	push	{r3, lr}
   b6982:	4b02      	ldr	r3, [pc, #8]	; (b698c <HAL_DAC_Write+0xc>)
   b6984:	681b      	ldr	r3, [r3, #0]
   b6986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6988:	9301      	str	r3, [sp, #4]
   b698a:	bd08      	pop	{r3, pc}
   b698c:	0003022c 	.word	0x0003022c

000b6990 <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b6990:	b508      	push	{r3, lr}
   b6992:	4b02      	ldr	r3, [pc, #8]	; (b699c <hal_adc_read+0xc>)
   b6994:	681b      	ldr	r3, [r3, #0]
   b6996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6998:	9301      	str	r3, [sp, #4]
   b699a:	bd08      	pop	{r3, pc}
   b699c:	0003022c 	.word	0x0003022c

000b69a0 <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b69a0:	b508      	push	{r3, lr}
   b69a2:	4b02      	ldr	r3, [pc, #8]	; (b69ac <hal_pwm_write_ext+0xc>)
   b69a4:	681b      	ldr	r3, [r3, #0]
   b69a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b69a8:	9301      	str	r3, [sp, #4]
   b69aa:	bd08      	pop	{r3, pc}
   b69ac:	0003022c 	.word	0x0003022c

000b69b0 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b69b0:	b508      	push	{r3, lr}
   b69b2:	4b02      	ldr	r3, [pc, #8]	; (b69bc <hal_i2c_set_speed+0xc>)
   b69b4:	681b      	ldr	r3, [r3, #0]
   b69b6:	681b      	ldr	r3, [r3, #0]
   b69b8:	9301      	str	r3, [sp, #4]
   b69ba:	bd08      	pop	{r3, pc}
   b69bc:	00030228 	.word	0x00030228

000b69c0 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b69c0:	b508      	push	{r3, lr}
   b69c2:	4b02      	ldr	r3, [pc, #8]	; (b69cc <hal_i2c_begin+0xc>)
   b69c4:	681b      	ldr	r3, [r3, #0]
   b69c6:	68db      	ldr	r3, [r3, #12]
   b69c8:	9301      	str	r3, [sp, #4]
   b69ca:	bd08      	pop	{r3, pc}
   b69cc:	00030228 	.word	0x00030228

000b69d0 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b69d0:	b508      	push	{r3, lr}
   b69d2:	4b02      	ldr	r3, [pc, #8]	; (b69dc <hal_i2c_begin_transmission+0xc>)
   b69d4:	681b      	ldr	r3, [r3, #0]
   b69d6:	699b      	ldr	r3, [r3, #24]
   b69d8:	9301      	str	r3, [sp, #4]
   b69da:	bd08      	pop	{r3, pc}
   b69dc:	00030228 	.word	0x00030228

000b69e0 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b69e0:	b508      	push	{r3, lr}
   b69e2:	4b02      	ldr	r3, [pc, #8]	; (b69ec <hal_i2c_end_transmission+0xc>)
   b69e4:	681b      	ldr	r3, [r3, #0]
   b69e6:	69db      	ldr	r3, [r3, #28]
   b69e8:	9301      	str	r3, [sp, #4]
   b69ea:	bd08      	pop	{r3, pc}
   b69ec:	00030228 	.word	0x00030228

000b69f0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b69f0:	b508      	push	{r3, lr}
   b69f2:	4b02      	ldr	r3, [pc, #8]	; (b69fc <hal_i2c_write+0xc>)
   b69f4:	681b      	ldr	r3, [r3, #0]
   b69f6:	6a1b      	ldr	r3, [r3, #32]
   b69f8:	9301      	str	r3, [sp, #4]
   b69fa:	bd08      	pop	{r3, pc}
   b69fc:	00030228 	.word	0x00030228

000b6a00 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6a00:	b508      	push	{r3, lr}
   b6a02:	4b02      	ldr	r3, [pc, #8]	; (b6a0c <hal_i2c_available+0xc>)
   b6a04:	681b      	ldr	r3, [r3, #0]
   b6a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6a08:	9301      	str	r3, [sp, #4]
   b6a0a:	bd08      	pop	{r3, pc}
   b6a0c:	00030228 	.word	0x00030228

000b6a10 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6a10:	b508      	push	{r3, lr}
   b6a12:	4b02      	ldr	r3, [pc, #8]	; (b6a1c <hal_i2c_read+0xc>)
   b6a14:	681b      	ldr	r3, [r3, #0]
   b6a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6a18:	9301      	str	r3, [sp, #4]
   b6a1a:	bd08      	pop	{r3, pc}
   b6a1c:	00030228 	.word	0x00030228

000b6a20 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6a20:	b508      	push	{r3, lr}
   b6a22:	4b02      	ldr	r3, [pc, #8]	; (b6a2c <hal_i2c_peek+0xc>)
   b6a24:	681b      	ldr	r3, [r3, #0]
   b6a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6a28:	9301      	str	r3, [sp, #4]
   b6a2a:	bd08      	pop	{r3, pc}
   b6a2c:	00030228 	.word	0x00030228

000b6a30 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6a30:	b508      	push	{r3, lr}
   b6a32:	4b02      	ldr	r3, [pc, #8]	; (b6a3c <hal_i2c_flush+0xc>)
   b6a34:	681b      	ldr	r3, [r3, #0]
   b6a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6a38:	9301      	str	r3, [sp, #4]
   b6a3a:	bd08      	pop	{r3, pc}
   b6a3c:	00030228 	.word	0x00030228

000b6a40 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6a40:	b508      	push	{r3, lr}
   b6a42:	4b02      	ldr	r3, [pc, #8]	; (b6a4c <hal_i2c_is_enabled+0xc>)
   b6a44:	681b      	ldr	r3, [r3, #0]
   b6a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6a48:	9301      	str	r3, [sp, #4]
   b6a4a:	bd08      	pop	{r3, pc}
   b6a4c:	00030228 	.word	0x00030228

000b6a50 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6a50:	b508      	push	{r3, lr}
   b6a52:	4b02      	ldr	r3, [pc, #8]	; (b6a5c <hal_i2c_init+0xc>)
   b6a54:	681b      	ldr	r3, [r3, #0]
   b6a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6a58:	9301      	str	r3, [sp, #4]
   b6a5a:	bd08      	pop	{r3, pc}
   b6a5c:	00030228 	.word	0x00030228

000b6a60 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6a60:	b508      	push	{r3, lr}
   b6a62:	4b02      	ldr	r3, [pc, #8]	; (b6a6c <if_index_to_name+0xc>)
   b6a64:	681b      	ldr	r3, [r3, #0]
   b6a66:	695b      	ldr	r3, [r3, #20]
   b6a68:	9301      	str	r3, [sp, #4]
   b6a6a:	bd08      	pop	{r3, pc}
   b6a6c:	0003026c 	.word	0x0003026c

000b6a70 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6a70:	b508      	push	{r3, lr}
   b6a72:	4b02      	ldr	r3, [pc, #8]	; (b6a7c <inet_inet_ntop+0xc>)
   b6a74:	681b      	ldr	r3, [r3, #0]
   b6a76:	695b      	ldr	r3, [r3, #20]
   b6a78:	9301      	str	r3, [sp, #4]
   b6a7a:	bd08      	pop	{r3, pc}
   b6a7c:	00030264 	.word	0x00030264

000b6a80 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6a80:	b508      	push	{r3, lr}
   b6a82:	4b02      	ldr	r3, [pc, #8]	; (b6a8c <inet_htonl+0xc>)
   b6a84:	681b      	ldr	r3, [r3, #0]
   b6a86:	6a1b      	ldr	r3, [r3, #32]
   b6a88:	9301      	str	r3, [sp, #4]
   b6a8a:	bd08      	pop	{r3, pc}
   b6a8c:	00030264 	.word	0x00030264

000b6a90 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6a90:	b508      	push	{r3, lr}
   b6a92:	4b02      	ldr	r3, [pc, #8]	; (b6a9c <inet_htons+0xc>)
   b6a94:	681b      	ldr	r3, [r3, #0]
   b6a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6a98:	9301      	str	r3, [sp, #4]
   b6a9a:	bd08      	pop	{r3, pc}
   b6a9c:	00030264 	.word	0x00030264

000b6aa0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6aa0:	b508      	push	{r3, lr}
   b6aa2:	4b02      	ldr	r3, [pc, #8]	; (b6aac <netdb_freeaddrinfo+0xc>)
   b6aa4:	681b      	ldr	r3, [r3, #0]
   b6aa6:	689b      	ldr	r3, [r3, #8]
   b6aa8:	9301      	str	r3, [sp, #4]
   b6aaa:	bd08      	pop	{r3, pc}
   b6aac:	00030268 	.word	0x00030268

000b6ab0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6ab0:	b508      	push	{r3, lr}
   b6ab2:	4b02      	ldr	r3, [pc, #8]	; (b6abc <netdb_getaddrinfo+0xc>)
   b6ab4:	681b      	ldr	r3, [r3, #0]
   b6ab6:	68db      	ldr	r3, [r3, #12]
   b6ab8:	9301      	str	r3, [sp, #4]
   b6aba:	bd08      	pop	{r3, pc}
   b6abc:	00030268 	.word	0x00030268

000b6ac0 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6ac0:	b508      	push	{r3, lr}
   b6ac2:	4b02      	ldr	r3, [pc, #8]	; (b6acc <sock_setsockopt+0xc>)
   b6ac4:	681b      	ldr	r3, [r3, #0]
   b6ac6:	699b      	ldr	r3, [r3, #24]
   b6ac8:	9301      	str	r3, [sp, #4]
   b6aca:	bd08      	pop	{r3, pc}
   b6acc:	00030238 	.word	0x00030238

000b6ad0 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6ad0:	b508      	push	{r3, lr}
   b6ad2:	4b02      	ldr	r3, [pc, #8]	; (b6adc <sock_close+0xc>)
   b6ad4:	681b      	ldr	r3, [r3, #0]
   b6ad6:	69db      	ldr	r3, [r3, #28]
   b6ad8:	9301      	str	r3, [sp, #4]
   b6ada:	bd08      	pop	{r3, pc}
   b6adc:	00030238 	.word	0x00030238

000b6ae0 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6ae0:	b508      	push	{r3, lr}
   b6ae2:	4b02      	ldr	r3, [pc, #8]	; (b6aec <sock_connect+0xc>)
   b6ae4:	681b      	ldr	r3, [r3, #0]
   b6ae6:	6a1b      	ldr	r3, [r3, #32]
   b6ae8:	9301      	str	r3, [sp, #4]
   b6aea:	bd08      	pop	{r3, pc}
   b6aec:	00030238 	.word	0x00030238

000b6af0 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6af0:	b508      	push	{r3, lr}
   b6af2:	4b02      	ldr	r3, [pc, #8]	; (b6afc <sock_recv+0xc>)
   b6af4:	681b      	ldr	r3, [r3, #0]
   b6af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6af8:	9301      	str	r3, [sp, #4]
   b6afa:	bd08      	pop	{r3, pc}
   b6afc:	00030238 	.word	0x00030238

000b6b00 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6b00:	b508      	push	{r3, lr}
   b6b02:	4b02      	ldr	r3, [pc, #8]	; (b6b0c <sock_send+0xc>)
   b6b04:	681b      	ldr	r3, [r3, #0]
   b6b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6b08:	9301      	str	r3, [sp, #4]
   b6b0a:	bd08      	pop	{r3, pc}
   b6b0c:	00030238 	.word	0x00030238

000b6b10 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6b10:	b508      	push	{r3, lr}
   b6b12:	4b02      	ldr	r3, [pc, #8]	; (b6b1c <sock_socket+0xc>)
   b6b14:	681b      	ldr	r3, [r3, #0]
   b6b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6b18:	9301      	str	r3, [sp, #4]
   b6b1a:	bd08      	pop	{r3, pc}
   b6b1c:	00030238 	.word	0x00030238

000b6b20 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6b20:	b508      	push	{r3, lr}
   b6b22:	4b02      	ldr	r3, [pc, #8]	; (b6b2c <hal_spi_begin+0xc>)
   b6b24:	681b      	ldr	r3, [r3, #0]
   b6b26:	681b      	ldr	r3, [r3, #0]
   b6b28:	9301      	str	r3, [sp, #4]
   b6b2a:	bd08      	pop	{r3, pc}
   b6b2c:	00030230 	.word	0x00030230

000b6b30 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6b30:	b508      	push	{r3, lr}
   b6b32:	4b02      	ldr	r3, [pc, #8]	; (b6b3c <hal_spi_transfer+0xc>)
   b6b34:	681b      	ldr	r3, [r3, #0]
   b6b36:	695b      	ldr	r3, [r3, #20]
   b6b38:	9301      	str	r3, [sp, #4]
   b6b3a:	bd08      	pop	{r3, pc}
   b6b3c:	00030230 	.word	0x00030230

000b6b40 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6b40:	b508      	push	{r3, lr}
   b6b42:	4b02      	ldr	r3, [pc, #8]	; (b6b4c <hal_spi_init+0xc>)
   b6b44:	681b      	ldr	r3, [r3, #0]
   b6b46:	69db      	ldr	r3, [r3, #28]
   b6b48:	9301      	str	r3, [sp, #4]
   b6b4a:	bd08      	pop	{r3, pc}
   b6b4c:	00030230 	.word	0x00030230

000b6b50 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6b50:	b508      	push	{r3, lr}
   b6b52:	4b02      	ldr	r3, [pc, #8]	; (b6b5c <hal_spi_is_enabled+0xc>)
   b6b54:	681b      	ldr	r3, [r3, #0]
   b6b56:	6a1b      	ldr	r3, [r3, #32]
   b6b58:	9301      	str	r3, [sp, #4]
   b6b5a:	bd08      	pop	{r3, pc}
   b6b5c:	00030230 	.word	0x00030230

000b6b60 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6b60:	b508      	push	{r3, lr}
   b6b62:	4b02      	ldr	r3, [pc, #8]	; (b6b6c <hal_spi_info+0xc>)
   b6b64:	681b      	ldr	r3, [r3, #0]
   b6b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6b68:	9301      	str	r3, [sp, #4]
   b6b6a:	bd08      	pop	{r3, pc}
   b6b6c:	00030230 	.word	0x00030230

000b6b70 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6b70:	b508      	push	{r3, lr}
   b6b72:	4b02      	ldr	r3, [pc, #8]	; (b6b7c <hal_spi_set_settings+0xc>)
   b6b74:	681b      	ldr	r3, [r3, #0]
   b6b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6b78:	9301      	str	r3, [sp, #4]
   b6b7a:	bd08      	pop	{r3, pc}
   b6b7c:	00030230 	.word	0x00030230

000b6b80 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6b80:	b508      	push	{r3, lr}
   b6b82:	4b02      	ldr	r3, [pc, #8]	; (b6b8c <hal_spi_acquire+0xc>)
   b6b84:	681b      	ldr	r3, [r3, #0]
   b6b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6b88:	9301      	str	r3, [sp, #4]
   b6b8a:	bd08      	pop	{r3, pc}
   b6b8c:	00030230 	.word	0x00030230

000b6b90 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6b90:	b508      	push	{r3, lr}
   b6b92:	4b02      	ldr	r3, [pc, #8]	; (b6b9c <hal_spi_release+0xc>)
   b6b94:	681b      	ldr	r3, [r3, #0]
   b6b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6b98:	9301      	str	r3, [sp, #4]
   b6b9a:	bd08      	pop	{r3, pc}
   b6b9c:	00030230 	.word	0x00030230

000b6ba0 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6ba0:	b508      	push	{r3, lr}
   b6ba2:	4b02      	ldr	r3, [pc, #8]	; (b6bac <hal_usart_write+0xc>)
   b6ba4:	681b      	ldr	r3, [r3, #0]
   b6ba6:	68db      	ldr	r3, [r3, #12]
   b6ba8:	9301      	str	r3, [sp, #4]
   b6baa:	bd08      	pop	{r3, pc}
   b6bac:	0003023c 	.word	0x0003023c

000b6bb0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6bb0:	b508      	push	{r3, lr}
   b6bb2:	4b02      	ldr	r3, [pc, #8]	; (b6bbc <hal_usart_available+0xc>)
   b6bb4:	681b      	ldr	r3, [r3, #0]
   b6bb6:	691b      	ldr	r3, [r3, #16]
   b6bb8:	9301      	str	r3, [sp, #4]
   b6bba:	bd08      	pop	{r3, pc}
   b6bbc:	0003023c 	.word	0x0003023c

000b6bc0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b6bc0:	b508      	push	{r3, lr}
   b6bc2:	4b02      	ldr	r3, [pc, #8]	; (b6bcc <hal_usart_read+0xc>)
   b6bc4:	681b      	ldr	r3, [r3, #0]
   b6bc6:	695b      	ldr	r3, [r3, #20]
   b6bc8:	9301      	str	r3, [sp, #4]
   b6bca:	bd08      	pop	{r3, pc}
   b6bcc:	0003023c 	.word	0x0003023c

000b6bd0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b6bd0:	b508      	push	{r3, lr}
   b6bd2:	4b02      	ldr	r3, [pc, #8]	; (b6bdc <hal_usart_peek+0xc>)
   b6bd4:	681b      	ldr	r3, [r3, #0]
   b6bd6:	699b      	ldr	r3, [r3, #24]
   b6bd8:	9301      	str	r3, [sp, #4]
   b6bda:	bd08      	pop	{r3, pc}
   b6bdc:	0003023c 	.word	0x0003023c

000b6be0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b6be0:	b508      	push	{r3, lr}
   b6be2:	4b02      	ldr	r3, [pc, #8]	; (b6bec <hal_usart_flush+0xc>)
   b6be4:	681b      	ldr	r3, [r3, #0]
   b6be6:	69db      	ldr	r3, [r3, #28]
   b6be8:	9301      	str	r3, [sp, #4]
   b6bea:	bd08      	pop	{r3, pc}
   b6bec:	0003023c 	.word	0x0003023c

000b6bf0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b6bf0:	b508      	push	{r3, lr}
   b6bf2:	4b02      	ldr	r3, [pc, #8]	; (b6bfc <hal_usart_is_enabled+0xc>)
   b6bf4:	681b      	ldr	r3, [r3, #0]
   b6bf6:	6a1b      	ldr	r3, [r3, #32]
   b6bf8:	9301      	str	r3, [sp, #4]
   b6bfa:	bd08      	pop	{r3, pc}
   b6bfc:	0003023c 	.word	0x0003023c

000b6c00 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6c00:	b508      	push	{r3, lr}
   b6c02:	4b02      	ldr	r3, [pc, #8]	; (b6c0c <hal_usart_available_data_for_write+0xc>)
   b6c04:	681b      	ldr	r3, [r3, #0]
   b6c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6c08:	9301      	str	r3, [sp, #4]
   b6c0a:	bd08      	pop	{r3, pc}
   b6c0c:	0003023c 	.word	0x0003023c

000b6c10 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6c10:	b508      	push	{r3, lr}
   b6c12:	4b02      	ldr	r3, [pc, #8]	; (b6c1c <hal_usart_init_ex+0xc>)
   b6c14:	681b      	ldr	r3, [r3, #0]
   b6c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6c18:	9301      	str	r3, [sp, #4]
   b6c1a:	bd08      	pop	{r3, pc}
   b6c1c:	0003023c 	.word	0x0003023c

000b6c20 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6c20:	b508      	push	{r3, lr}
   b6c22:	4b02      	ldr	r3, [pc, #8]	; (b6c2c <HAL_USB_USART_Init+0xc>)
   b6c24:	681b      	ldr	r3, [r3, #0]
   b6c26:	681b      	ldr	r3, [r3, #0]
   b6c28:	9301      	str	r3, [sp, #4]
   b6c2a:	bd08      	pop	{r3, pc}
   b6c2c:	0003024c 	.word	0x0003024c

000b6c30 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6c30:	b508      	push	{r3, lr}
   b6c32:	4b02      	ldr	r3, [pc, #8]	; (b6c3c <HAL_USB_USART_Begin+0xc>)
   b6c34:	681b      	ldr	r3, [r3, #0]
   b6c36:	685b      	ldr	r3, [r3, #4]
   b6c38:	9301      	str	r3, [sp, #4]
   b6c3a:	bd08      	pop	{r3, pc}
   b6c3c:	0003024c 	.word	0x0003024c

000b6c40 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6c40:	b508      	push	{r3, lr}
   b6c42:	4b02      	ldr	r3, [pc, #8]	; (b6c4c <HAL_USB_USART_Available_Data+0xc>)
   b6c44:	681b      	ldr	r3, [r3, #0]
   b6c46:	691b      	ldr	r3, [r3, #16]
   b6c48:	9301      	str	r3, [sp, #4]
   b6c4a:	bd08      	pop	{r3, pc}
   b6c4c:	0003024c 	.word	0x0003024c

000b6c50 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6c50:	b508      	push	{r3, lr}
   b6c52:	4b02      	ldr	r3, [pc, #8]	; (b6c5c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6c54:	681b      	ldr	r3, [r3, #0]
   b6c56:	695b      	ldr	r3, [r3, #20]
   b6c58:	9301      	str	r3, [sp, #4]
   b6c5a:	bd08      	pop	{r3, pc}
   b6c5c:	0003024c 	.word	0x0003024c

000b6c60 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6c60:	b508      	push	{r3, lr}
   b6c62:	4b02      	ldr	r3, [pc, #8]	; (b6c6c <HAL_USB_USART_Receive_Data+0xc>)
   b6c64:	681b      	ldr	r3, [r3, #0]
   b6c66:	699b      	ldr	r3, [r3, #24]
   b6c68:	9301      	str	r3, [sp, #4]
   b6c6a:	bd08      	pop	{r3, pc}
   b6c6c:	0003024c 	.word	0x0003024c

000b6c70 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6c70:	b508      	push	{r3, lr}
   b6c72:	4b02      	ldr	r3, [pc, #8]	; (b6c7c <HAL_USB_USART_Send_Data+0xc>)
   b6c74:	681b      	ldr	r3, [r3, #0]
   b6c76:	69db      	ldr	r3, [r3, #28]
   b6c78:	9301      	str	r3, [sp, #4]
   b6c7a:	bd08      	pop	{r3, pc}
   b6c7c:	0003024c 	.word	0x0003024c

000b6c80 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6c80:	b508      	push	{r3, lr}
   b6c82:	4b02      	ldr	r3, [pc, #8]	; (b6c8c <HAL_USB_USART_Flush_Data+0xc>)
   b6c84:	681b      	ldr	r3, [r3, #0]
   b6c86:	6a1b      	ldr	r3, [r3, #32]
   b6c88:	9301      	str	r3, [sp, #4]
   b6c8a:	bd08      	pop	{r3, pc}
   b6c8c:	0003024c 	.word	0x0003024c

000b6c90 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b6c90:	b508      	push	{r3, lr}
   b6c92:	4b02      	ldr	r3, [pc, #8]	; (b6c9c <panic_+0xc>)
   b6c94:	681b      	ldr	r3, [r3, #0]
   b6c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6c98:	9301      	str	r3, [sp, #4]
   b6c9a:	bd08      	pop	{r3, pc}
   b6c9c:	00030260 	.word	0x00030260

000b6ca0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b6ca0:	b508      	push	{r3, lr}
   b6ca2:	4b02      	ldr	r3, [pc, #8]	; (b6cac <log_message+0xc>)
   b6ca4:	681b      	ldr	r3, [r3, #0]
   b6ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6ca8:	9301      	str	r3, [sp, #4]
   b6caa:	bd08      	pop	{r3, pc}
   b6cac:	00030260 	.word	0x00030260

000b6cb0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b6cb0:	b508      	push	{r3, lr}
   b6cb2:	4b02      	ldr	r3, [pc, #8]	; (b6cbc <set_system_mode+0xc>)
   b6cb4:	681b      	ldr	r3, [r3, #0]
   b6cb6:	685b      	ldr	r3, [r3, #4]
   b6cb8:	9301      	str	r3, [sp, #4]
   b6cba:	bd08      	pop	{r3, pc}
   b6cbc:	00030220 	.word	0x00030220

000b6cc0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b6cc0:	b508      	push	{r3, lr}
   b6cc2:	4b02      	ldr	r3, [pc, #8]	; (b6ccc <system_delay_ms+0xc>)
   b6cc4:	681b      	ldr	r3, [r3, #0]
   b6cc6:	695b      	ldr	r3, [r3, #20]
   b6cc8:	9301      	str	r3, [sp, #4]
   b6cca:	bd08      	pop	{r3, pc}
   b6ccc:	00030220 	.word	0x00030220

000b6cd0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b6cd0:	b508      	push	{r3, lr}
   b6cd2:	4b02      	ldr	r3, [pc, #8]	; (b6cdc <system_thread_set_state+0xc>)
   b6cd4:	681b      	ldr	r3, [r3, #0]
   b6cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6cd8:	9301      	str	r3, [sp, #4]
   b6cda:	bd08      	pop	{r3, pc}
   b6cdc:	00030220 	.word	0x00030220

000b6ce0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b6ce0:	b508      	push	{r3, lr}
   b6ce2:	4b03      	ldr	r3, [pc, #12]	; (b6cf0 <system_ctrl_set_app_request_handler+0x10>)
   b6ce4:	681b      	ldr	r3, [r3, #0]
   b6ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b6cea:	9301      	str	r3, [sp, #4]
   b6cec:	bd08      	pop	{r3, pc}
   b6cee:	0000      	.short	0x0000
   b6cf0:	00030220 	.word	0x00030220

000b6cf4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b6cf4:	b508      	push	{r3, lr}
   b6cf6:	4b03      	ldr	r3, [pc, #12]	; (b6d04 <system_ctrl_set_result+0x10>)
   b6cf8:	681b      	ldr	r3, [r3, #0]
   b6cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b6cfe:	9301      	str	r3, [sp, #4]
   b6d00:	bd08      	pop	{r3, pc}
   b6d02:	0000      	.short	0x0000
   b6d04:	00030220 	.word	0x00030220

000b6d08 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b6d08:	b508      	push	{r3, lr}
   b6d0a:	4b02      	ldr	r3, [pc, #8]	; (b6d14 <spark_process+0xc>)
   b6d0c:	681b      	ldr	r3, [r3, #0]
   b6d0e:	689b      	ldr	r3, [r3, #8]
   b6d10:	9301      	str	r3, [sp, #4]
   b6d12:	bd08      	pop	{r3, pc}
   b6d14:	00030244 	.word	0x00030244

000b6d18 <spark_deviceID>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b6d18:	b508      	push	{r3, lr}
   b6d1a:	4b02      	ldr	r3, [pc, #8]	; (b6d24 <spark_deviceID+0xc>)
   b6d1c:	681b      	ldr	r3, [r3, #0]
   b6d1e:	69db      	ldr	r3, [r3, #28]
   b6d20:	9301      	str	r3, [sp, #4]
   b6d22:	bd08      	pop	{r3, pc}
   b6d24:	00030244 	.word	0x00030244

000b6d28 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b6d28:	b508      	push	{r3, lr}
   b6d2a:	4b02      	ldr	r3, [pc, #8]	; (b6d34 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6d2c:	681b      	ldr	r3, [r3, #0]
   b6d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6d30:	9301      	str	r3, [sp, #4]
   b6d32:	bd08      	pop	{r3, pc}
   b6d34:	00030244 	.word	0x00030244

000b6d38 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b6d38:	b508      	push	{r3, lr}
   b6d3a:	4b02      	ldr	r3, [pc, #8]	; (b6d44 <network_connect+0xc>)
   b6d3c:	681b      	ldr	r3, [r3, #0]
   b6d3e:	685b      	ldr	r3, [r3, #4]
   b6d40:	9301      	str	r3, [sp, #4]
   b6d42:	bd08      	pop	{r3, pc}
   b6d44:	00030240 	.word	0x00030240

000b6d48 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b6d48:	b508      	push	{r3, lr}
   b6d4a:	4b02      	ldr	r3, [pc, #8]	; (b6d54 <network_connecting+0xc>)
   b6d4c:	681b      	ldr	r3, [r3, #0]
   b6d4e:	689b      	ldr	r3, [r3, #8]
   b6d50:	9301      	str	r3, [sp, #4]
   b6d52:	bd08      	pop	{r3, pc}
   b6d54:	00030240 	.word	0x00030240

000b6d58 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b6d58:	b508      	push	{r3, lr}
   b6d5a:	4b02      	ldr	r3, [pc, #8]	; (b6d64 <network_disconnect+0xc>)
   b6d5c:	681b      	ldr	r3, [r3, #0]
   b6d5e:	68db      	ldr	r3, [r3, #12]
   b6d60:	9301      	str	r3, [sp, #4]
   b6d62:	bd08      	pop	{r3, pc}
   b6d64:	00030240 	.word	0x00030240

000b6d68 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b6d68:	b508      	push	{r3, lr}
   b6d6a:	4b02      	ldr	r3, [pc, #8]	; (b6d74 <network_ready+0xc>)
   b6d6c:	681b      	ldr	r3, [r3, #0]
   b6d6e:	691b      	ldr	r3, [r3, #16]
   b6d70:	9301      	str	r3, [sp, #4]
   b6d72:	bd08      	pop	{r3, pc}
   b6d74:	00030240 	.word	0x00030240

000b6d78 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b6d78:	b508      	push	{r3, lr}
   b6d7a:	4b02      	ldr	r3, [pc, #8]	; (b6d84 <network_on+0xc>)
   b6d7c:	681b      	ldr	r3, [r3, #0]
   b6d7e:	695b      	ldr	r3, [r3, #20]
   b6d80:	9301      	str	r3, [sp, #4]
   b6d82:	bd08      	pop	{r3, pc}
   b6d84:	00030240 	.word	0x00030240

000b6d88 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b6d88:	b508      	push	{r3, lr}
   b6d8a:	4b02      	ldr	r3, [pc, #8]	; (b6d94 <network_off+0xc>)
   b6d8c:	681b      	ldr	r3, [r3, #0]
   b6d8e:	699b      	ldr	r3, [r3, #24]
   b6d90:	9301      	str	r3, [sp, #4]
   b6d92:	bd08      	pop	{r3, pc}
   b6d94:	00030240 	.word	0x00030240

000b6d98 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b6d98:	b508      	push	{r3, lr}
   b6d9a:	4b02      	ldr	r3, [pc, #8]	; (b6da4 <network_listen+0xc>)
   b6d9c:	681b      	ldr	r3, [r3, #0]
   b6d9e:	69db      	ldr	r3, [r3, #28]
   b6da0:	9301      	str	r3, [sp, #4]
   b6da2:	bd08      	pop	{r3, pc}
   b6da4:	00030240 	.word	0x00030240

000b6da8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b6da8:	b508      	push	{r3, lr}
   b6daa:	4b02      	ldr	r3, [pc, #8]	; (b6db4 <network_listening+0xc>)
   b6dac:	681b      	ldr	r3, [r3, #0]
   b6dae:	6a1b      	ldr	r3, [r3, #32]
   b6db0:	9301      	str	r3, [sp, #4]
   b6db2:	bd08      	pop	{r3, pc}
   b6db4:	00030240 	.word	0x00030240

000b6db8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b6db8:	b508      	push	{r3, lr}
   b6dba:	4b02      	ldr	r3, [pc, #8]	; (b6dc4 <network_set_listen_timeout+0xc>)
   b6dbc:	681b      	ldr	r3, [r3, #0]
   b6dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6dc0:	9301      	str	r3, [sp, #4]
   b6dc2:	bd08      	pop	{r3, pc}
   b6dc4:	00030240 	.word	0x00030240

000b6dc8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b6dc8:	b508      	push	{r3, lr}
   b6dca:	4b02      	ldr	r3, [pc, #8]	; (b6dd4 <network_get_listen_timeout+0xc>)
   b6dcc:	681b      	ldr	r3, [r3, #0]
   b6dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6dd0:	9301      	str	r3, [sp, #4]
   b6dd2:	bd08      	pop	{r3, pc}
   b6dd4:	00030240 	.word	0x00030240

000b6dd8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b6dd8:	b508      	push	{r3, lr}
   b6dda:	4b02      	ldr	r3, [pc, #8]	; (b6de4 <network_is_on+0xc>)
   b6ddc:	681b      	ldr	r3, [r3, #0]
   b6dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6de0:	9301      	str	r3, [sp, #4]
   b6de2:	bd08      	pop	{r3, pc}
   b6de4:	00030240 	.word	0x00030240

000b6de8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b6de8:	b508      	push	{r3, lr}
   b6dea:	4b02      	ldr	r3, [pc, #8]	; (b6df4 <network_is_off+0xc>)
   b6dec:	681b      	ldr	r3, [r3, #0]
   b6dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6df0:	9301      	str	r3, [sp, #4]
   b6df2:	bd08      	pop	{r3, pc}
   b6df4:	00030240 	.word	0x00030240

000b6df8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b6df8:	b508      	push	{r3, lr}
   b6dfa:	4b02      	ldr	r3, [pc, #8]	; (b6e04 <malloc+0xc>)
   b6dfc:	681b      	ldr	r3, [r3, #0]
   b6dfe:	681b      	ldr	r3, [r3, #0]
   b6e00:	9301      	str	r3, [sp, #4]
   b6e02:	bd08      	pop	{r3, pc}
   b6e04:	0003021c 	.word	0x0003021c

000b6e08 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b6e08:	b508      	push	{r3, lr}
   b6e0a:	4b02      	ldr	r3, [pc, #8]	; (b6e14 <free+0xc>)
   b6e0c:	681b      	ldr	r3, [r3, #0]
   b6e0e:	685b      	ldr	r3, [r3, #4]
   b6e10:	9301      	str	r3, [sp, #4]
   b6e12:	bd08      	pop	{r3, pc}
   b6e14:	0003021c 	.word	0x0003021c

000b6e18 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b6e18:	b508      	push	{r3, lr}
   b6e1a:	4b02      	ldr	r3, [pc, #8]	; (b6e24 <realloc+0xc>)
   b6e1c:	681b      	ldr	r3, [r3, #0]
   b6e1e:	689b      	ldr	r3, [r3, #8]
   b6e20:	9301      	str	r3, [sp, #4]
   b6e22:	bd08      	pop	{r3, pc}
   b6e24:	0003021c 	.word	0x0003021c

000b6e28 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b6e28:	b508      	push	{r3, lr}
   b6e2a:	4b02      	ldr	r3, [pc, #8]	; (b6e34 <snprintf+0xc>)
   b6e2c:	681b      	ldr	r3, [r3, #0]
   b6e2e:	69db      	ldr	r3, [r3, #28]
   b6e30:	9301      	str	r3, [sp, #4]
   b6e32:	bd08      	pop	{r3, pc}
   b6e34:	0003021c 	.word	0x0003021c

000b6e38 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b6e38:	b508      	push	{r3, lr}
   b6e3a:	4b02      	ldr	r3, [pc, #8]	; (b6e44 <vsnprintf+0xc>)
   b6e3c:	681b      	ldr	r3, [r3, #0]
   b6e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6e40:	9301      	str	r3, [sp, #4]
   b6e42:	bd08      	pop	{r3, pc}
   b6e44:	0003021c 	.word	0x0003021c

000b6e48 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b6e48:	b508      	push	{r3, lr}
   b6e4a:	4b02      	ldr	r3, [pc, #8]	; (b6e54 <__errno+0xc>)
   b6e4c:	681b      	ldr	r3, [r3, #0]
   b6e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6e50:	9301      	str	r3, [sp, #4]
   b6e52:	bd08      	pop	{r3, pc}
   b6e54:	0003021c 	.word	0x0003021c

000b6e58 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b6e58:	b508      	push	{r3, lr}
   b6e5a:	4b02      	ldr	r3, [pc, #8]	; (b6e64 <__assert_func+0xc>)
   b6e5c:	681b      	ldr	r3, [r3, #0]
   b6e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6e60:	9301      	str	r3, [sp, #4]
   b6e62:	bd08      	pop	{r3, pc}
   b6e64:	0003021c 	.word	0x0003021c

000b6e68 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b6e68:	b508      	push	{r3, lr}
   b6e6a:	4b02      	ldr	r3, [pc, #8]	; (b6e74 <newlib_impure_ptr_callback+0xc>)
   b6e6c:	681b      	ldr	r3, [r3, #0]
   b6e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6e70:	9301      	str	r3, [sp, #4]
   b6e72:	bd08      	pop	{r3, pc}
   b6e74:	0003021c 	.word	0x0003021c

000b6e78 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b6e78:	2100      	movs	r1, #0
   b6e7a:	f7ff bf21 	b.w	b6cc0 <system_delay_ms>
	...

000b6e80 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6e80:	4802      	ldr	r0, [pc, #8]	; (b6e8c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6e82:	2300      	movs	r3, #0
   b6e84:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b6e86:	f7ff bd33 	b.w	b68f0 <os_mutex_recursive_create>
   b6e8a:	bf00      	nop
   b6e8c:	2003e6c4 	.word	0x2003e6c4

000b6e90 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6e90:	2200      	movs	r2, #0
   b6e92:	6840      	ldr	r0, [r0, #4]
   b6e94:	4611      	mov	r1, r2
   b6e96:	f7ff bf87 	b.w	b6da8 <network_listening>

000b6e9a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6e9a:	2200      	movs	r2, #0
   b6e9c:	6840      	ldr	r0, [r0, #4]
   b6e9e:	4611      	mov	r1, r2
   b6ea0:	f7ff bf92 	b.w	b6dc8 <network_get_listen_timeout>

000b6ea4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6ea4:	6840      	ldr	r0, [r0, #4]
   b6ea6:	2200      	movs	r2, #0
   b6ea8:	f7ff bf86 	b.w	b6db8 <network_set_listen_timeout>

000b6eac <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6eac:	6840      	ldr	r0, [r0, #4]
   b6eae:	2200      	movs	r2, #0
   b6eb0:	f081 0101 	eor.w	r1, r1, #1
   b6eb4:	f7ff bf70 	b.w	b6d98 <network_listen>

000b6eb8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b6eb8:	2300      	movs	r3, #0
   b6eba:	6840      	ldr	r0, [r0, #4]
   b6ebc:	461a      	mov	r2, r3
   b6ebe:	4619      	mov	r1, r3
   b6ec0:	f7ff bf62 	b.w	b6d88 <network_off>

000b6ec4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6ec4:	2300      	movs	r3, #0
   b6ec6:	6840      	ldr	r0, [r0, #4]
   b6ec8:	461a      	mov	r2, r3
   b6eca:	4619      	mov	r1, r3
   b6ecc:	f7ff bf54 	b.w	b6d78 <network_on>

000b6ed0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6ed0:	2200      	movs	r2, #0
   b6ed2:	6840      	ldr	r0, [r0, #4]
   b6ed4:	4611      	mov	r1, r2
   b6ed6:	f7ff bf47 	b.w	b6d68 <network_ready>

000b6eda <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6eda:	2200      	movs	r2, #0
   b6edc:	6840      	ldr	r0, [r0, #4]
   b6ede:	4611      	mov	r1, r2
   b6ee0:	f7ff bf32 	b.w	b6d48 <network_connecting>

000b6ee4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6ee4:	6840      	ldr	r0, [r0, #4]
   b6ee6:	2200      	movs	r2, #0
   b6ee8:	2102      	movs	r1, #2
   b6eea:	f7ff bf35 	b.w	b6d58 <network_disconnect>

000b6eee <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6eee:	2300      	movs	r3, #0
   b6ef0:	6840      	ldr	r0, [r0, #4]
   b6ef2:	461a      	mov	r2, r3
   b6ef4:	f7ff bf20 	b.w	b6d38 <network_connect>

000b6ef8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b6ef8:	4b02      	ldr	r3, [pc, #8]	; (b6f04 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b6efa:	2203      	movs	r2, #3
   b6efc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b6efe:	4a02      	ldr	r2, [pc, #8]	; (b6f08 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b6f00:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b6f02:	4770      	bx	lr
   b6f04:	2003e6c8 	.word	0x2003e6c8
   b6f08:	000b97c0 	.word	0x000b97c0

000b6f0c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b6f0c:	4770      	bx	lr

000b6f0e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b6f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6f10:	4606      	mov	r6, r0
   b6f12:	4615      	mov	r5, r2
   b6f14:	460c      	mov	r4, r1
   b6f16:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6f18:	42bc      	cmp	r4, r7
   b6f1a:	d006      	beq.n	b6f2a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6f1c:	6833      	ldr	r3, [r6, #0]
   b6f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b6f22:	689b      	ldr	r3, [r3, #8]
   b6f24:	4630      	mov	r0, r6
   b6f26:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6f28:	e7f6      	b.n	b6f18 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6f2a:	4628      	mov	r0, r5
   b6f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6f2e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b6f2e:	7c00      	ldrb	r0, [r0, #16]
   b6f30:	2200      	movs	r2, #0
   b6f32:	f7ff bd5d 	b.w	b69f0 <hal_i2c_write>

000b6f36 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6f36:	7c00      	ldrb	r0, [r0, #16]
   b6f38:	2100      	movs	r1, #0
   b6f3a:	f7ff bd61 	b.w	b6a00 <hal_i2c_available>

000b6f3e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b6f3e:	7c00      	ldrb	r0, [r0, #16]
   b6f40:	2100      	movs	r1, #0
   b6f42:	f7ff bd65 	b.w	b6a10 <hal_i2c_read>

000b6f46 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6f46:	7c00      	ldrb	r0, [r0, #16]
   b6f48:	2100      	movs	r1, #0
   b6f4a:	f7ff bd69 	b.w	b6a20 <hal_i2c_peek>

000b6f4e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6f4e:	7c00      	ldrb	r0, [r0, #16]
   b6f50:	2100      	movs	r1, #0
   b6f52:	f7ff bd6d 	b.w	b6a30 <hal_i2c_flush>

000b6f56 <_ZN7TwoWireD0Ev>:
   b6f56:	b510      	push	{r4, lr}
   b6f58:	2114      	movs	r1, #20
   b6f5a:	4604      	mov	r4, r0
   b6f5c:	f7fd f89f 	bl	b409e <_ZdlPvj>
   b6f60:	4620      	mov	r0, r4
   b6f62:	bd10      	pop	{r4, pc}

000b6f64 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6f64:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b6f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6f6a:	4604      	mov	r4, r0
   b6f6c:	4608      	mov	r0, r1
   b6f6e:	2100      	movs	r1, #0
   b6f70:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6f74:	4b03      	ldr	r3, [pc, #12]	; (b6f84 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b6f76:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b6f78:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b6f7a:	4611      	mov	r1, r2
   b6f7c:	f7ff fd68 	bl	b6a50 <hal_i2c_init>
}
   b6f80:	4620      	mov	r0, r4
   b6f82:	bd10      	pop	{r4, pc}
   b6f84:	000b97fc 	.word	0x000b97fc

000b6f88 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b6f88:	7c00      	ldrb	r0, [r0, #16]
   b6f8a:	2200      	movs	r2, #0
   b6f8c:	f7ff bd10 	b.w	b69b0 <hal_i2c_set_speed>

000b6f90 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6f90:	2300      	movs	r3, #0
   b6f92:	7c00      	ldrb	r0, [r0, #16]
   b6f94:	461a      	mov	r2, r3
   b6f96:	4619      	mov	r1, r3
   b6f98:	f7ff bd12 	b.w	b69c0 <hal_i2c_begin>

000b6f9c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6f9c:	7c00      	ldrb	r0, [r0, #16]
   b6f9e:	2200      	movs	r2, #0
   b6fa0:	f7ff bd16 	b.w	b69d0 <hal_i2c_begin_transmission>

000b6fa4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b6fa4:	b2c9      	uxtb	r1, r1
   b6fa6:	f7ff bff9 	b.w	b6f9c <_ZN7TwoWire17beginTransmissionEh>

000b6faa <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6faa:	7c00      	ldrb	r0, [r0, #16]
   b6fac:	2200      	movs	r2, #0
   b6fae:	f7ff bd17 	b.w	b69e0 <hal_i2c_end_transmission>

000b6fb2 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b6fb2:	2101      	movs	r1, #1
   b6fb4:	f7ff bff9 	b.w	b6faa <_ZN7TwoWire15endTransmissionEh>

000b6fb8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b6fb8:	4770      	bx	lr

000b6fba <_ZN9IPAddressD0Ev>:
   b6fba:	b510      	push	{r4, lr}
   b6fbc:	2118      	movs	r1, #24
   b6fbe:	4604      	mov	r4, r0
   b6fc0:	f7fd f86d 	bl	b409e <_ZdlPvj>
   b6fc4:	4620      	mov	r0, r4
   b6fc6:	bd10      	pop	{r4, pc}

000b6fc8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b6fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b6fca:	7d03      	ldrb	r3, [r0, #20]
   b6fcc:	2b06      	cmp	r3, #6
{
   b6fce:	b08d      	sub	sp, #52	; 0x34
   b6fd0:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6fd2:	f100 0704 	add.w	r7, r0, #4
   b6fd6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b6fda:	d012      	beq.n	b7002 <_ZNK9IPAddress7printToER5Print+0x3a>
   b6fdc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6fe0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6fe4:	220a      	movs	r2, #10
   b6fe6:	4630      	mov	r0, r6
   b6fe8:	f000 f97f 	bl	b72ea <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6fec:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6fee:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6ff0:	d019      	beq.n	b7026 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6ff2:	2c00      	cmp	r4, #0
   b6ff4:	d0f4      	beq.n	b6fe0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6ff6:	212e      	movs	r1, #46	; 0x2e
   b6ff8:	4630      	mov	r0, r6
   b6ffa:	f000 f95d 	bl	b72b8 <_ZN5Print5printEc>
   b6ffe:	4404      	add	r4, r0
   b7000:	e7ee      	b.n	b6fe0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7002:	232f      	movs	r3, #47	; 0x2f
   b7004:	466a      	mov	r2, sp
   b7006:	4639      	mov	r1, r7
   b7008:	200a      	movs	r0, #10
		buf[0] = 0;
   b700a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b700e:	f7ff fd2f 	bl	b6a70 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7012:	4668      	mov	r0, sp
   b7014:	f001 faa0 	bl	b8558 <strlen>
   b7018:	6833      	ldr	r3, [r6, #0]
   b701a:	4602      	mov	r2, r0
   b701c:	68db      	ldr	r3, [r3, #12]
   b701e:	4669      	mov	r1, sp
   b7020:	4630      	mov	r0, r6
   b7022:	4798      	blx	r3
   b7024:	4604      	mov	r4, r0
    }
    return n;
}
   b7026:	4620      	mov	r0, r4
   b7028:	b00d      	add	sp, #52	; 0x34
   b702a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b702c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b702c:	b510      	push	{r4, lr}
   b702e:	4b05      	ldr	r3, [pc, #20]	; (b7044 <_ZN9IPAddressC1Ev+0x18>)
   b7030:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b7032:	2211      	movs	r2, #17
   b7034:	f840 3b04 	str.w	r3, [r0], #4
   b7038:	2100      	movs	r1, #0
   b703a:	f001 fa4d 	bl	b84d8 <memset>
}
   b703e:	4620      	mov	r0, r4
   b7040:	bd10      	pop	{r4, pc}
   b7042:	bf00      	nop
   b7044:	000b9824 	.word	0x000b9824

000b7048 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b7048:	4603      	mov	r3, r0
   b704a:	4a07      	ldr	r2, [pc, #28]	; (b7068 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b704c:	b510      	push	{r4, lr}
   b704e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b7052:	f101 0210 	add.w	r2, r1, #16
   b7056:	f851 4b04 	ldr.w	r4, [r1], #4
   b705a:	f843 4b04 	str.w	r4, [r3], #4
   b705e:	4291      	cmp	r1, r2
   b7060:	d1f9      	bne.n	b7056 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7062:	780a      	ldrb	r2, [r1, #0]
   b7064:	701a      	strb	r2, [r3, #0]
}
   b7066:	bd10      	pop	{r4, pc}
   b7068:	000b9824 	.word	0x000b9824

000b706c <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b706c:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b706e:	2b04      	cmp	r3, #4
   b7070:	d104      	bne.n	b707c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b7072:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7074:	3800      	subs	r0, #0
   b7076:	bf18      	it	ne
   b7078:	2001      	movne	r0, #1
   b707a:	4770      	bx	lr
    } else if (version() == 6) {
   b707c:	2b06      	cmp	r3, #6
   b707e:	d107      	bne.n	b7090 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7080:	6843      	ldr	r3, [r0, #4]
   b7082:	b93b      	cbnz	r3, b7094 <_ZNK9IPAddresscvbEv+0x28>
   b7084:	6883      	ldr	r3, [r0, #8]
   b7086:	b92b      	cbnz	r3, b7094 <_ZNK9IPAddresscvbEv+0x28>
   b7088:	68c3      	ldr	r3, [r0, #12]
   b708a:	b91b      	cbnz	r3, b7094 <_ZNK9IPAddresscvbEv+0x28>
   b708c:	6900      	ldr	r0, [r0, #16]
   b708e:	e7f1      	b.n	b7074 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b7090:	2000      	movs	r0, #0
   b7092:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7094:	2001      	movs	r0, #1
}
   b7096:	4770      	bx	lr

000b7098 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7098:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b709a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b709e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b70a2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b70a6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b70aa:	2304      	movs	r3, #4
   b70ac:	6041      	str	r1, [r0, #4]
   b70ae:	7503      	strb	r3, [r0, #20]
}
   b70b0:	bd10      	pop	{r4, pc}
	...

000b70b4 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   b70b4:	b513      	push	{r0, r1, r4, lr}
   b70b6:	4c04      	ldr	r4, [pc, #16]	; (b70c8 <_ZN9IPAddressC1Ehhhh+0x14>)
   b70b8:	6004      	str	r4, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   b70ba:	f89d 4010 	ldrb.w	r4, [sp, #16]
   b70be:	9400      	str	r4, [sp, #0]
   b70c0:	f7ff ffea 	bl	b7098 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b70c4:	b002      	add	sp, #8
   b70c6:	bd10      	pop	{r4, pc}
   b70c8:	000b9824 	.word	0x000b9824

000b70cc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b70cc:	b507      	push	{r0, r1, r2, lr}
   b70ce:	4b06      	ldr	r3, [pc, #24]	; (b70e8 <_ZN9IPAddressC1EPKh+0x1c>)
   b70d0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b70d2:	78cb      	ldrb	r3, [r1, #3]
   b70d4:	9300      	str	r3, [sp, #0]
   b70d6:	788b      	ldrb	r3, [r1, #2]
   b70d8:	784a      	ldrb	r2, [r1, #1]
   b70da:	7809      	ldrb	r1, [r1, #0]
   b70dc:	f7ff ffdc 	bl	b7098 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b70e0:	b003      	add	sp, #12
   b70e2:	f85d fb04 	ldr.w	pc, [sp], #4
   b70e6:	bf00      	nop
   b70e8:	000b9824 	.word	0x000b9824

000b70ec <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b70ec:	4b01      	ldr	r3, [pc, #4]	; (b70f4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b70ee:	4a02      	ldr	r2, [pc, #8]	; (b70f8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b70f0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b70f2:	4770      	bx	lr
   b70f4:	2003e6d0 	.word	0x2003e6d0
   b70f8:	000b9830 	.word	0x000b9830

000b70fc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b70fc:	2300      	movs	r3, #0
   b70fe:	6840      	ldr	r0, [r0, #4]
   b7100:	461a      	mov	r2, r3
   b7102:	f7ff be19 	b.w	b6d38 <network_connect>

000b7106 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7106:	6840      	ldr	r0, [r0, #4]
   b7108:	2200      	movs	r2, #0
   b710a:	2102      	movs	r1, #2
   b710c:	f7ff be24 	b.w	b6d58 <network_disconnect>

000b7110 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7110:	2200      	movs	r2, #0
   b7112:	6840      	ldr	r0, [r0, #4]
   b7114:	4611      	mov	r1, r2
   b7116:	f7ff be17 	b.w	b6d48 <network_connecting>

000b711a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b711a:	2200      	movs	r2, #0
   b711c:	6840      	ldr	r0, [r0, #4]
   b711e:	4611      	mov	r1, r2
   b7120:	f7ff be22 	b.w	b6d68 <network_ready>

000b7124 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7124:	2300      	movs	r3, #0
   b7126:	6840      	ldr	r0, [r0, #4]
   b7128:	461a      	mov	r2, r3
   b712a:	4619      	mov	r1, r3
   b712c:	f7ff be24 	b.w	b6d78 <network_on>

000b7130 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7130:	2300      	movs	r3, #0
   b7132:	6840      	ldr	r0, [r0, #4]
   b7134:	461a      	mov	r2, r3
   b7136:	4619      	mov	r1, r3
   b7138:	f7ff be26 	b.w	b6d88 <network_off>

000b713c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b713c:	6840      	ldr	r0, [r0, #4]
   b713e:	2100      	movs	r1, #0
   b7140:	f7ff be4a 	b.w	b6dd8 <network_is_on>

000b7144 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7144:	6840      	ldr	r0, [r0, #4]
   b7146:	2100      	movs	r1, #0
   b7148:	f7ff be4e 	b.w	b6de8 <network_is_off>

000b714c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b714c:	6840      	ldr	r0, [r0, #4]
   b714e:	2200      	movs	r2, #0
   b7150:	f081 0101 	eor.w	r1, r1, #1
   b7154:	f7ff be20 	b.w	b6d98 <network_listen>

000b7158 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7158:	6840      	ldr	r0, [r0, #4]
   b715a:	2200      	movs	r2, #0
   b715c:	f7ff be2c 	b.w	b6db8 <network_set_listen_timeout>

000b7160 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b7160:	2200      	movs	r2, #0
   b7162:	6840      	ldr	r0, [r0, #4]
   b7164:	4611      	mov	r1, r2
   b7166:	f7ff be2f 	b.w	b6dc8 <network_get_listen_timeout>

000b716a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b716a:	2200      	movs	r2, #0
   b716c:	6840      	ldr	r0, [r0, #4]
   b716e:	4611      	mov	r1, r2
   b7170:	f7ff be1a 	b.w	b6da8 <network_listening>

000b7174 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7174:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7178:	b095      	sub	sp, #84	; 0x54
   b717a:	4614      	mov	r4, r2
   b717c:	460d      	mov	r5, r1
   b717e:	4607      	mov	r7, r0
    IPAddress addr;
   b7180:	f7ff ff54 	bl	b702c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7184:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7186:	221c      	movs	r2, #28
   b7188:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b718a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b718c:	f001 f9a4 	bl	b84d8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b7190:	2340      	movs	r3, #64	; 0x40
   b7192:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7194:	4620      	mov	r0, r4
   b7196:	466b      	mov	r3, sp
   b7198:	aa0c      	add	r2, sp, #48	; 0x30
   b719a:	2100      	movs	r1, #0
   b719c:	f7ff fc88 	bl	b6ab0 <netdb_getaddrinfo>
    if (!r) {
   b71a0:	4604      	mov	r4, r0
   b71a2:	2800      	cmp	r0, #0
   b71a4:	d14b      	bne.n	b723e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b71a6:	4602      	mov	r2, r0
   b71a8:	2101      	movs	r1, #1
   b71aa:	6868      	ldr	r0, [r5, #4]
   b71ac:	f7ff fddc 	bl	b6d68 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b71b0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b71b2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b71b4:	4622      	mov	r2, r4
   b71b6:	6868      	ldr	r0, [r5, #4]
   b71b8:	f7ff fdd6 	bl	b6d68 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b71bc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b71be:	4681      	mov	r9, r0
        bool ok = false;
   b71c0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b71c2:	2e00      	cmp	r6, #0
   b71c4:	d03b      	beq.n	b723e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b71c6:	2900      	cmp	r1, #0
   b71c8:	d139      	bne.n	b723e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b71ca:	6873      	ldr	r3, [r6, #4]
   b71cc:	2b02      	cmp	r3, #2
   b71ce:	d003      	beq.n	b71d8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b71d0:	2b0a      	cmp	r3, #10
   b71d2:	d011      	beq.n	b71f8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b71d4:	69f6      	ldr	r6, [r6, #28]
   b71d6:	e7f4      	b.n	b71c2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b71d8:	f1b8 0f00 	cmp.w	r8, #0
   b71dc:	d0fa      	beq.n	b71d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b71de:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b71e0:	a806      	add	r0, sp, #24
   b71e2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b71e4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b71e6:	f7ff ff71 	bl	b70cc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b71ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b71ec:	1d3c      	adds	r4, r7, #4
   b71ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b71f0:	682b      	ldr	r3, [r5, #0]
   b71f2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b71f4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b71f6:	e7ed      	b.n	b71d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b71f8:	f1b9 0f00 	cmp.w	r9, #0
   b71fc:	d0ea      	beq.n	b71d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b71fe:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7200:	2210      	movs	r2, #16
   b7202:	a801      	add	r0, sp, #4
   b7204:	f001 f968 	bl	b84d8 <memset>
                    a.v = 6;
   b7208:	2306      	movs	r3, #6
   b720a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b720e:	ad01      	add	r5, sp, #4
   b7210:	f104 0308 	add.w	r3, r4, #8
   b7214:	3418      	adds	r4, #24
   b7216:	6818      	ldr	r0, [r3, #0]
   b7218:	6859      	ldr	r1, [r3, #4]
   b721a:	462a      	mov	r2, r5
   b721c:	c203      	stmia	r2!, {r0, r1}
   b721e:	3308      	adds	r3, #8
   b7220:	42a3      	cmp	r3, r4
   b7222:	4615      	mov	r5, r2
   b7224:	d1f7      	bne.n	b7216 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7226:	a901      	add	r1, sp, #4
   b7228:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b722a:	ad07      	add	r5, sp, #28
   b722c:	f7ff ff0c 	bl	b7048 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7230:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7232:	1d3c      	adds	r4, r7, #4
   b7234:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7236:	682b      	ldr	r3, [r5, #0]
   b7238:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b723a:	4649      	mov	r1, r9
   b723c:	e7ca      	b.n	b71d4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b723e:	9800      	ldr	r0, [sp, #0]
   b7240:	f7ff fc2e 	bl	b6aa0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7244:	4638      	mov	r0, r7
   b7246:	b015      	add	sp, #84	; 0x54
   b7248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b724c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b724c:	4b02      	ldr	r3, [pc, #8]	; (b7258 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b724e:	4a03      	ldr	r2, [pc, #12]	; (b725c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b7250:	601a      	str	r2, [r3, #0]
   b7252:	2200      	movs	r2, #0
   b7254:	605a      	str	r2, [r3, #4]

} // spark
   b7256:	4770      	bx	lr
   b7258:	2003e6d4 	.word	0x2003e6d4
   b725c:	000b983c 	.word	0x000b983c

000b7260 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b7260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7262:	4606      	mov	r6, r0
   b7264:	460d      	mov	r5, r1
  size_t n = 0;
   b7266:	188f      	adds	r7, r1, r2
   b7268:	2400      	movs	r4, #0
  while (size--) {
   b726a:	42bd      	cmp	r5, r7
   b726c:	d00c      	beq.n	b7288 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b726e:	6833      	ldr	r3, [r6, #0]
   b7270:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7274:	689b      	ldr	r3, [r3, #8]
   b7276:	4630      	mov	r0, r6
   b7278:	4798      	blx	r3
     if (chunk>=0)
   b727a:	1e03      	subs	r3, r0, #0
   b727c:	db01      	blt.n	b7282 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b727e:	441c      	add	r4, r3
  while (size--) {
   b7280:	e7f3      	b.n	b726a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b7282:	2c00      	cmp	r4, #0
   b7284:	bf08      	it	eq
   b7286:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7288:	4620      	mov	r0, r4
   b728a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b728c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b728c:	b513      	push	{r0, r1, r4, lr}
   b728e:	4604      	mov	r4, r0
    }
   b7290:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b7292:	b159      	cbz	r1, b72ac <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7294:	9101      	str	r1, [sp, #4]
   b7296:	f001 f95f 	bl	b8558 <strlen>
   b729a:	6823      	ldr	r3, [r4, #0]
   b729c:	9901      	ldr	r1, [sp, #4]
   b729e:	68db      	ldr	r3, [r3, #12]
   b72a0:	4602      	mov	r2, r0
   b72a2:	4620      	mov	r0, r4
    }
   b72a4:	b002      	add	sp, #8
   b72a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b72aa:	4718      	bx	r3
    }
   b72ac:	b002      	add	sp, #8
   b72ae:	bd10      	pop	{r4, pc}

000b72b0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b72b0:	b508      	push	{r3, lr}
  return write(str);
   b72b2:	f7ff ffeb 	bl	b728c <_ZN5Print5writeEPKc>
}
   b72b6:	bd08      	pop	{r3, pc}

000b72b8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b72b8:	6803      	ldr	r3, [r0, #0]
   b72ba:	689b      	ldr	r3, [r3, #8]
   b72bc:	4718      	bx	r3

000b72be <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b72be:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b72c0:	210d      	movs	r1, #13
{
   b72c2:	4605      	mov	r5, r0
  size_t n = print('\r');
   b72c4:	f7ff fff8 	bl	b72b8 <_ZN5Print5printEc>
  n += print('\n');
   b72c8:	210a      	movs	r1, #10
  size_t n = print('\r');
   b72ca:	4604      	mov	r4, r0
  n += print('\n');
   b72cc:	4628      	mov	r0, r5
   b72ce:	f7ff fff3 	bl	b72b8 <_ZN5Print5printEc>
  return n;
}
   b72d2:	4420      	add	r0, r4
   b72d4:	bd38      	pop	{r3, r4, r5, pc}

000b72d6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b72d6:	b538      	push	{r3, r4, r5, lr}
   b72d8:	4605      	mov	r5, r0
  return write(str);
   b72da:	f7ff ffd7 	bl	b728c <_ZN5Print5writeEPKc>
   b72de:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b72e0:	4628      	mov	r0, r5
   b72e2:	f7ff ffec 	bl	b72be <_ZN5Print7printlnEv>
  return n;
}
   b72e6:	4420      	add	r0, r4
   b72e8:	bd38      	pop	{r3, r4, r5, pc}

000b72ea <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b72ea:	b530      	push	{r4, r5, lr}
   b72ec:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b72ee:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b72f0:	2a01      	cmp	r2, #1
  *str = '\0';
   b72f2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b72f6:	bf98      	it	ls
   b72f8:	220a      	movls	r2, #10
   b72fa:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b72fc:	460d      	mov	r5, r1
   b72fe:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7302:	fb01 5312 	mls	r3, r1, r2, r5
   b7306:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b730a:	2b09      	cmp	r3, #9
   b730c:	bf94      	ite	ls
   b730e:	3330      	addls	r3, #48	; 0x30
   b7310:	3337      	addhi	r3, #55	; 0x37
   b7312:	b2db      	uxtb	r3, r3
  } while(n);
   b7314:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7316:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b731a:	d9ef      	bls.n	b72fc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b731c:	4621      	mov	r1, r4
   b731e:	f7ff ffb5 	bl	b728c <_ZN5Print5writeEPKc>
}
   b7322:	b00b      	add	sp, #44	; 0x2c
   b7324:	bd30      	pop	{r4, r5, pc}

000b7326 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b732a:	b086      	sub	sp, #24
   b732c:	af00      	add	r7, sp, #0
   b732e:	4605      	mov	r5, r0
   b7330:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7332:	1d38      	adds	r0, r7, #4
   b7334:	2114      	movs	r1, #20
{
   b7336:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7338:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b733a:	f7ff fd7d 	bl	b6e38 <vsnprintf>

    if (n<bufsize)
   b733e:	2813      	cmp	r0, #19
   b7340:	d80e      	bhi.n	b7360 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7342:	1d39      	adds	r1, r7, #4
   b7344:	4628      	mov	r0, r5
   b7346:	f7ff ffa1 	bl	b728c <_ZN5Print5writeEPKc>
   b734a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b734c:	b11e      	cbz	r6, b7356 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b734e:	4628      	mov	r0, r5
   b7350:	f7ff ffb5 	bl	b72be <_ZN5Print7printlnEv>
   b7354:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b7356:	4620      	mov	r0, r4
   b7358:	3718      	adds	r7, #24
   b735a:	46bd      	mov	sp, r7
   b735c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7360:	f100 0308 	add.w	r3, r0, #8
   b7364:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7368:	46e8      	mov	r8, sp
        char bigger[n+1];
   b736a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b736e:	4622      	mov	r2, r4
   b7370:	1c41      	adds	r1, r0, #1
   b7372:	683b      	ldr	r3, [r7, #0]
   b7374:	4668      	mov	r0, sp
   b7376:	f7ff fd5f 	bl	b6e38 <vsnprintf>
  return write(str);
   b737a:	4669      	mov	r1, sp
   b737c:	4628      	mov	r0, r5
   b737e:	f7ff ff85 	bl	b728c <_ZN5Print5writeEPKc>
   b7382:	4604      	mov	r4, r0
   b7384:	46c5      	mov	sp, r8
   b7386:	e7e1      	b.n	b734c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7388 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b7388:	4b01      	ldr	r3, [pc, #4]	; (b7390 <_GLOBAL__sub_I_RGB+0x8>)
   b738a:	2200      	movs	r2, #0
   b738c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b738e:	4770      	bx	lr
   b7390:	2003e6dc 	.word	0x2003e6dc

000b7394 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7394:	2100      	movs	r1, #0
   b7396:	f7ff bbfb 	b.w	b6b90 <hal_spi_release>

000b739a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b739a:	2100      	movs	r1, #0
   b739c:	f7ff bbf0 	b.w	b6b80 <hal_spi_acquire>

000b73a0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b73a0:	b510      	push	{r4, lr}
   b73a2:	4604      	mov	r4, r0
   b73a4:	4608      	mov	r0, r1
{
    _spi = spi;
   b73a6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b73a8:	f7ff fbca 	bl	b6b40 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b73ac:	2300      	movs	r3, #0
   b73ae:	6063      	str	r3, [r4, #4]
}
   b73b0:	4620      	mov	r0, r4
   b73b2:	bd10      	pop	{r4, pc}

000b73b4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b73b4:	b513      	push	{r0, r1, r4, lr}
   b73b6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b73b8:	7800      	ldrb	r0, [r0, #0]
   b73ba:	f7ff ffee 	bl	b739a <_ZN8SPIClass4lockEv.isra.0>
   b73be:	b958      	cbnz	r0, b73d8 <_ZN8SPIClass5beginEv+0x24>
   b73c0:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b73c2:	9001      	str	r0, [sp, #4]
   b73c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b73c8:	f7ff fbaa 	bl	b6b20 <hal_spi_begin>
        unlock();
   b73cc:	9801      	ldr	r0, [sp, #4]
    }
}
   b73ce:	b002      	add	sp, #8
   b73d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b73d4:	f7ff bfde 	b.w	b7394 <_ZN8SPIClass6unlockEv.isra.0>
   b73d8:	b002      	add	sp, #8
   b73da:	bd10      	pop	{r4, pc}

000b73dc <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b73dc:	7800      	ldrb	r0, [r0, #0]
   b73de:	f7ff bfd9 	b.w	b7394 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b73e4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b73e4:	0840      	lsrs	r0, r0, #1
{
   b73e6:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b73e8:	6018      	str	r0, [r3, #0]
   b73ea:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b73ec:	6818      	ldr	r0, [r3, #0]
   b73ee:	4288      	cmp	r0, r1
   b73f0:	b2e5      	uxtb	r5, r4
   b73f2:	d906      	bls.n	b7402 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b73f4:	3401      	adds	r4, #1
   b73f6:	2c08      	cmp	r4, #8
   b73f8:	d002      	beq.n	b7400 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b73fa:	0840      	lsrs	r0, r0, #1
   b73fc:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b73fe:	e7f5      	b.n	b73ec <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7400:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b7402:	4b02      	ldr	r3, [pc, #8]	; (b740c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7404:	5d5b      	ldrb	r3, [r3, r5]
   b7406:	7013      	strb	r3, [r2, #0]
}
   b7408:	bd30      	pop	{r4, r5, pc}
   b740a:	bf00      	nop
   b740c:	000b9870 	.word	0x000b9870

000b7410 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7414:	4606      	mov	r6, r0
   b7416:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7418:	7800      	ldrb	r0, [r0, #0]
{
   b741a:	460c      	mov	r4, r1
    CHECK(lock());
   b741c:	f7ff ffbd 	bl	b739a <_ZN8SPIClass4lockEv.isra.0>
   b7420:	2800      	cmp	r0, #0
   b7422:	db1b      	blt.n	b745c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7424:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7426:	2214      	movs	r2, #20
   b7428:	2100      	movs	r1, #0
   b742a:	a809      	add	r0, sp, #36	; 0x24
   b742c:	f001 f854 	bl	b84d8 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7430:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7432:	2200      	movs	r2, #0
   b7434:	a909      	add	r1, sp, #36	; 0x24
   b7436:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7438:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b743c:	f7ff fb90 	bl	b6b60 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7440:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7444:	b113      	cbz	r3, b744c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b7446:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b744a:	b155      	cbz	r5, b7462 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b744c:	2700      	movs	r7, #0
   b744e:	46b9      	mov	r9, r7
   b7450:	46b8      	mov	r8, r7
   b7452:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7454:	7923      	ldrb	r3, [r4, #4]
   b7456:	b15d      	cbz	r5, b7470 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7458:	b1c3      	cbz	r3, b748c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b745a:	2000      	movs	r0, #0
}
   b745c:	b00f      	add	sp, #60	; 0x3c
   b745e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b7462:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b7466:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b746a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b746e:	e7f1      	b.n	b7454 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b7470:	2b00      	cmp	r3, #0
   b7472:	d135      	bne.n	b74e0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7474:	68a3      	ldr	r3, [r4, #8]
   b7476:	4543      	cmp	r3, r8
   b7478:	d108      	bne.n	b748c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b747a:	f88d 9020 	strb.w	r9, [sp, #32]
   b747e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7482:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7486:	89a3      	ldrh	r3, [r4, #12]
   b7488:	429a      	cmp	r2, r3
   b748a:	d0e6      	beq.n	b745a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b748c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b748e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b7490:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7494:	980a      	ldr	r0, [sp, #40]	; 0x28
   b7496:	ab04      	add	r3, sp, #16
   b7498:	f10d 020f 	add.w	r2, sp, #15
   b749c:	f7ff ffa2 	bl	b73e4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b74a0:	7921      	ldrb	r1, [r4, #4]
   b74a2:	b985      	cbnz	r5, b74c6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b74a4:	b989      	cbnz	r1, b74ca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b74a6:	68a3      	ldr	r3, [r4, #8]
   b74a8:	4543      	cmp	r3, r8
   b74aa:	d30e      	bcc.n	b74ca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b74ac:	f88d 9020 	strb.w	r9, [sp, #32]
   b74b0:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b74b4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b74b8:	89a3      	ldrh	r3, [r4, #12]
   b74ba:	429a      	cmp	r2, r3
   b74bc:	d105      	bne.n	b74ca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b74be:	9b04      	ldr	r3, [sp, #16]
   b74c0:	4543      	cmp	r3, r8
   b74c2:	d102      	bne.n	b74ca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b74c4:	e7c9      	b.n	b745a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b74c6:	2900      	cmp	r1, #0
   b74c8:	d1f9      	bne.n	b74be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b74ca:	2300      	movs	r3, #0
   b74cc:	9301      	str	r3, [sp, #4]
   b74ce:	7b63      	ldrb	r3, [r4, #13]
   b74d0:	9300      	str	r3, [sp, #0]
   b74d2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b74d6:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b74d8:	7830      	ldrb	r0, [r6, #0]
   b74da:	f7ff fb49 	bl	b6b70 <hal_spi_set_settings>
   b74de:	e7bc      	b.n	b745a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b74e0:	e9cd 5500 	strd	r5, r5, [sp]
   b74e4:	462b      	mov	r3, r5
   b74e6:	462a      	mov	r2, r5
   b74e8:	2101      	movs	r1, #1
   b74ea:	e7f5      	b.n	b74d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b74ec <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b74ec:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b74ee:	7800      	ldrb	r0, [r0, #0]
   b74f0:	f7ff fb1e 	bl	b6b30 <hal_spi_transfer>
}
   b74f4:	b2c0      	uxtb	r0, r0
   b74f6:	bd08      	pop	{r3, pc}

000b74f8 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b74f8:	b510      	push	{r4, lr}
   b74fa:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b74fc:	f7ff fa10 	bl	b6920 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b7500:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b7502:	6823      	ldr	r3, [r4, #0]
   b7504:	4620      	mov	r0, r4
   b7506:	695b      	ldr	r3, [r3, #20]
   b7508:	4798      	blx	r3
    if (c >= 0) return c;
   b750a:	2800      	cmp	r0, #0
   b750c:	da08      	bge.n	b7520 <_ZN6Stream9timedReadEv+0x28>
   b750e:	f7ff fa07 	bl	b6920 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b7512:	68e3      	ldr	r3, [r4, #12]
   b7514:	1ac0      	subs	r0, r0, r3
   b7516:	68a3      	ldr	r3, [r4, #8]
   b7518:	4298      	cmp	r0, r3
   b751a:	d3f2      	bcc.n	b7502 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b751c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b7520:	bd10      	pop	{r4, pc}

000b7522 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b7522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7526:	4607      	mov	r7, r0
   b7528:	460c      	mov	r4, r1
   b752a:	188e      	adds	r6, r1, r2
   b752c:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b752e:	42b5      	cmp	r5, r6
   b7530:	eba5 0804 	sub.w	r8, r5, r4
   b7534:	d007      	beq.n	b7546 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b7536:	4638      	mov	r0, r7
   b7538:	f7ff ffde 	bl	b74f8 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b753c:	1e03      	subs	r3, r0, #0
   b753e:	db02      	blt.n	b7546 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b7540:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b7544:	e7f3      	b.n	b752e <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b7546:	4640      	mov	r0, r8
   b7548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b754c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b754c:	b510      	push	{r4, lr}
   b754e:	4604      	mov	r4, r0
{
	free(buffer);
   b7550:	6800      	ldr	r0, [r0, #0]
   b7552:	f7ff fc59 	bl	b6e08 <free>
}
   b7556:	4620      	mov	r0, r4
   b7558:	bd10      	pop	{r4, pc}

000b755a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b755a:	b510      	push	{r4, lr}
   b755c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b755e:	6800      	ldr	r0, [r0, #0]
   b7560:	b108      	cbz	r0, b7566 <_ZN6String10invalidateEv+0xc>
   b7562:	f7ff fc51 	bl	b6e08 <free>
	buffer = NULL;
   b7566:	2300      	movs	r3, #0
	capacity = len = 0;
   b7568:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b756c:	6023      	str	r3, [r4, #0]
}
   b756e:	bd10      	pop	{r4, pc}

000b7570 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7570:	b538      	push	{r3, r4, r5, lr}
   b7572:	4604      	mov	r4, r0
   b7574:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b7576:	6800      	ldr	r0, [r0, #0]
   b7578:	3101      	adds	r1, #1
   b757a:	f7ff fc4d 	bl	b6e18 <realloc>
	if (newbuffer) {
   b757e:	b110      	cbz	r0, b7586 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b7580:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7584:	2001      	movs	r0, #1
	}
	return 0;
}
   b7586:	bd38      	pop	{r3, r4, r5, pc}

000b7588 <_ZN6String7reserveEj>:
{
   b7588:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b758a:	6803      	ldr	r3, [r0, #0]
{
   b758c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b758e:	b123      	cbz	r3, b759a <_ZN6String7reserveEj+0x12>
   b7590:	6843      	ldr	r3, [r0, #4]
   b7592:	428b      	cmp	r3, r1
   b7594:	d301      	bcc.n	b759a <_ZN6String7reserveEj+0x12>
   b7596:	2001      	movs	r0, #1
}
   b7598:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b759a:	4620      	mov	r0, r4
   b759c:	f7ff ffe8 	bl	b7570 <_ZN6String12changeBufferEj>
   b75a0:	2800      	cmp	r0, #0
   b75a2:	d0f9      	beq.n	b7598 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b75a4:	68a3      	ldr	r3, [r4, #8]
   b75a6:	2b00      	cmp	r3, #0
   b75a8:	d1f5      	bne.n	b7596 <_ZN6String7reserveEj+0xe>
   b75aa:	6822      	ldr	r2, [r4, #0]
   b75ac:	7013      	strb	r3, [r2, #0]
   b75ae:	e7f2      	b.n	b7596 <_ZN6String7reserveEj+0xe>

000b75b0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b75b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b75b2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b75b4:	4611      	mov	r1, r2
   b75b6:	9201      	str	r2, [sp, #4]
{
   b75b8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b75ba:	f7ff ffe5 	bl	b7588 <_ZN6String7reserveEj>
   b75be:	9a01      	ldr	r2, [sp, #4]
   b75c0:	b928      	cbnz	r0, b75ce <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b75c2:	4620      	mov	r0, r4
   b75c4:	f7ff ffc9 	bl	b755a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b75c8:	4620      	mov	r0, r4
   b75ca:	b003      	add	sp, #12
   b75cc:	bd30      	pop	{r4, r5, pc}
	len = length;
   b75ce:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b75d0:	4629      	mov	r1, r5
   b75d2:	6820      	ldr	r0, [r4, #0]
   b75d4:	f000 ff72 	bl	b84bc <memcpy>
	buffer[len] = 0;
   b75d8:	6822      	ldr	r2, [r4, #0]
   b75da:	68a3      	ldr	r3, [r4, #8]
   b75dc:	2100      	movs	r1, #0
   b75de:	54d1      	strb	r1, [r2, r3]
	return *this;
   b75e0:	e7f2      	b.n	b75c8 <_ZN6String4copyEPKcj+0x18>

000b75e2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b75e2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b75e4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b75e6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b75ea:	4604      	mov	r4, r0
	len = 0;
   b75ec:	6083      	str	r3, [r0, #8]
	flags = 0;
   b75ee:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b75f0:	b141      	cbz	r1, b7604 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b75f2:	4608      	mov	r0, r1
   b75f4:	9101      	str	r1, [sp, #4]
   b75f6:	f000 ffaf 	bl	b8558 <strlen>
   b75fa:	9901      	ldr	r1, [sp, #4]
   b75fc:	4602      	mov	r2, r0
   b75fe:	4620      	mov	r0, r4
   b7600:	f7ff ffd6 	bl	b75b0 <_ZN6String4copyEPKcj>
}
   b7604:	4620      	mov	r0, r4
   b7606:	b002      	add	sp, #8
   b7608:	bd10      	pop	{r4, pc}

000b760a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b760a:	b513      	push	{r0, r1, r4, lr}
   b760c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b760e:	b159      	cbz	r1, b7628 <_ZN6StringaSEPKc+0x1e>
   b7610:	4608      	mov	r0, r1
   b7612:	9101      	str	r1, [sp, #4]
   b7614:	f000 ffa0 	bl	b8558 <strlen>
   b7618:	9901      	ldr	r1, [sp, #4]
   b761a:	4602      	mov	r2, r0
   b761c:	4620      	mov	r0, r4
   b761e:	f7ff ffc7 	bl	b75b0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7622:	4620      	mov	r0, r4
   b7624:	b002      	add	sp, #8
   b7626:	bd10      	pop	{r4, pc}
	else invalidate();
   b7628:	f7ff ff97 	bl	b755a <_ZN6String10invalidateEv>
   b762c:	e7f9      	b.n	b7622 <_ZN6StringaSEPKc+0x18>

000b762e <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b762e:	6802      	ldr	r2, [r0, #0]
{
   b7630:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b7632:	6809      	ldr	r1, [r1, #0]
   b7634:	b162      	cbz	r2, b7650 <_ZNK6String9compareToERKS_+0x22>
   b7636:	b941      	cbnz	r1, b764a <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b7638:	6880      	ldr	r0, [r0, #8]
   b763a:	b160      	cbz	r0, b7656 <_ZNK6String9compareToERKS_+0x28>
   b763c:	7810      	ldrb	r0, [r2, #0]
   b763e:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b7640:	6898      	ldr	r0, [r3, #8]
   b7642:	b140      	cbz	r0, b7656 <_ZNK6String9compareToERKS_+0x28>
   b7644:	7809      	ldrb	r1, [r1, #0]
   b7646:	4248      	negs	r0, r1
   b7648:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b764a:	4610      	mov	r0, r2
   b764c:	f000 bf7a 	b.w	b8544 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b7650:	2900      	cmp	r1, #0
   b7652:	d1f5      	bne.n	b7640 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b7654:	4608      	mov	r0, r1
}
   b7656:	4770      	bx	lr

000b7658 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b7658:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b765a:	6882      	ldr	r2, [r0, #8]
   b765c:	688b      	ldr	r3, [r1, #8]
   b765e:	429a      	cmp	r2, r3
   b7660:	d105      	bne.n	b766e <_ZNK6String6equalsERKS_+0x16>
   b7662:	f7ff ffe4 	bl	b762e <_ZNK6String9compareToERKS_>
   b7666:	fab0 f080 	clz	r0, r0
   b766a:	0940      	lsrs	r0, r0, #5
}
   b766c:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b766e:	2000      	movs	r0, #0
   b7670:	e7fc      	b.n	b766c <_ZNK6String6equalsERKS_+0x14>

000b7672 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   b7672:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b7674:	6882      	ldr	r2, [r0, #8]
   b7676:	b93a      	cbnz	r2, b7688 <_ZNK6String6equalsEPKc+0x16>
   b7678:	b121      	cbz	r1, b7684 <_ZNK6String6equalsEPKc+0x12>
   b767a:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   b767c:	fab0 f080 	clz	r0, r0
   b7680:	0940      	lsrs	r0, r0, #5
   b7682:	e000      	b.n	b7686 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   b7684:	2001      	movs	r0, #1
}
   b7686:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   b7688:	6800      	ldr	r0, [r0, #0]
   b768a:	b909      	cbnz	r1, b7690 <_ZNK6String6equalsEPKc+0x1e>
   b768c:	7800      	ldrb	r0, [r0, #0]
   b768e:	e7f5      	b.n	b767c <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   b7690:	f000 ff58 	bl	b8544 <strcmp>
   b7694:	e7f2      	b.n	b767c <_ZNK6String6equalsEPKc+0xa>
	...

000b7698 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7698:	4b05      	ldr	r3, [pc, #20]	; (b76b0 <_GLOBAL__sub_I_System+0x18>)
   b769a:	2202      	movs	r2, #2
   b769c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b769e:	4b05      	ldr	r3, [pc, #20]	; (b76b4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b76a0:	4a05      	ldr	r2, [pc, #20]	; (b76b8 <_GLOBAL__sub_I_System+0x20>)
   b76a2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b76a4:	2000      	movs	r0, #0
   b76a6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b76aa:	f7ff bb01 	b.w	b6cb0 <set_system_mode>
   b76ae:	bf00      	nop
   b76b0:	2003e6f8 	.word	0x2003e6f8
   b76b4:	2003e6ec 	.word	0x2003e6ec
   b76b8:	ffff0000 	.word	0xffff0000

000b76bc <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b76bc:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b76be:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b76c0:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b76c4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b76c6:	2201      	movs	r2, #1
   b76c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b76cc:	f10d 0107 	add.w	r1, sp, #7
   b76d0:	47a0      	blx	r4
}
   b76d2:	b002      	add	sp, #8
   b76d4:	bd10      	pop	{r4, pc}

000b76d6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b76d6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b76d8:	6803      	ldr	r3, [r0, #0]
   b76da:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b76dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b76e0:	46a4      	mov	ip, r4
}
   b76e2:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b76e6:	4760      	bx	ip

000b76e8 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b76e8:	b513      	push	{r0, r1, r4, lr}
   b76ea:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b76ec:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b76ee:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b76f2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b76f4:	f10d 0107 	add.w	r1, sp, #7
   b76f8:	2201      	movs	r2, #1
   b76fa:	47a0      	blx	r4
}
   b76fc:	b002      	add	sp, #8
   b76fe:	bd10      	pop	{r4, pc}

000b7700 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b7700:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b7702:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7704:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7708:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b770c:	429a      	cmp	r2, r3
int TCPClient::read() {
   b770e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7710:	d008      	beq.n	b7724 <_ZN9TCPClient4readEv+0x24>
   b7712:	6963      	ldr	r3, [r4, #20]
   b7714:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7718:	1c51      	adds	r1, r2, #1
   b771a:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b771e:	4413      	add	r3, r2
   b7720:	7918      	ldrb	r0, [r3, #4]
}
   b7722:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7724:	6803      	ldr	r3, [r0, #0]
   b7726:	691b      	ldr	r3, [r3, #16]
   b7728:	4798      	blx	r3
   b772a:	2800      	cmp	r0, #0
   b772c:	d1f1      	bne.n	b7712 <_ZN9TCPClient4readEv+0x12>
   b772e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7732:	e7f6      	b.n	b7722 <_ZN9TCPClient4readEv+0x22>

000b7734 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b7734:	4770      	bx	lr

000b7736 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b7736:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b7738:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b773a:	43c0      	mvns	r0, r0
   b773c:	0fc0      	lsrs	r0, r0, #31
   b773e:	4770      	bx	lr

000b7740 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7740:	4770      	bx	lr
	...

000b7744 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7744:	4b06      	ldr	r3, [pc, #24]	; (b7760 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7746:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7748:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b774a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b774e:	d005      	beq.n	b775c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7750:	4608      	mov	r0, r1
   b7752:	f000 fd93 	bl	b827c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7756:	2800      	cmp	r0, #0
   b7758:	bf08      	it	eq
   b775a:	2400      	moveq	r4, #0
      }
   b775c:	4620      	mov	r0, r4
   b775e:	bd10      	pop	{r4, pc}
   b7760:	000b97b0 	.word	0x000b97b0

000b7764 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7764:	b510      	push	{r4, lr}
   b7766:	21ac      	movs	r1, #172	; 0xac
   b7768:	4604      	mov	r4, r0
   b776a:	f7fc fc98 	bl	b409e <_ZdlPvj>
   b776e:	4620      	mov	r0, r4
   b7770:	bd10      	pop	{r4, pc}

000b7772 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b7772:	21ac      	movs	r1, #172	; 0xac
   b7774:	f7fc bc93 	b.w	b409e <_ZdlPvj>

000b7778 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b7778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b777c:	f04f 0800 	mov.w	r8, #0
   b7780:	b086      	sub	sp, #24
   b7782:	461c      	mov	r4, r3
   b7784:	f8c0 8004 	str.w	r8, [r0, #4]
   b7788:	4605      	mov	r5, r0
   b778a:	460e      	mov	r6, r1
   b778c:	4617      	mov	r7, r2
    struct timeval tv = {};
   b778e:	4641      	mov	r1, r8
   b7790:	2210      	movs	r2, #16
   b7792:	a802      	add	r0, sp, #8
   b7794:	f000 fea0 	bl	b84d8 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b7798:	1c63      	adds	r3, r4, #1
   b779a:	d009      	beq.n	b77b0 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b779c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b77a0:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b77a4:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b77a8:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b77ac:	435c      	muls	r4, r3
   b77ae:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b77b0:	6968      	ldr	r0, [r5, #20]
   b77b2:	2310      	movs	r3, #16
   b77b4:	9300      	str	r3, [sp, #0]
   b77b6:	6800      	ldr	r0, [r0, #0]
   b77b8:	ab02      	add	r3, sp, #8
   b77ba:	f241 0205 	movw	r2, #4101	; 0x1005
   b77be:	f640 71ff 	movw	r1, #4095	; 0xfff
   b77c2:	f7ff f97d 	bl	b6ac0 <sock_setsockopt>
    if (ret < 0) {
   b77c6:	2800      	cmp	r0, #0
   b77c8:	da07      	bge.n	b77da <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b77ca:	f7ff fb3d 	bl	b6e48 <__errno>
   b77ce:	6803      	ldr	r3, [r0, #0]
   b77d0:	606b      	str	r3, [r5, #4]
        return 0;
   b77d2:	2000      	movs	r0, #0
}
   b77d4:	b006      	add	sp, #24
   b77d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b77da:	6968      	ldr	r0, [r5, #20]
   b77dc:	2300      	movs	r3, #0
   b77de:	6800      	ldr	r0, [r0, #0]
   b77e0:	463a      	mov	r2, r7
   b77e2:	4631      	mov	r1, r6
   b77e4:	f7ff f98c 	bl	b6b00 <sock_send>
    if (ret < 0) {
   b77e8:	1e03      	subs	r3, r0, #0
   b77ea:	dbee      	blt.n	b77ca <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b77ec:	4618      	mov	r0, r3
   b77ee:	e7f1      	b.n	b77d4 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b77f0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b77f0:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b77f2:	6984      	ldr	r4, [r0, #24]
   b77f4:	4b0a      	ldr	r3, [pc, #40]	; (b7820 <_ZN9TCPClientD1Ev+0x30>)
   b77f6:	6003      	str	r3, [r0, #0]
   b77f8:	4605      	mov	r5, r0
   b77fa:	b17c      	cbz	r4, b781c <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b77fc:	6863      	ldr	r3, [r4, #4]
   b77fe:	3b01      	subs	r3, #1
   b7800:	6063      	str	r3, [r4, #4]
   b7802:	b95b      	cbnz	r3, b781c <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b7804:	6823      	ldr	r3, [r4, #0]
   b7806:	4620      	mov	r0, r4
   b7808:	689b      	ldr	r3, [r3, #8]
   b780a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b780c:	68a3      	ldr	r3, [r4, #8]
   b780e:	3b01      	subs	r3, #1
   b7810:	60a3      	str	r3, [r4, #8]
   b7812:	b91b      	cbnz	r3, b781c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b7814:	6823      	ldr	r3, [r4, #0]
   b7816:	4620      	mov	r0, r4
   b7818:	68db      	ldr	r3, [r3, #12]
   b781a:	4798      	blx	r3
   b781c:	4628      	mov	r0, r5
   b781e:	bd38      	pop	{r3, r4, r5, pc}
   b7820:	000b98b4 	.word	0x000b98b4

000b7824 <_ZN9TCPClientD0Ev>:
   b7824:	b510      	push	{r4, lr}
   b7826:	4604      	mov	r4, r0
   b7828:	f7ff ffe2 	bl	b77f0 <_ZN9TCPClientD1Ev>
   b782c:	4620      	mov	r0, r4
   b782e:	211c      	movs	r1, #28
   b7830:	f7fc fc35 	bl	b409e <_ZdlPvj>
   b7834:	4620      	mov	r0, r4
   b7836:	bd10      	pop	{r4, pc}

000b7838 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b7838:	b530      	push	{r4, r5, lr}
   b783a:	b087      	sub	sp, #28
   b783c:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b783e:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b7840:	4668      	mov	r0, sp
   b7842:	f7ff fc43 	bl	b70cc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7846:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7848:	3404      	adds	r4, #4
   b784a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b784c:	682b      	ldr	r3, [r5, #0]
   b784e:	7023      	strb	r3, [r4, #0]
    }
   b7850:	b007      	add	sp, #28
   b7852:	bd30      	pop	{r4, r5, pc}

000b7854 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7854:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b7856:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b7858:	4b05      	ldr	r3, [pc, #20]	; (b7870 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b785a:	4604      	mov	r4, r0
   b785c:	358c      	adds	r5, #140	; 0x8c
   b785e:	f844 3b04 	str.w	r3, [r4], #4
   b7862:	4606      	mov	r6, r0
   b7864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7868:	682b      	ldr	r3, [r5, #0]
   b786a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b786c:	4630      	mov	r0, r6
   b786e:	bd70      	pop	{r4, r5, r6, pc}
   b7870:	000b9824 	.word	0x000b9824

000b7874 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7878:	4698      	mov	r8, r3
    stop();
   b787a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b787c:	b093      	sub	sp, #76	; 0x4c
   b787e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b7880:	2400      	movs	r4, #0
    stop();
   b7882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7884:	4606      	mov	r6, r0
   b7886:	4617      	mov	r7, r2
    stop();
   b7888:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b788a:	4628      	mov	r0, r5
   b788c:	466b      	mov	r3, sp
   b788e:	4622      	mov	r2, r4
   b7890:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b7892:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7894:	f7ff f90c 	bl	b6ab0 <netdb_getaddrinfo>
   b7898:	4605      	mov	r5, r0
   b789a:	2800      	cmp	r0, #0
   b789c:	d163      	bne.n	b7966 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b789e:	9b00      	ldr	r3, [sp, #0]
   b78a0:	2b00      	cmp	r3, #0
   b78a2:	d04b      	beq.n	b793c <_ZN9TCPClient7connectEPKctm+0xc8>
   b78a4:	695b      	ldr	r3, [r3, #20]
   b78a6:	2b00      	cmp	r3, #0
   b78a8:	d048      	beq.n	b793c <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b78aa:	a806      	add	r0, sp, #24
   b78ac:	f7ff fbbe 	bl	b702c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b78b0:	9b00      	ldr	r3, [sp, #0]
   b78b2:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b78b4:	7863      	ldrb	r3, [r4, #1]
   b78b6:	2b02      	cmp	r3, #2
   b78b8:	d104      	bne.n	b78c4 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b78ba:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b78bc:	a806      	add	r0, sp, #24
   b78be:	f7ff ffbb 	bl	b7838 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b78c2:	e026      	b.n	b7912 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b78c4:	2b0a      	cmp	r3, #10
   b78c6:	d124      	bne.n	b7912 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b78c8:	2211      	movs	r2, #17
   b78ca:	4629      	mov	r1, r5
   b78cc:	a801      	add	r0, sp, #4
   b78ce:	f000 fe03 	bl	b84d8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b78d2:	68a3      	ldr	r3, [r4, #8]
   b78d4:	2b00      	cmp	r3, #0
   b78d6:	d038      	beq.n	b794a <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b78d8:	f104 0308 	add.w	r3, r4, #8
   b78dc:	f10d 0c04 	add.w	ip, sp, #4
   b78e0:	3418      	adds	r4, #24
   b78e2:	6818      	ldr	r0, [r3, #0]
   b78e4:	6859      	ldr	r1, [r3, #4]
   b78e6:	4662      	mov	r2, ip
   b78e8:	c203      	stmia	r2!, {r0, r1}
   b78ea:	3308      	adds	r3, #8
   b78ec:	42a3      	cmp	r3, r4
   b78ee:	4694      	mov	ip, r2
   b78f0:	d1f7      	bne.n	b78e2 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b78f2:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b78f4:	a901      	add	r1, sp, #4
   b78f6:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b78f8:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b78fc:	f7ff fba4 	bl	b7048 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7900:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7904:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7908:	ac07      	add	r4, sp, #28
   b790a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b790c:	f8dc 3000 	ldr.w	r3, [ip]
   b7910:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b7912:	a806      	add	r0, sp, #24
   b7914:	f7ff fbaa 	bl	b706c <_ZNK9IPAddresscvbEv>
        if (addr) {
   b7918:	b180      	cbz	r0, b793c <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b791a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b791c:	ad07      	add	r5, sp, #28
   b791e:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b7922:	4b12      	ldr	r3, [pc, #72]	; (b796c <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7924:	930c      	str	r3, [sp, #48]	; 0x30
   b7926:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7928:	ac0d      	add	r4, sp, #52	; 0x34
   b792a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b792c:	682b      	ldr	r3, [r5, #0]
   b792e:	7023      	strb	r3, [r4, #0]
   b7930:	463a      	mov	r2, r7
   b7932:	4643      	mov	r3, r8
   b7934:	a90c      	add	r1, sp, #48	; 0x30
   b7936:	4630      	mov	r0, r6
   b7938:	47c8      	blx	r9
   b793a:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b793c:	9800      	ldr	r0, [sp, #0]
   b793e:	f7ff f8af 	bl	b6aa0 <netdb_freeaddrinfo>
}
   b7942:	4628      	mov	r0, r5
   b7944:	b013      	add	sp, #76	; 0x4c
   b7946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b794a:	68e3      	ldr	r3, [r4, #12]
   b794c:	2b00      	cmp	r3, #0
   b794e:	d1c3      	bne.n	b78d8 <_ZN9TCPClient7connectEPKctm+0x64>
   b7950:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7954:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b7958:	f7ff f892 	bl	b6a80 <inet_htonl>
   b795c:	4581      	cmp	r9, r0
   b795e:	d1bb      	bne.n	b78d8 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b7960:	f104 0114 	add.w	r1, r4, #20
   b7964:	e7aa      	b.n	b78bc <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7966:	4625      	mov	r5, r4
   b7968:	e7e8      	b.n	b793c <_ZN9TCPClient7connectEPKctm+0xc8>
   b796a:	bf00      	nop
   b796c:	000b9824 	.word	0x000b9824

000b7970 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b7970:	b538      	push	{r3, r4, r5, lr}
   b7972:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b7974:	681a      	ldr	r2, [r3, #0]
   b7976:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b7978:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b797a:	da10      	bge.n	b799e <_ZN9TCPClient9connectedEv+0x2e>
   b797c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7980:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7984:	429a      	cmp	r2, r3
   b7986:	d10a      	bne.n	b799e <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b7988:	6803      	ldr	r3, [r0, #0]
   b798a:	691b      	ldr	r3, [r3, #16]
   b798c:	4798      	blx	r3
        if (!rv) {
   b798e:	4604      	mov	r4, r0
   b7990:	b928      	cbnz	r0, b799e <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b7992:	682b      	ldr	r3, [r5, #0]
   b7994:	4628      	mov	r0, r5
   b7996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7998:	4798      	blx	r3
        rv = available();
   b799a:	4620      	mov	r0, r4
}
   b799c:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b799e:	2001      	movs	r0, #1
   b79a0:	e7fc      	b.n	b799c <_ZN9TCPClient9connectedEv+0x2c>

000b79a2 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b79a2:	b510      	push	{r4, lr}
   b79a4:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b79a6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b79aa:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b79ae:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b79b0:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b79b2:	d005      	beq.n	b79c0 <_ZN9TCPClient4peekEv+0x1e>
   b79b4:	6963      	ldr	r3, [r4, #20]
   b79b6:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b79ba:	4413      	add	r3, r2
   b79bc:	7918      	ldrb	r0, [r3, #4]
}
   b79be:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b79c0:	6803      	ldr	r3, [r0, #0]
   b79c2:	691b      	ldr	r3, [r3, #16]
   b79c4:	4798      	blx	r3
   b79c6:	2800      	cmp	r0, #0
   b79c8:	d1f4      	bne.n	b79b4 <_ZN9TCPClient4peekEv+0x12>
   b79ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b79ce:	e7f6      	b.n	b79be <_ZN9TCPClient4peekEv+0x1c>

000b79d0 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b79d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b79d2:	6943      	ldr	r3, [r0, #20]
   b79d4:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b79d6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b79da:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b79de:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b79e0:	4605      	mov	r5, r0
   b79e2:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b79e4:	d016      	beq.n	b7a14 <_ZN9TCPClient4readEPhj+0x44>
   b79e6:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b79e8:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b79ec:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b79f0:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b79f2:	42bc      	cmp	r4, r7
   b79f4:	bf28      	it	cs
   b79f6:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b79f8:	3304      	adds	r3, #4
   b79fa:	4622      	mov	r2, r4
   b79fc:	4419      	add	r1, r3
   b79fe:	4630      	mov	r0, r6
   b7a00:	f000 fd5c 	bl	b84bc <memcpy>
   b7a04:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b7a06:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b7a0a:	4423      	add	r3, r4
   b7a0c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b7a10:	4620      	mov	r0, r4
   b7a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7a14:	6803      	ldr	r3, [r0, #0]
   b7a16:	691b      	ldr	r3, [r3, #16]
   b7a18:	4798      	blx	r3
   b7a1a:	2800      	cmp	r0, #0
   b7a1c:	d1e3      	bne.n	b79e6 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b7a1e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b7a22:	e7f5      	b.n	b7a10 <_ZN9TCPClient4readEPhj+0x40>

000b7a24 <_ZN9TCPClient12flush_bufferEv>:
   b7a24:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7a26:	2300      	movs	r3, #0
   b7a28:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b7a2c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b7a2e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b7a32:	4770      	bx	lr

000b7a34 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7a38:	461f      	mov	r7, r3
    stop();
   b7a3a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7a3c:	460c      	mov	r4, r1
    stop();
   b7a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7a40:	b08a      	sub	sp, #40	; 0x28
   b7a42:	4605      	mov	r5, r0
   b7a44:	4616      	mov	r6, r2
    stop();
   b7a46:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7a48:	7d23      	ldrb	r3, [r4, #20]
   b7a4a:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b7a4e:	2b04      	cmp	r3, #4
   b7a50:	bf0c      	ite	eq
   b7a52:	2002      	moveq	r0, #2
   b7a54:	200a      	movne	r0, #10
   b7a56:	2206      	movs	r2, #6
   b7a58:	2101      	movs	r1, #1
   b7a5a:	f7ff f859 	bl	b6b10 <sock_socket>
   b7a5e:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b7a62:	696b      	ldr	r3, [r5, #20]
   b7a64:	681b      	ldr	r3, [r3, #0]
   b7a66:	2b00      	cmp	r3, #0
   b7a68:	da08      	bge.n	b7a7c <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b7a6a:	682b      	ldr	r3, [r5, #0]
   b7a6c:	4628      	mov	r0, r5
   b7a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7a70:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b7a72:	4798      	blx	r3
}
   b7a74:	4620      	mov	r0, r4
   b7a76:	b00a      	add	sp, #40	; 0x28
   b7a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b7a7c:	4628      	mov	r0, r5
   b7a7e:	f7ff ffd1 	bl	b7a24 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b7a82:	b1b7      	cbz	r7, b7ab2 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b7a84:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7a86:	a903      	add	r1, sp, #12
   b7a88:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b7a8a:	9303      	str	r3, [sp, #12]
   b7a8c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7a90:	f7fe ffe6 	bl	b6a60 <if_index_to_name>
   b7a94:	2800      	cmp	r0, #0
   b7a96:	d1e8      	bne.n	b7a6a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b7a98:	6968      	ldr	r0, [r5, #20]
   b7a9a:	2306      	movs	r3, #6
   b7a9c:	9300      	str	r3, [sp, #0]
   b7a9e:	6800      	ldr	r0, [r0, #0]
   b7aa0:	ab03      	add	r3, sp, #12
   b7aa2:	f241 020b 	movw	r2, #4107	; 0x100b
   b7aa6:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7aaa:	f7ff f809 	bl	b6ac0 <sock_setsockopt>
   b7aae:	2800      	cmp	r0, #0
   b7ab0:	d1db      	bne.n	b7a6a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b7ab2:	221c      	movs	r2, #28
   b7ab4:	2100      	movs	r1, #0
   b7ab6:	a803      	add	r0, sp, #12
   b7ab8:	f000 fd0e 	bl	b84d8 <memset>
    if (ip.version() == 4) {
   b7abc:	7d23      	ldrb	r3, [r4, #20]
   b7abe:	2b04      	cmp	r3, #4
   b7ac0:	d11d      	bne.n	b7afe <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b7ac2:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b7ac6:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b7ac8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b7acc:	f7fe ffe0 	bl	b6a90 <inet_htons>
   b7ad0:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b7ad4:	6860      	ldr	r0, [r4, #4]
   b7ad6:	f7fe ffd3 	bl	b6a80 <inet_htonl>
   b7ada:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b7adc:	696b      	ldr	r3, [r5, #20]
   b7ade:	221c      	movs	r2, #28
   b7ae0:	6818      	ldr	r0, [r3, #0]
   b7ae2:	a903      	add	r1, sp, #12
   b7ae4:	f7fe fffc 	bl	b6ae0 <sock_connect>
   b7ae8:	2800      	cmp	r0, #0
   b7aea:	d1be      	bne.n	b7a6a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b7aec:	3404      	adds	r4, #4
   b7aee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7af0:	696d      	ldr	r5, [r5, #20]
   b7af2:	358c      	adds	r5, #140	; 0x8c
   b7af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7af6:	6823      	ldr	r3, [r4, #0]
   b7af8:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b7afa:	2401      	movs	r4, #1
   b7afc:	e7ba      	b.n	b7a74 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b7afe:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b7b02:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b7b04:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b7b08:	f7fe ffc2 	bl	b6a90 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7b0c:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b7b0e:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b7b12:	1d23      	adds	r3, r4, #4
   b7b14:	f104 0714 	add.w	r7, r4, #20
   b7b18:	6818      	ldr	r0, [r3, #0]
   b7b1a:	6859      	ldr	r1, [r3, #4]
   b7b1c:	4632      	mov	r2, r6
   b7b1e:	c203      	stmia	r2!, {r0, r1}
   b7b20:	3308      	adds	r3, #8
   b7b22:	42bb      	cmp	r3, r7
   b7b24:	4616      	mov	r6, r2
   b7b26:	d1f7      	bne.n	b7b18 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b7b28:	e7d8      	b.n	b7adc <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b7b2c <_ZN9TCPClient9availableEv>:
{
   b7b2c:	b530      	push	{r4, r5, lr}
   b7b2e:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b7b30:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b7b34:	b08b      	sub	sp, #44	; 0x2c
   b7b36:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b7b38:	b12b      	cbz	r3, b7b46 <_ZN9TCPClient9availableEv+0x1a>
   b7b3a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b7b3e:	429a      	cmp	r2, r3
   b7b40:	d101      	bne.n	b7b46 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b7b42:	f7ff ff6f 	bl	b7a24 <_ZN9TCPClient12flush_bufferEv>
   b7b46:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b7b48:	6808      	ldr	r0, [r1, #0]
   b7b4a:	2800      	cmp	r0, #0
   b7b4c:	db18      	blt.n	b7b80 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b7b4e:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b7b52:	2d7f      	cmp	r5, #127	; 0x7f
   b7b54:	d814      	bhi.n	b7b80 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b7b56:	3104      	adds	r1, #4
   b7b58:	2308      	movs	r3, #8
   b7b5a:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b7b5e:	4429      	add	r1, r5
   b7b60:	f7fe ffc6 	bl	b6af0 <sock_recv>
            if (ret > 0) {
   b7b64:	2800      	cmp	r0, #0
   b7b66:	dd13      	ble.n	b7b90 <_ZN9TCPClient9availableEv+0x64>
   b7b68:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b7b6a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7b6e:	b90a      	cbnz	r2, b7b74 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b7b70:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b7b74:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b7b76:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7b7a:	4410      	add	r0, r2
   b7b7c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b7b80:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b7b82:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b7b86:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b7b8a:	1ac0      	subs	r0, r0, r3
   b7b8c:	b00b      	add	sp, #44	; 0x2c
   b7b8e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b7b90:	f7ff f95a 	bl	b6e48 <__errno>
   b7b94:	6803      	ldr	r3, [r0, #0]
   b7b96:	2b0b      	cmp	r3, #11
   b7b98:	d0f2      	beq.n	b7b80 <_ZN9TCPClient9availableEv+0x54>
   b7b9a:	f7ff f955 	bl	b6e48 <__errno>
   b7b9e:	6803      	ldr	r3, [r0, #0]
   b7ba0:	2b0b      	cmp	r3, #11
   b7ba2:	d0ed      	beq.n	b7b80 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b7ba4:	2320      	movs	r3, #32
   b7ba6:	2500      	movs	r5, #0
   b7ba8:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b7bac:	f7ff f94c 	bl	b6e48 <__errno>
   b7bb0:	6803      	ldr	r3, [r0, #0]
   b7bb2:	9301      	str	r3, [sp, #4]
   b7bb4:	4b08      	ldr	r3, [pc, #32]	; (b7bd8 <_ZN9TCPClient9availableEv+0xac>)
   b7bb6:	4909      	ldr	r1, [pc, #36]	; (b7bdc <_ZN9TCPClient9availableEv+0xb0>)
   b7bb8:	9300      	str	r3, [sp, #0]
   b7bba:	aa02      	add	r2, sp, #8
   b7bbc:	462b      	mov	r3, r5
   b7bbe:	2032      	movs	r0, #50	; 0x32
   b7bc0:	f7ff f86e 	bl	b6ca0 <log_message>
                    sock_close(d_->sock);
   b7bc4:	6963      	ldr	r3, [r4, #20]
   b7bc6:	6818      	ldr	r0, [r3, #0]
   b7bc8:	f7fe ff82 	bl	b6ad0 <sock_close>
   b7bcc:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b7bce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7bd2:	601a      	str	r2, [r3, #0]
   b7bd4:	e7d4      	b.n	b7b80 <_ZN9TCPClient9availableEv+0x54>
   b7bd6:	bf00      	nop
   b7bd8:	000b987f 	.word	0x000b987f
   b7bdc:	000b9878 	.word	0x000b9878

000b7be0 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b7be0:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b7be2:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b7be4:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b7be6:	6818      	ldr	r0, [r3, #0]
   b7be8:	2800      	cmp	r0, #0
   b7bea:	db01      	blt.n	b7bf0 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b7bec:	f7fe ff70 	bl	b6ad0 <sock_close>
   b7bf0:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b7bf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7bf6:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b7bf8:	6960      	ldr	r0, [r4, #20]
   b7bfa:	2211      	movs	r2, #17
   b7bfc:	2100      	movs	r1, #0
   b7bfe:	308c      	adds	r0, #140	; 0x8c
   b7c00:	f000 fc6a 	bl	b84d8 <memset>
    flush_buffer();
   b7c04:	4620      	mov	r0, r4
}
   b7c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b7c0a:	f7ff bf0b 	b.w	b7a24 <_ZN9TCPClient12flush_bufferEv>

000b7c0e <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b7c0e:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b7c10:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b7c12:	4604      	mov	r4, r0
          total(0) {
   b7c14:	6001      	str	r1, [r0, #0]
   b7c16:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b7c1a:	3088      	adds	r0, #136	; 0x88
   b7c1c:	f7ff fa06 	bl	b702c <_ZN9IPAddressC1Ev>
}
   b7c20:	4620      	mov	r0, r4
   b7c22:	bd10      	pop	{r4, pc}

000b7c24 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b7c24:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b7c26:	2300      	movs	r3, #0
   b7c28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b7c2c:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b7c30:	4a0e      	ldr	r2, [pc, #56]	; (b7c6c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b7c32:	6103      	str	r3, [r0, #16]
   b7c34:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7c36:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b7c38:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7c3a:	20ac      	movs	r0, #172	; 0xac
   b7c3c:	9101      	str	r1, [sp, #4]
   b7c3e:	f7fc fa28 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b7c42:	1e05      	subs	r5, r0, #0
   b7c44:	f105 060c 	add.w	r6, r5, #12
   b7c48:	d008      	beq.n	b7c5c <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b7c4a:	2301      	movs	r3, #1
   b7c4c:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b7c50:	4b07      	ldr	r3, [pc, #28]	; (b7c70 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7c52:	9901      	ldr	r1, [sp, #4]
   b7c54:	602b      	str	r3, [r5, #0]
   b7c56:	4630      	mov	r0, r6
   b7c58:	f7ff ffd9 	bl	b7c0e <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b7c5c:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b7c5e:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b7c62:	f7ff fedf 	bl	b7a24 <_ZN9TCPClient12flush_bufferEv>
}
   b7c66:	b002      	add	sp, #8
   b7c68:	bd70      	pop	{r4, r5, r6, pc}
   b7c6a:	bf00      	nop
   b7c6c:	000b98b4 	.word	0x000b98b4
   b7c70:	000b9898 	.word	0x000b9898

000b7c74 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b7c74:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b7c76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b7c7a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b7c7c:	f7ff ffd2 	bl	b7c24 <_ZN9TCPClientC1Ei>
}
   b7c80:	4620      	mov	r0, r4
   b7c82:	bd10      	pop	{r4, pc}

000b7c84 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b7c84:	b510      	push	{r4, lr}
   b7c86:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b7c88:	6800      	ldr	r0, [r0, #0]
   b7c8a:	2800      	cmp	r0, #0
   b7c8c:	db01      	blt.n	b7c92 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b7c8e:	f7fe ff1f 	bl	b6ad0 <sock_close>
    }
}
   b7c92:	4620      	mov	r0, r4
   b7c94:	bd10      	pop	{r4, pc}

000b7c96 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b7c96:	300c      	adds	r0, #12
   b7c98:	f7ff bff4 	b.w	b7c84 <_ZN9TCPClient4DataD1Ev>

000b7c9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7c9c:	4b02      	ldr	r3, [pc, #8]	; (b7ca8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7c9e:	681a      	ldr	r2, [r3, #0]
   b7ca0:	4b02      	ldr	r3, [pc, #8]	; (b7cac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7ca2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7ca4:	4770      	bx	lr
   b7ca6:	bf00      	nop
   b7ca8:	2003e510 	.word	0x2003e510
   b7cac:	2003e6fc 	.word	0x2003e6fc

000b7cb0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7cb0:	4770      	bx	lr

000b7cb2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7cb2:	7441      	strb	r1, [r0, #17]
}
   b7cb4:	4770      	bx	lr

000b7cb6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7cb6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7cb8:	7c00      	ldrb	r0, [r0, #16]
   b7cba:	f7fe ffa1 	bl	b6c00 <hal_usart_available_data_for_write>
}
   b7cbe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7cc2:	bd08      	pop	{r3, pc}

000b7cc4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7cc4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7cc6:	7c00      	ldrb	r0, [r0, #16]
   b7cc8:	f7fe ff72 	bl	b6bb0 <hal_usart_available>
}
   b7ccc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7cd0:	bd08      	pop	{r3, pc}

000b7cd2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7cd2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7cd4:	7c00      	ldrb	r0, [r0, #16]
   b7cd6:	f7fe ff7b 	bl	b6bd0 <hal_usart_peek>
}
   b7cda:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7cde:	bd08      	pop	{r3, pc}

000b7ce0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7ce0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7ce2:	7c00      	ldrb	r0, [r0, #16]
   b7ce4:	f7fe ff6c 	bl	b6bc0 <hal_usart_read>
}
   b7ce8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7cec:	bd08      	pop	{r3, pc}

000b7cee <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7cee:	7c00      	ldrb	r0, [r0, #16]
   b7cf0:	f7fe bf76 	b.w	b6be0 <hal_usart_flush>

000b7cf4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7cf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7cf6:	7c45      	ldrb	r5, [r0, #17]
{
   b7cf8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7cfa:	b12d      	cbz	r5, b7d08 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7cfc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7cfe:	b003      	add	sp, #12
   b7d00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7d04:	f7fe bf4c 	b.w	b6ba0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7d08:	7c00      	ldrb	r0, [r0, #16]
   b7d0a:	9101      	str	r1, [sp, #4]
   b7d0c:	f7fe ff78 	bl	b6c00 <hal_usart_available_data_for_write>
   b7d10:	2800      	cmp	r0, #0
   b7d12:	9901      	ldr	r1, [sp, #4]
   b7d14:	dcf2      	bgt.n	b7cfc <_ZN11USARTSerial5writeEh+0x8>
}
   b7d16:	4628      	mov	r0, r5
   b7d18:	b003      	add	sp, #12
   b7d1a:	bd30      	pop	{r4, r5, pc}

000b7d1c <_ZN11USARTSerialD0Ev>:
   b7d1c:	b510      	push	{r4, lr}
   b7d1e:	2114      	movs	r1, #20
   b7d20:	4604      	mov	r4, r0
   b7d22:	f7fc f9bc 	bl	b409e <_ZdlPvj>
   b7d26:	4620      	mov	r0, r4
   b7d28:	bd10      	pop	{r4, pc}
	...

000b7d2c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7d2c:	b510      	push	{r4, lr}
   b7d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7d32:	4604      	mov	r4, r0
   b7d34:	4608      	mov	r0, r1
   b7d36:	4611      	mov	r1, r2
   b7d38:	2200      	movs	r2, #0
   b7d3a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7d3e:	4b04      	ldr	r3, [pc, #16]	; (b7d50 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7d40:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7d42:	2301      	movs	r3, #1
  _serial = serial;
   b7d44:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7d46:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7d48:	f7fe ff62 	bl	b6c10 <hal_usart_init_ex>
}
   b7d4c:	4620      	mov	r0, r4
   b7d4e:	bd10      	pop	{r4, pc}
   b7d50:	000b991c 	.word	0x000b991c

000b7d54 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7d54:	7441      	strb	r1, [r0, #17]
}
   b7d56:	4770      	bx	lr

000b7d58 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7d58:	4770      	bx	lr

000b7d5a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7d5a:	4770      	bx	lr

000b7d5c <_ZN9USBSerial4readEv>:
{
   b7d5c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7d5e:	2100      	movs	r1, #0
   b7d60:	7c00      	ldrb	r0, [r0, #16]
   b7d62:	f7fe ff7d 	bl	b6c60 <HAL_USB_USART_Receive_Data>
}
   b7d66:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7d6a:	bd08      	pop	{r3, pc}

000b7d6c <_ZN9USBSerial4peekEv>:
{
   b7d6c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7d6e:	2101      	movs	r1, #1
   b7d70:	7c00      	ldrb	r0, [r0, #16]
   b7d72:	f7fe ff75 	bl	b6c60 <HAL_USB_USART_Receive_Data>
}
   b7d76:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7d7a:	bd08      	pop	{r3, pc}

000b7d7c <_ZN9USBSerial17availableForWriteEv>:
{
   b7d7c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7d7e:	7c00      	ldrb	r0, [r0, #16]
   b7d80:	f7fe ff66 	bl	b6c50 <HAL_USB_USART_Available_Data_For_Write>
}
   b7d84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7d88:	bd08      	pop	{r3, pc}

000b7d8a <_ZN9USBSerial9availableEv>:
{
   b7d8a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7d8c:	7c00      	ldrb	r0, [r0, #16]
   b7d8e:	f7fe ff57 	bl	b6c40 <HAL_USB_USART_Available_Data>
}
   b7d92:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7d96:	bd08      	pop	{r3, pc}

000b7d98 <_ZN9USBSerial5writeEh>:
{
   b7d98:	b513      	push	{r0, r1, r4, lr}
   b7d9a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7d9c:	7c00      	ldrb	r0, [r0, #16]
{
   b7d9e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7da0:	f7fe ff56 	bl	b6c50 <HAL_USB_USART_Available_Data_For_Write>
   b7da4:	2800      	cmp	r0, #0
   b7da6:	9901      	ldr	r1, [sp, #4]
   b7da8:	dc01      	bgt.n	b7dae <_ZN9USBSerial5writeEh+0x16>
   b7daa:	7c60      	ldrb	r0, [r4, #17]
   b7dac:	b120      	cbz	r0, b7db8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7dae:	7c20      	ldrb	r0, [r4, #16]
   b7db0:	f7fe ff5e 	bl	b6c70 <HAL_USB_USART_Send_Data>
   b7db4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7db8:	b002      	add	sp, #8
   b7dba:	bd10      	pop	{r4, pc}

000b7dbc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7dbc:	7c00      	ldrb	r0, [r0, #16]
   b7dbe:	f7fe bf5f 	b.w	b6c80 <HAL_USB_USART_Flush_Data>

000b7dc2 <_ZN9USBSerialD0Ev>:
   b7dc2:	b510      	push	{r4, lr}
   b7dc4:	2114      	movs	r1, #20
   b7dc6:	4604      	mov	r4, r0
   b7dc8:	f7fc f969 	bl	b409e <_ZdlPvj>
   b7dcc:	4620      	mov	r0, r4
   b7dce:	bd10      	pop	{r4, pc}

000b7dd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7dd0:	b510      	push	{r4, lr}
   b7dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7dd6:	4604      	mov	r4, r0
   b7dd8:	4608      	mov	r0, r1
   b7dda:	2100      	movs	r1, #0
   b7ddc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7de0:	4b04      	ldr	r3, [pc, #16]	; (b7df4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7de2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7de4:	2301      	movs	r3, #1
  _serial = serial;
   b7de6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7de8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7dea:	4611      	mov	r1, r2
   b7dec:	f7fe ff18 	bl	b6c20 <HAL_USB_USART_Init>
}
   b7df0:	4620      	mov	r0, r4
   b7df2:	bd10      	pop	{r4, pc}
   b7df4:	000b994c 	.word	0x000b994c

000b7df8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7df8:	7c00      	ldrb	r0, [r0, #16]
   b7dfa:	2200      	movs	r2, #0
   b7dfc:	f7fe bf18 	b.w	b6c30 <HAL_USB_USART_Begin>

000b7e00 <_Z19acquireSerialBufferv>:
{
   b7e00:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7e02:	2214      	movs	r2, #20
{
   b7e04:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7e06:	2100      	movs	r1, #0
   b7e08:	f000 fb66 	bl	b84d8 <memset>
}
   b7e0c:	4620      	mov	r0, r4
   b7e0e:	bd10      	pop	{r4, pc}

000b7e10 <_Z16_fetch_usbserialv>:
{
   b7e10:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7e12:	4c0f      	ldr	r4, [pc, #60]	; (b7e50 <_Z16_fetch_usbserialv+0x40>)
{
   b7e14:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7e16:	a803      	add	r0, sp, #12
   b7e18:	f7ff fff2 	bl	b7e00 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7e1c:	7821      	ldrb	r1, [r4, #0]
   b7e1e:	f3bf 8f5b 	dmb	ish
   b7e22:	f011 0101 	ands.w	r1, r1, #1
   b7e26:	d10f      	bne.n	b7e48 <_Z16_fetch_usbserialv+0x38>
   b7e28:	4620      	mov	r0, r4
   b7e2a:	9101      	str	r1, [sp, #4]
   b7e2c:	f7fc f946 	bl	b40bc <__cxa_guard_acquire>
   b7e30:	9901      	ldr	r1, [sp, #4]
   b7e32:	b148      	cbz	r0, b7e48 <_Z16_fetch_usbserialv+0x38>
   b7e34:	aa03      	add	r2, sp, #12
   b7e36:	4807      	ldr	r0, [pc, #28]	; (b7e54 <_Z16_fetch_usbserialv+0x44>)
   b7e38:	f7ff ffca 	bl	b7dd0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7e3c:	4620      	mov	r0, r4
   b7e3e:	f7fc f942 	bl	b40c6 <__cxa_guard_release>
   b7e42:	4805      	ldr	r0, [pc, #20]	; (b7e58 <_Z16_fetch_usbserialv+0x48>)
   b7e44:	f000 fb2c 	bl	b84a0 <atexit>
	return _usbserial;
}
   b7e48:	4802      	ldr	r0, [pc, #8]	; (b7e54 <_Z16_fetch_usbserialv+0x44>)
   b7e4a:	b008      	add	sp, #32
   b7e4c:	bd10      	pop	{r4, pc}
   b7e4e:	bf00      	nop
   b7e50:	2003e700 	.word	0x2003e700
   b7e54:	2003e704 	.word	0x2003e704
   b7e58:	000b7d59 	.word	0x000b7d59

000b7e5c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b7e5c:	2200      	movs	r2, #0
   b7e5e:	6840      	ldr	r0, [r0, #4]
   b7e60:	4611      	mov	r1, r2
   b7e62:	f7fe bf81 	b.w	b6d68 <network_ready>

000b7e66 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7e66:	2200      	movs	r2, #0
   b7e68:	6840      	ldr	r0, [r0, #4]
   b7e6a:	4611      	mov	r1, r2
   b7e6c:	f7fe bf9c 	b.w	b6da8 <network_listening>

000b7e70 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7e70:	2200      	movs	r2, #0
   b7e72:	6840      	ldr	r0, [r0, #4]
   b7e74:	4611      	mov	r1, r2
   b7e76:	f7fe bfa7 	b.w	b6dc8 <network_get_listen_timeout>

000b7e7a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7e7a:	6840      	ldr	r0, [r0, #4]
   b7e7c:	2200      	movs	r2, #0
   b7e7e:	f7fe bf9b 	b.w	b6db8 <network_set_listen_timeout>

000b7e82 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7e82:	6840      	ldr	r0, [r0, #4]
   b7e84:	2200      	movs	r2, #0
   b7e86:	f081 0101 	eor.w	r1, r1, #1
   b7e8a:	f7fe bf85 	b.w	b6d98 <network_listen>

000b7e8e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7e8e:	2300      	movs	r3, #0
   b7e90:	6840      	ldr	r0, [r0, #4]
   b7e92:	461a      	mov	r2, r3
   b7e94:	4619      	mov	r1, r3
   b7e96:	f7fe bf77 	b.w	b6d88 <network_off>

000b7e9a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7e9a:	2300      	movs	r3, #0
   b7e9c:	6840      	ldr	r0, [r0, #4]
   b7e9e:	461a      	mov	r2, r3
   b7ea0:	4619      	mov	r1, r3
   b7ea2:	f7fe bf69 	b.w	b6d78 <network_on>

000b7ea6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7ea6:	2200      	movs	r2, #0
   b7ea8:	6840      	ldr	r0, [r0, #4]
   b7eaa:	4611      	mov	r1, r2
   b7eac:	f7fe bf4c 	b.w	b6d48 <network_connecting>

000b7eb0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7eb0:	6840      	ldr	r0, [r0, #4]
   b7eb2:	2200      	movs	r2, #0
   b7eb4:	2102      	movs	r1, #2
   b7eb6:	f7fe bf4f 	b.w	b6d58 <network_disconnect>

000b7eba <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7eba:	2300      	movs	r3, #0
   b7ebc:	6840      	ldr	r0, [r0, #4]
   b7ebe:	461a      	mov	r2, r3
   b7ec0:	f7fe bf3a 	b.w	b6d38 <network_connect>

000b7ec4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7ec4:	4b02      	ldr	r3, [pc, #8]	; (b7ed0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7ec6:	2204      	movs	r2, #4
   b7ec8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7eca:	4a02      	ldr	r2, [pc, #8]	; (b7ed4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7ecc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b7ece:	4770      	bx	lr
   b7ed0:	2003e718 	.word	0x2003e718
   b7ed4:	000b997c 	.word	0x000b997c

000b7ed8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7ed8:	4b01      	ldr	r3, [pc, #4]	; (b7ee0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7eda:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7edc:	4770      	bx	lr
   b7ede:	bf00      	nop
   b7ee0:	2003e514 	.word	0x2003e514

000b7ee4 <serialEventRun>:
{
   b7ee4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7ee6:	4b0b      	ldr	r3, [pc, #44]	; (b7f14 <serialEventRun+0x30>)
   b7ee8:	b143      	cbz	r3, b7efc <serialEventRun+0x18>
   b7eea:	f7ff ff91 	bl	b7e10 <_Z16_fetch_usbserialv>
   b7eee:	6803      	ldr	r3, [r0, #0]
   b7ef0:	691b      	ldr	r3, [r3, #16]
   b7ef2:	4798      	blx	r3
   b7ef4:	2800      	cmp	r0, #0
   b7ef6:	dd01      	ble.n	b7efc <serialEventRun+0x18>
        serialEvent();
   b7ef8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7efc:	4b06      	ldr	r3, [pc, #24]	; (b7f18 <serialEventRun+0x34>)
   b7efe:	b143      	cbz	r3, b7f12 <serialEventRun+0x2e>
   b7f00:	f000 f996 	bl	b8230 <_Z22__fetch_global_Serial1v>
   b7f04:	6803      	ldr	r3, [r0, #0]
   b7f06:	691b      	ldr	r3, [r3, #16]
   b7f08:	4798      	blx	r3
   b7f0a:	2800      	cmp	r0, #0
   b7f0c:	dd01      	ble.n	b7f12 <serialEventRun+0x2e>
        serialEvent1();
   b7f0e:	f3af 8000 	nop.w
}
   b7f12:	bd08      	pop	{r3, pc}
	...

000b7f1c <_post_loop>:
{
   b7f1c:	b508      	push	{r3, lr}
	serialEventRun();
   b7f1e:	f7ff ffe1 	bl	b7ee4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b7f22:	f7fe fcfd 	bl	b6920 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7f26:	4b01      	ldr	r3, [pc, #4]	; (b7f2c <_post_loop+0x10>)
   b7f28:	6018      	str	r0, [r3, #0]
}
   b7f2a:	bd08      	pop	{r3, pc}
   b7f2c:	2003e728 	.word	0x2003e728

000b7f30 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7f30:	4805      	ldr	r0, [pc, #20]	; (b7f48 <_Z33system_initialize_user_backup_ramv+0x18>)
   b7f32:	4a06      	ldr	r2, [pc, #24]	; (b7f4c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b7f34:	4906      	ldr	r1, [pc, #24]	; (b7f50 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b7f36:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b7f38:	1a12      	subs	r2, r2, r0
   b7f3a:	f000 fabf 	bl	b84bc <memcpy>
    __backup_sram_signature = signature;
   b7f3e:	4b05      	ldr	r3, [pc, #20]	; (b7f54 <_Z33system_initialize_user_backup_ramv+0x24>)
   b7f40:	4a05      	ldr	r2, [pc, #20]	; (b7f58 <_Z33system_initialize_user_backup_ramv+0x28>)
   b7f42:	601a      	str	r2, [r3, #0]
}
   b7f44:	bd08      	pop	{r3, pc}
   b7f46:	bf00      	nop
   b7f48:	2003f400 	.word	0x2003f400
   b7f4c:	2003f404 	.word	0x2003f404
   b7f50:	000b9c64 	.word	0x000b9c64
   b7f54:	2003f400 	.word	0x2003f400
   b7f58:	9a271c1e 	.word	0x9a271c1e

000b7f5c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b7f5c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7f5e:	2300      	movs	r3, #0
   b7f60:	9300      	str	r3, [sp, #0]
   b7f62:	461a      	mov	r2, r3
   b7f64:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7f68:	f7fe fec4 	bl	b6cf4 <system_ctrl_set_result>
}
   b7f6c:	b003      	add	sp, #12
   b7f6e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7f74 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b7f74:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b7f76:	8843      	ldrh	r3, [r0, #2]
   b7f78:	2b0a      	cmp	r3, #10
   b7f7a:	d008      	beq.n	b7f8e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b7f7c:	2b50      	cmp	r3, #80	; 0x50
   b7f7e:	d10b      	bne.n	b7f98 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b7f80:	4b09      	ldr	r3, [pc, #36]	; (b7fa8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b7f82:	681b      	ldr	r3, [r3, #0]
   b7f84:	b14b      	cbz	r3, b7f9a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b7f86:	b003      	add	sp, #12
   b7f88:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b7f8c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b7f8e:	f7ff ffe5 	bl	b7f5c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b7f92:	b003      	add	sp, #12
   b7f94:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7f98:	2300      	movs	r3, #0
   b7f9a:	9300      	str	r3, [sp, #0]
   b7f9c:	461a      	mov	r2, r3
   b7f9e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b7fa2:	f7fe fea7 	bl	b6cf4 <system_ctrl_set_result>
}
   b7fa6:	e7f4      	b.n	b7f92 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7fa8:	2003e724 	.word	0x2003e724

000b7fac <module_user_init_hook>:
{
   b7fac:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b7fae:	4812      	ldr	r0, [pc, #72]	; (b7ff8 <module_user_init_hook+0x4c>)
   b7fb0:	2100      	movs	r1, #0
   b7fb2:	f7fe ff59 	bl	b6e68 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7fb6:	4b11      	ldr	r3, [pc, #68]	; (b7ffc <module_user_init_hook+0x50>)
   b7fb8:	681a      	ldr	r2, [r3, #0]
   b7fba:	4b11      	ldr	r3, [pc, #68]	; (b8000 <module_user_init_hook+0x54>)
   b7fbc:	429a      	cmp	r2, r3
   b7fbe:	4b11      	ldr	r3, [pc, #68]	; (b8004 <module_user_init_hook+0x58>)
   b7fc0:	bf0c      	ite	eq
   b7fc2:	2201      	moveq	r2, #1
   b7fc4:	2200      	movne	r2, #0
   b7fc6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7fc8:	d001      	beq.n	b7fce <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7fca:	f7ff ffb1 	bl	b7f30 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b7fce:	f7fe fc97 	bl	b6900 <HAL_RNG_GetRandomNumber>
   b7fd2:	4604      	mov	r4, r0
    srand(seed);
   b7fd4:	f000 fa88 	bl	b84e8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7fd8:	4b0b      	ldr	r3, [pc, #44]	; (b8008 <module_user_init_hook+0x5c>)
   b7fda:	b113      	cbz	r3, b7fe2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7fdc:	4620      	mov	r0, r4
   b7fde:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b7fe2:	2100      	movs	r1, #0
   b7fe4:	4808      	ldr	r0, [pc, #32]	; (b8008 <module_user_init_hook+0x5c>)
   b7fe6:	f7fe fe9f 	bl	b6d28 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b7fee:	4807      	ldr	r0, [pc, #28]	; (b800c <module_user_init_hook+0x60>)
   b7ff0:	2100      	movs	r1, #0
   b7ff2:	f7fe be75 	b.w	b6ce0 <system_ctrl_set_app_request_handler>
   b7ff6:	bf00      	nop
   b7ff8:	000b7ed9 	.word	0x000b7ed9
   b7ffc:	2003f400 	.word	0x2003f400
   b8000:	9a271c1e 	.word	0x9a271c1e
   b8004:	2003e720 	.word	0x2003e720
   b8008:	00000000 	.word	0x00000000
   b800c:	000b7f75 	.word	0x000b7f75

000b8010 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8010:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b8012:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8014:	d902      	bls.n	b801c <pinAvailable+0xc>
    return false;
   b8016:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8018:	b002      	add	sp, #8
   b801a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b801c:	f1a0 030b 	sub.w	r3, r0, #11
   b8020:	2b02      	cmp	r3, #2
   b8022:	d81a      	bhi.n	b805a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8024:	4c17      	ldr	r4, [pc, #92]	; (b8084 <pinAvailable+0x74>)
   b8026:	7821      	ldrb	r1, [r4, #0]
   b8028:	f3bf 8f5b 	dmb	ish
   b802c:	f011 0101 	ands.w	r1, r1, #1
   b8030:	d10b      	bne.n	b804a <pinAvailable+0x3a>
   b8032:	4620      	mov	r0, r4
   b8034:	9101      	str	r1, [sp, #4]
   b8036:	f7fc f841 	bl	b40bc <__cxa_guard_acquire>
   b803a:	9901      	ldr	r1, [sp, #4]
   b803c:	b128      	cbz	r0, b804a <pinAvailable+0x3a>
   b803e:	4812      	ldr	r0, [pc, #72]	; (b8088 <pinAvailable+0x78>)
   b8040:	f7ff f9ae 	bl	b73a0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8044:	4620      	mov	r0, r4
   b8046:	f7fc f83e 	bl	b40c6 <__cxa_guard_release>
   b804a:	4b0f      	ldr	r3, [pc, #60]	; (b8088 <pinAvailable+0x78>)
   b804c:	7818      	ldrb	r0, [r3, #0]
   b804e:	f7fe fd7f 	bl	b6b50 <hal_spi_is_enabled>
   b8052:	2800      	cmp	r0, #0
   b8054:	d1df      	bne.n	b8016 <pinAvailable+0x6>
  return true; // 'pin' is available
   b8056:	2001      	movs	r0, #1
   b8058:	e7de      	b.n	b8018 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b805a:	2801      	cmp	r0, #1
   b805c:	d809      	bhi.n	b8072 <pinAvailable+0x62>
   b805e:	f000 f8a7 	bl	b81b0 <_Z19__fetch_global_Wirev>
   b8062:	2100      	movs	r1, #0
   b8064:	7c00      	ldrb	r0, [r0, #16]
   b8066:	f7fe fceb 	bl	b6a40 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b806a:	f080 0001 	eor.w	r0, r0, #1
   b806e:	b2c0      	uxtb	r0, r0
   b8070:	e7d2      	b.n	b8018 <pinAvailable+0x8>
   b8072:	3809      	subs	r0, #9
   b8074:	2801      	cmp	r0, #1
   b8076:	d8ee      	bhi.n	b8056 <pinAvailable+0x46>
   b8078:	f000 f8da 	bl	b8230 <_Z22__fetch_global_Serial1v>
   b807c:	7c00      	ldrb	r0, [r0, #16]
   b807e:	f7fe fdb7 	bl	b6bf0 <hal_usart_is_enabled>
   b8082:	e7f2      	b.n	b806a <pinAvailable+0x5a>
   b8084:	2003e6b8 	.word	0x2003e6b8
   b8088:	2003e6bc 	.word	0x2003e6bc

000b808c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b808c:	2823      	cmp	r0, #35	; 0x23
{
   b808e:	b538      	push	{r3, r4, r5, lr}
   b8090:	4604      	mov	r4, r0
   b8092:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8094:	d80a      	bhi.n	b80ac <pinMode+0x20>
   b8096:	29ff      	cmp	r1, #255	; 0xff
   b8098:	d008      	beq.n	b80ac <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b809a:	f7ff ffb9 	bl	b8010 <pinAvailable>
   b809e:	b128      	cbz	r0, b80ac <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b80a0:	4629      	mov	r1, r5
   b80a2:	4620      	mov	r0, r4
}
   b80a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b80a8:	f7fe bc4a 	b.w	b6940 <HAL_Pin_Mode>
}
   b80ac:	bd38      	pop	{r3, r4, r5, pc}

000b80ae <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b80ae:	b538      	push	{r3, r4, r5, lr}
   b80b0:	4604      	mov	r4, r0
   b80b2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b80b4:	f7fe fc4c 	bl	b6950 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b80b8:	28ff      	cmp	r0, #255	; 0xff
   b80ba:	d010      	beq.n	b80de <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b80bc:	2806      	cmp	r0, #6
   b80be:	d804      	bhi.n	b80ca <digitalWrite+0x1c>
   b80c0:	234d      	movs	r3, #77	; 0x4d
   b80c2:	fa23 f000 	lsr.w	r0, r3, r0
   b80c6:	07c3      	lsls	r3, r0, #31
   b80c8:	d409      	bmi.n	b80de <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b80ca:	4620      	mov	r0, r4
   b80cc:	f7ff ffa0 	bl	b8010 <pinAvailable>
   b80d0:	b128      	cbz	r0, b80de <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b80d2:	4629      	mov	r1, r5
   b80d4:	4620      	mov	r0, r4
}
   b80d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b80da:	f7fe bc41 	b.w	b6960 <HAL_GPIO_Write>
}
   b80de:	bd38      	pop	{r3, r4, r5, pc}

000b80e0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b80e0:	b510      	push	{r4, lr}
   b80e2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b80e4:	f7fe fc34 	bl	b6950 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b80e8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b80ea:	b2db      	uxtb	r3, r3
   b80ec:	2b01      	cmp	r3, #1
   b80ee:	d908      	bls.n	b8102 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b80f0:	4620      	mov	r0, r4
   b80f2:	f7ff ff8d 	bl	b8010 <pinAvailable>
   b80f6:	b120      	cbz	r0, b8102 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b80f8:	4620      	mov	r0, r4
}
   b80fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b80fe:	f7fe bc37 	b.w	b6970 <HAL_GPIO_Read>
}
   b8102:	2000      	movs	r0, #0
   b8104:	bd10      	pop	{r4, pc}

000b8106 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b8106:	280d      	cmp	r0, #13
{
   b8108:	b510      	push	{r4, lr}
   b810a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b810c:	bf9c      	itt	ls
   b810e:	340e      	addls	r4, #14
   b8110:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   b8112:	4620      	mov	r0, r4
   b8114:	f7ff ff7c 	bl	b8010 <pinAvailable>
   b8118:	b150      	cbz	r0, b8130 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   b811a:	2103      	movs	r1, #3
   b811c:	4620      	mov	r0, r4
   b811e:	f7fe fc07 	bl	b6930 <HAL_Validate_Pin_Function>
   b8122:	2803      	cmp	r0, #3
   b8124:	d104      	bne.n	b8130 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b8126:	4620      	mov	r0, r4
}
   b8128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b812c:	f7fe bc30 	b.w	b6990 <hal_adc_read>
}
   b8130:	2000      	movs	r0, #0
   b8132:	bd10      	pop	{r4, pc}

000b8134 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
   b8134:	b538      	push	{r3, r4, r5, lr}
   b8136:	4604      	mov	r4, r0
   b8138:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b813a:	f7ff ff69 	bl	b8010 <pinAvailable>
   b813e:	b1f0      	cbz	r0, b817e <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
   b8140:	2104      	movs	r1, #4
   b8142:	4620      	mov	r0, r4
   b8144:	f7fe fbf4 	bl	b6930 <HAL_Validate_Pin_Function>
   b8148:	2804      	cmp	r0, #4
   b814a:	d105      	bne.n	b8158 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b814c:	b2a9      	uxth	r1, r5
   b814e:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b8150:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b8154:	f7fe bc14 	b.w	b6980 <HAL_DAC_Write>
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
   b8158:	2102      	movs	r1, #2
   b815a:	4620      	mov	r0, r4
   b815c:	f7fe fbe8 	bl	b6930 <HAL_Validate_Pin_Function>
   b8160:	2802      	cmp	r0, #2
   b8162:	d10c      	bne.n	b817e <_Z11analogWritetm+0x4a>
        PinMode mode = HAL_Get_Pin_Mode(pin);
   b8164:	4620      	mov	r0, r4
   b8166:	f7fe fbf3 	bl	b6950 <HAL_Get_Pin_Mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b816a:	2801      	cmp	r0, #1
   b816c:	d001      	beq.n	b8172 <_Z11analogWritetm+0x3e>
   b816e:	2804      	cmp	r0, #4
   b8170:	d105      	bne.n	b817e <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b8172:	4629      	mov	r1, r5
   b8174:	4620      	mov	r0, r4
}
   b8176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b817a:	f7fe bc11 	b.w	b69a0 <hal_pwm_write_ext>
}
   b817e:	bd38      	pop	{r3, r4, r5, pc}

000b8180 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8180:	4770      	bx	lr
	...

000b8184 <_Z17acquireWireBufferv>:
{
   b8184:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8186:	2520      	movs	r5, #32
   b8188:	2314      	movs	r3, #20
{
   b818a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b818c:	6003      	str	r3, [r0, #0]
   b818e:	6085      	str	r5, [r0, #8]
   b8190:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b8192:	4906      	ldr	r1, [pc, #24]	; (b81ac <_Z17acquireWireBufferv+0x28>)
   b8194:	4628      	mov	r0, r5
   b8196:	f000 f86f 	bl	b8278 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b819a:	4904      	ldr	r1, [pc, #16]	; (b81ac <_Z17acquireWireBufferv+0x28>)
	};
   b819c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b819e:	4628      	mov	r0, r5
   b81a0:	f000 f86a 	bl	b8278 <_ZnajRKSt9nothrow_t>
	};
   b81a4:	60e0      	str	r0, [r4, #12]
}
   b81a6:	4620      	mov	r0, r4
   b81a8:	bd38      	pop	{r3, r4, r5, pc}
   b81aa:	bf00      	nop
   b81ac:	000b99b0 	.word	0x000b99b0

000b81b0 <_Z19__fetch_global_Wirev>:
{
   b81b0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b81b2:	4d0e      	ldr	r5, [pc, #56]	; (b81ec <_Z19__fetch_global_Wirev+0x3c>)
   b81b4:	7829      	ldrb	r1, [r5, #0]
   b81b6:	f3bf 8f5b 	dmb	ish
   b81ba:	f011 0401 	ands.w	r4, r1, #1
{
   b81be:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b81c0:	d111      	bne.n	b81e6 <_Z19__fetch_global_Wirev+0x36>
   b81c2:	4628      	mov	r0, r5
   b81c4:	f7fb ff7a 	bl	b40bc <__cxa_guard_acquire>
   b81c8:	b168      	cbz	r0, b81e6 <_Z19__fetch_global_Wirev+0x36>
   b81ca:	a801      	add	r0, sp, #4
   b81cc:	f7ff ffda 	bl	b8184 <_Z17acquireWireBufferv>
   b81d0:	aa01      	add	r2, sp, #4
   b81d2:	4621      	mov	r1, r4
   b81d4:	4806      	ldr	r0, [pc, #24]	; (b81f0 <_Z19__fetch_global_Wirev+0x40>)
   b81d6:	f7fe fec5 	bl	b6f64 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b81da:	4628      	mov	r0, r5
   b81dc:	f7fb ff73 	bl	b40c6 <__cxa_guard_release>
   b81e0:	4804      	ldr	r0, [pc, #16]	; (b81f4 <_Z19__fetch_global_Wirev+0x44>)
   b81e2:	f000 f95d 	bl	b84a0 <atexit>
	return wire;
}
   b81e6:	4802      	ldr	r0, [pc, #8]	; (b81f0 <_Z19__fetch_global_Wirev+0x40>)
   b81e8:	b007      	add	sp, #28
   b81ea:	bd30      	pop	{r4, r5, pc}
   b81ec:	2003e72c 	.word	0x2003e72c
   b81f0:	2003e730 	.word	0x2003e730
   b81f4:	000b8181 	.word	0x000b8181

000b81f8 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b81f8:	4770      	bx	lr
	...

000b81fc <_Z20acquireSerial1Bufferv>:
{
   b81fc:	b538      	push	{r3, r4, r5, lr}
   b81fe:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8200:	2514      	movs	r5, #20
   b8202:	462a      	mov	r2, r5
   b8204:	2100      	movs	r1, #0
   b8206:	f000 f967 	bl	b84d8 <memset>
   b820a:	8025      	strh	r5, [r4, #0]
   b820c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b820e:	4907      	ldr	r1, [pc, #28]	; (b822c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8210:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8212:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8214:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8216:	f000 f82f 	bl	b8278 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b821a:	4904      	ldr	r1, [pc, #16]	; (b822c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b821c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b821e:	4628      	mov	r0, r5
   b8220:	f000 f82a 	bl	b8278 <_ZnajRKSt9nothrow_t>
    };
   b8224:	60e0      	str	r0, [r4, #12]
}
   b8226:	4620      	mov	r0, r4
   b8228:	bd38      	pop	{r3, r4, r5, pc}
   b822a:	bf00      	nop
   b822c:	000b99b0 	.word	0x000b99b0

000b8230 <_Z22__fetch_global_Serial1v>:
{
   b8230:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8232:	4d0e      	ldr	r5, [pc, #56]	; (b826c <_Z22__fetch_global_Serial1v+0x3c>)
   b8234:	7829      	ldrb	r1, [r5, #0]
   b8236:	f3bf 8f5b 	dmb	ish
   b823a:	f011 0401 	ands.w	r4, r1, #1
{
   b823e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8240:	d111      	bne.n	b8266 <_Z22__fetch_global_Serial1v+0x36>
   b8242:	4628      	mov	r0, r5
   b8244:	f7fb ff3a 	bl	b40bc <__cxa_guard_acquire>
   b8248:	b168      	cbz	r0, b8266 <_Z22__fetch_global_Serial1v+0x36>
   b824a:	a801      	add	r0, sp, #4
   b824c:	f7ff ffd6 	bl	b81fc <_Z20acquireSerial1Bufferv>
   b8250:	aa01      	add	r2, sp, #4
   b8252:	4621      	mov	r1, r4
   b8254:	4806      	ldr	r0, [pc, #24]	; (b8270 <_Z22__fetch_global_Serial1v+0x40>)
   b8256:	f7ff fd69 	bl	b7d2c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b825a:	4628      	mov	r0, r5
   b825c:	f7fb ff33 	bl	b40c6 <__cxa_guard_release>
   b8260:	4804      	ldr	r0, [pc, #16]	; (b8274 <_Z22__fetch_global_Serial1v+0x44>)
   b8262:	f000 f91d 	bl	b84a0 <atexit>
    return serial1;
}
   b8266:	4802      	ldr	r0, [pc, #8]	; (b8270 <_Z22__fetch_global_Serial1v+0x40>)
   b8268:	b007      	add	sp, #28
   b826a:	bd30      	pop	{r4, r5, pc}
   b826c:	2003e744 	.word	0x2003e744
   b8270:	2003e748 	.word	0x2003e748
   b8274:	000b81f9 	.word	0x000b81f9

000b8278 <_ZnajRKSt9nothrow_t>:
   b8278:	f7fb bf0d 	b.w	b4096 <_Znaj>

000b827c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b827c:	4901      	ldr	r1, [pc, #4]	; (b8284 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b827e:	f000 b8f9 	b.w	b8474 <_ZNKSt9type_infoeqERKS_>
   b8282:	bf00      	nop
   b8284:	000b99cc 	.word	0x000b99cc

000b8288 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b8288:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b828a:	2400      	movs	r4, #0
   b828c:	2310      	movs	r3, #16
   b828e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b8292:	6803      	ldr	r3, [r0, #0]
   b8294:	4615      	mov	r5, r2
   b8296:	699e      	ldr	r6, [r3, #24]
   b8298:	6812      	ldr	r2, [r2, #0]
   b829a:	466b      	mov	r3, sp
   b829c:	e9cd 4400 	strd	r4, r4, [sp]
   b82a0:	47b0      	blx	r6
   b82a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b82a6:	f003 0306 	and.w	r3, r3, #6
   b82aa:	2b06      	cmp	r3, #6
   b82ac:	bf03      	ittte	eq
   b82ae:	9b00      	ldreq	r3, [sp, #0]
   b82b0:	602b      	streq	r3, [r5, #0]
   b82b2:	2001      	moveq	r0, #1
   b82b4:	4620      	movne	r0, r4
   b82b6:	b004      	add	sp, #16
   b82b8:	bd70      	pop	{r4, r5, r6, pc}

000b82ba <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b82ba:	9800      	ldr	r0, [sp, #0]
   b82bc:	4290      	cmp	r0, r2
   b82be:	bf14      	ite	ne
   b82c0:	2001      	movne	r0, #1
   b82c2:	2006      	moveq	r0, #6
   b82c4:	4770      	bx	lr
	...

000b82c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b82c8:	b510      	push	{r4, lr}
   b82ca:	4b03      	ldr	r3, [pc, #12]	; (b82d8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b82cc:	6003      	str	r3, [r0, #0]
   b82ce:	4604      	mov	r4, r0
   b82d0:	f000 f8cd 	bl	b846e <_ZNSt9type_infoD1Ev>
   b82d4:	4620      	mov	r0, r4
   b82d6:	bd10      	pop	{r4, pc}
   b82d8:	000b9a0c 	.word	0x000b9a0c

000b82dc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b82dc:	b510      	push	{r4, lr}
   b82de:	4604      	mov	r4, r0
   b82e0:	f7ff fff2 	bl	b82c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b82e4:	4620      	mov	r0, r4
   b82e6:	2108      	movs	r1, #8
   b82e8:	f7fb fed9 	bl	b409e <_ZdlPvj>
   b82ec:	4620      	mov	r0, r4
   b82ee:	bd10      	pop	{r4, pc}

000b82f0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b82f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b82f4:	461f      	mov	r7, r3
   b82f6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b82fa:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b82fe:	4598      	cmp	r8, r3
   b8300:	4606      	mov	r6, r0
   b8302:	4615      	mov	r5, r2
   b8304:	d107      	bne.n	b8316 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8306:	9907      	ldr	r1, [sp, #28]
   b8308:	f000 f8b4 	bl	b8474 <_ZNKSt9type_infoeqERKS_>
   b830c:	b118      	cbz	r0, b8316 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b830e:	7165      	strb	r5, [r4, #5]
   b8310:	2000      	movs	r0, #0
   b8312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b8316:	4639      	mov	r1, r7
   b8318:	4630      	mov	r0, r6
   b831a:	f000 f8ab 	bl	b8474 <_ZNKSt9type_infoeqERKS_>
   b831e:	2800      	cmp	r0, #0
   b8320:	d0f6      	beq.n	b8310 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b8322:	2301      	movs	r3, #1
   b8324:	f8c4 8000 	str.w	r8, [r4]
   b8328:	7125      	strb	r5, [r4, #4]
   b832a:	71a3      	strb	r3, [r4, #6]
   b832c:	e7f0      	b.n	b8310 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b832e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b832e:	b538      	push	{r3, r4, r5, lr}
   b8330:	4615      	mov	r5, r2
   b8332:	461c      	mov	r4, r3
   b8334:	f000 f89e 	bl	b8474 <_ZNKSt9type_infoeqERKS_>
   b8338:	b120      	cbz	r0, b8344 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b833a:	2308      	movs	r3, #8
   b833c:	60e3      	str	r3, [r4, #12]
   b833e:	2306      	movs	r3, #6
   b8340:	6025      	str	r5, [r4, #0]
   b8342:	7123      	strb	r3, [r4, #4]
   b8344:	bd38      	pop	{r3, r4, r5, pc}

000b8346 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b8346:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8348:	4605      	mov	r5, r0
   b834a:	460c      	mov	r4, r1
   b834c:	9201      	str	r2, [sp, #4]
   b834e:	461e      	mov	r6, r3
   b8350:	f000 f890 	bl	b8474 <_ZNKSt9type_infoeqERKS_>
   b8354:	b950      	cbnz	r0, b836c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b8356:	2e03      	cmp	r6, #3
   b8358:	d808      	bhi.n	b836c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b835a:	6823      	ldr	r3, [r4, #0]
   b835c:	9a01      	ldr	r2, [sp, #4]
   b835e:	695b      	ldr	r3, [r3, #20]
   b8360:	4629      	mov	r1, r5
   b8362:	4620      	mov	r0, r4
   b8364:	b002      	add	sp, #8
   b8366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b836a:	4718      	bx	r3
   b836c:	b002      	add	sp, #8
   b836e:	bd70      	pop	{r4, r5, r6, pc}

000b8370 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b8370:	b510      	push	{r4, lr}
   b8372:	4b03      	ldr	r3, [pc, #12]	; (b8380 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b8374:	6003      	str	r3, [r0, #0]
   b8376:	4604      	mov	r4, r0
   b8378:	f7ff ffa6 	bl	b82c8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b837c:	4620      	mov	r0, r4
   b837e:	bd10      	pop	{r4, pc}
   b8380:	000b9a6c 	.word	0x000b9a6c

000b8384 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b8384:	b510      	push	{r4, lr}
   b8386:	4604      	mov	r4, r0
   b8388:	f7ff fff2 	bl	b8370 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b838c:	4620      	mov	r0, r4
   b838e:	210c      	movs	r1, #12
   b8390:	f7fb fe85 	bl	b409e <_ZdlPvj>
   b8394:	4620      	mov	r0, r4
   b8396:	bd10      	pop	{r4, pc}

000b8398 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b8398:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b839a:	9f08      	ldr	r7, [sp, #32]
   b839c:	4297      	cmp	r7, r2
   b839e:	4605      	mov	r5, r0
   b83a0:	460e      	mov	r6, r1
   b83a2:	4614      	mov	r4, r2
   b83a4:	d00a      	beq.n	b83bc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b83a6:	68a8      	ldr	r0, [r5, #8]
   b83a8:	6802      	ldr	r2, [r0, #0]
   b83aa:	9708      	str	r7, [sp, #32]
   b83ac:	6a15      	ldr	r5, [r2, #32]
   b83ae:	4631      	mov	r1, r6
   b83b0:	4622      	mov	r2, r4
   b83b2:	46ac      	mov	ip, r5
   b83b4:	b003      	add	sp, #12
   b83b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b83ba:	4760      	bx	ip
   b83bc:	4619      	mov	r1, r3
   b83be:	9301      	str	r3, [sp, #4]
   b83c0:	f000 f858 	bl	b8474 <_ZNKSt9type_infoeqERKS_>
   b83c4:	9b01      	ldr	r3, [sp, #4]
   b83c6:	2800      	cmp	r0, #0
   b83c8:	d0ed      	beq.n	b83a6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b83ca:	2006      	movs	r0, #6
   b83cc:	b003      	add	sp, #12
   b83ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b83d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b83d0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b83d4:	460d      	mov	r5, r1
   b83d6:	4619      	mov	r1, r3
   b83d8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b83dc:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b83e0:	4681      	mov	r9, r0
   b83e2:	4617      	mov	r7, r2
   b83e4:	4698      	mov	r8, r3
   b83e6:	f000 f845 	bl	b8474 <_ZNKSt9type_infoeqERKS_>
   b83ea:	b190      	cbz	r0, b8412 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b83ec:	2d00      	cmp	r5, #0
   b83ee:	6034      	str	r4, [r6, #0]
   b83f0:	7137      	strb	r7, [r6, #4]
   b83f2:	db09      	blt.n	b8408 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b83f4:	1961      	adds	r1, r4, r5
   b83f6:	458a      	cmp	sl, r1
   b83f8:	bf0c      	ite	eq
   b83fa:	2106      	moveq	r1, #6
   b83fc:	2101      	movne	r1, #1
   b83fe:	71b1      	strb	r1, [r6, #6]
   b8400:	2000      	movs	r0, #0
   b8402:	b001      	add	sp, #4
   b8404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8408:	3502      	adds	r5, #2
   b840a:	d1f9      	bne.n	b8400 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b840c:	2301      	movs	r3, #1
   b840e:	71b3      	strb	r3, [r6, #6]
   b8410:	e7f6      	b.n	b8400 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8412:	4554      	cmp	r4, sl
   b8414:	d106      	bne.n	b8424 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8416:	4659      	mov	r1, fp
   b8418:	4648      	mov	r0, r9
   b841a:	f000 f82b 	bl	b8474 <_ZNKSt9type_infoeqERKS_>
   b841e:	b108      	cbz	r0, b8424 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8420:	7177      	strb	r7, [r6, #5]
   b8422:	e7ed      	b.n	b8400 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8424:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b8428:	6803      	ldr	r3, [r0, #0]
   b842a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b842e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b8432:	69dc      	ldr	r4, [r3, #28]
   b8434:	463a      	mov	r2, r7
   b8436:	4643      	mov	r3, r8
   b8438:	4629      	mov	r1, r5
   b843a:	46a4      	mov	ip, r4
   b843c:	b001      	add	sp, #4
   b843e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8442:	4760      	bx	ip

000b8444 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b8444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8448:	4607      	mov	r7, r0
   b844a:	460c      	mov	r4, r1
   b844c:	4615      	mov	r5, r2
   b844e:	461e      	mov	r6, r3
   b8450:	f7ff ff6d 	bl	b832e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8454:	b948      	cbnz	r0, b846a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b8456:	68b8      	ldr	r0, [r7, #8]
   b8458:	6803      	ldr	r3, [r0, #0]
   b845a:	699f      	ldr	r7, [r3, #24]
   b845c:	462a      	mov	r2, r5
   b845e:	4633      	mov	r3, r6
   b8460:	4621      	mov	r1, r4
   b8462:	46bc      	mov	ip, r7
   b8464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b8468:	4760      	bx	ip
   b846a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b846e <_ZNSt9type_infoD1Ev>:
   b846e:	4770      	bx	lr

000b8470 <_ZNKSt9type_info14__is_pointer_pEv>:
   b8470:	2000      	movs	r0, #0
   b8472:	4770      	bx	lr

000b8474 <_ZNKSt9type_infoeqERKS_>:
   b8474:	4281      	cmp	r1, r0
   b8476:	b508      	push	{r3, lr}
   b8478:	d00e      	beq.n	b8498 <_ZNKSt9type_infoeqERKS_+0x24>
   b847a:	6840      	ldr	r0, [r0, #4]
   b847c:	7803      	ldrb	r3, [r0, #0]
   b847e:	2b2a      	cmp	r3, #42	; 0x2a
   b8480:	d00c      	beq.n	b849c <_ZNKSt9type_infoeqERKS_+0x28>
   b8482:	6849      	ldr	r1, [r1, #4]
   b8484:	780b      	ldrb	r3, [r1, #0]
   b8486:	2b2a      	cmp	r3, #42	; 0x2a
   b8488:	bf08      	it	eq
   b848a:	3101      	addeq	r1, #1
   b848c:	f000 f85a 	bl	b8544 <strcmp>
   b8490:	fab0 f080 	clz	r0, r0
   b8494:	0940      	lsrs	r0, r0, #5
   b8496:	bd08      	pop	{r3, pc}
   b8498:	2001      	movs	r0, #1
   b849a:	e7fc      	b.n	b8496 <_ZNKSt9type_infoeqERKS_+0x22>
   b849c:	2000      	movs	r0, #0
   b849e:	e7fa      	b.n	b8496 <_ZNKSt9type_infoeqERKS_+0x22>

000b84a0 <atexit>:
   b84a0:	2300      	movs	r3, #0
   b84a2:	4601      	mov	r1, r0
   b84a4:	461a      	mov	r2, r3
   b84a6:	4618      	mov	r0, r3
   b84a8:	f000 b8fe 	b.w	b86a8 <__register_exitproc>

000b84ac <atoi>:
   b84ac:	220a      	movs	r2, #10
   b84ae:	2100      	movs	r1, #0
   b84b0:	f000 b8f0 	b.w	b8694 <strtol>

000b84b4 <atol>:
   b84b4:	220a      	movs	r2, #10
   b84b6:	2100      	movs	r1, #0
   b84b8:	f000 b8ec 	b.w	b8694 <strtol>

000b84bc <memcpy>:
   b84bc:	440a      	add	r2, r1
   b84be:	4291      	cmp	r1, r2
   b84c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b84c4:	d100      	bne.n	b84c8 <memcpy+0xc>
   b84c6:	4770      	bx	lr
   b84c8:	b510      	push	{r4, lr}
   b84ca:	f811 4b01 	ldrb.w	r4, [r1], #1
   b84ce:	f803 4f01 	strb.w	r4, [r3, #1]!
   b84d2:	4291      	cmp	r1, r2
   b84d4:	d1f9      	bne.n	b84ca <memcpy+0xe>
   b84d6:	bd10      	pop	{r4, pc}

000b84d8 <memset>:
   b84d8:	4402      	add	r2, r0
   b84da:	4603      	mov	r3, r0
   b84dc:	4293      	cmp	r3, r2
   b84de:	d100      	bne.n	b84e2 <memset+0xa>
   b84e0:	4770      	bx	lr
   b84e2:	f803 1b01 	strb.w	r1, [r3], #1
   b84e6:	e7f9      	b.n	b84dc <memset+0x4>

000b84e8 <srand>:
   b84e8:	b538      	push	{r3, r4, r5, lr}
   b84ea:	4b10      	ldr	r3, [pc, #64]	; (b852c <srand+0x44>)
   b84ec:	681d      	ldr	r5, [r3, #0]
   b84ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b84f0:	4604      	mov	r4, r0
   b84f2:	b9b3      	cbnz	r3, b8522 <srand+0x3a>
   b84f4:	2018      	movs	r0, #24
   b84f6:	f7fe fc7f 	bl	b6df8 <malloc>
   b84fa:	4602      	mov	r2, r0
   b84fc:	63a8      	str	r0, [r5, #56]	; 0x38
   b84fe:	b920      	cbnz	r0, b850a <srand+0x22>
   b8500:	4b0b      	ldr	r3, [pc, #44]	; (b8530 <srand+0x48>)
   b8502:	480c      	ldr	r0, [pc, #48]	; (b8534 <srand+0x4c>)
   b8504:	2142      	movs	r1, #66	; 0x42
   b8506:	f7fe fca7 	bl	b6e58 <__assert_func>
   b850a:	490b      	ldr	r1, [pc, #44]	; (b8538 <srand+0x50>)
   b850c:	4b0b      	ldr	r3, [pc, #44]	; (b853c <srand+0x54>)
   b850e:	e9c0 1300 	strd	r1, r3, [r0]
   b8512:	4b0b      	ldr	r3, [pc, #44]	; (b8540 <srand+0x58>)
   b8514:	6083      	str	r3, [r0, #8]
   b8516:	230b      	movs	r3, #11
   b8518:	8183      	strh	r3, [r0, #12]
   b851a:	2100      	movs	r1, #0
   b851c:	2001      	movs	r0, #1
   b851e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8522:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8524:	2200      	movs	r2, #0
   b8526:	611c      	str	r4, [r3, #16]
   b8528:	615a      	str	r2, [r3, #20]
   b852a:	bd38      	pop	{r3, r4, r5, pc}
   b852c:	2003e514 	.word	0x2003e514
   b8530:	000b9aa5 	.word	0x000b9aa5
   b8534:	000b9abc 	.word	0x000b9abc
   b8538:	abcd330e 	.word	0xabcd330e
   b853c:	e66d1234 	.word	0xe66d1234
   b8540:	0005deec 	.word	0x0005deec

000b8544 <strcmp>:
   b8544:	f810 2b01 	ldrb.w	r2, [r0], #1
   b8548:	f811 3b01 	ldrb.w	r3, [r1], #1
   b854c:	2a01      	cmp	r2, #1
   b854e:	bf28      	it	cs
   b8550:	429a      	cmpcs	r2, r3
   b8552:	d0f7      	beq.n	b8544 <strcmp>
   b8554:	1ad0      	subs	r0, r2, r3
   b8556:	4770      	bx	lr

000b8558 <strlen>:
   b8558:	4603      	mov	r3, r0
   b855a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b855e:	2a00      	cmp	r2, #0
   b8560:	d1fb      	bne.n	b855a <strlen+0x2>
   b8562:	1a18      	subs	r0, r3, r0
   b8564:	3801      	subs	r0, #1
   b8566:	4770      	bx	lr

000b8568 <strncpy>:
   b8568:	b510      	push	{r4, lr}
   b856a:	3901      	subs	r1, #1
   b856c:	4603      	mov	r3, r0
   b856e:	b132      	cbz	r2, b857e <strncpy+0x16>
   b8570:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8574:	f803 4b01 	strb.w	r4, [r3], #1
   b8578:	3a01      	subs	r2, #1
   b857a:	2c00      	cmp	r4, #0
   b857c:	d1f7      	bne.n	b856e <strncpy+0x6>
   b857e:	441a      	add	r2, r3
   b8580:	2100      	movs	r1, #0
   b8582:	4293      	cmp	r3, r2
   b8584:	d100      	bne.n	b8588 <strncpy+0x20>
   b8586:	bd10      	pop	{r4, pc}
   b8588:	f803 1b01 	strb.w	r1, [r3], #1
   b858c:	e7f9      	b.n	b8582 <strncpy+0x1a>
	...

000b8590 <_strtol_l.constprop.0>:
   b8590:	2b01      	cmp	r3, #1
   b8592:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8596:	d001      	beq.n	b859c <_strtol_l.constprop.0+0xc>
   b8598:	2b24      	cmp	r3, #36	; 0x24
   b859a:	d906      	bls.n	b85aa <_strtol_l.constprop.0+0x1a>
   b859c:	f7fe fc54 	bl	b6e48 <__errno>
   b85a0:	2316      	movs	r3, #22
   b85a2:	6003      	str	r3, [r0, #0]
   b85a4:	2000      	movs	r0, #0
   b85a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b85aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b8690 <_strtol_l.constprop.0+0x100>
   b85ae:	460d      	mov	r5, r1
   b85b0:	462e      	mov	r6, r5
   b85b2:	f815 4b01 	ldrb.w	r4, [r5], #1
   b85b6:	f814 700c 	ldrb.w	r7, [r4, ip]
   b85ba:	f017 0708 	ands.w	r7, r7, #8
   b85be:	d1f7      	bne.n	b85b0 <_strtol_l.constprop.0+0x20>
   b85c0:	2c2d      	cmp	r4, #45	; 0x2d
   b85c2:	d132      	bne.n	b862a <_strtol_l.constprop.0+0x9a>
   b85c4:	782c      	ldrb	r4, [r5, #0]
   b85c6:	2701      	movs	r7, #1
   b85c8:	1cb5      	adds	r5, r6, #2
   b85ca:	2b00      	cmp	r3, #0
   b85cc:	d05b      	beq.n	b8686 <_strtol_l.constprop.0+0xf6>
   b85ce:	2b10      	cmp	r3, #16
   b85d0:	d109      	bne.n	b85e6 <_strtol_l.constprop.0+0x56>
   b85d2:	2c30      	cmp	r4, #48	; 0x30
   b85d4:	d107      	bne.n	b85e6 <_strtol_l.constprop.0+0x56>
   b85d6:	782c      	ldrb	r4, [r5, #0]
   b85d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b85dc:	2c58      	cmp	r4, #88	; 0x58
   b85de:	d14d      	bne.n	b867c <_strtol_l.constprop.0+0xec>
   b85e0:	786c      	ldrb	r4, [r5, #1]
   b85e2:	2310      	movs	r3, #16
   b85e4:	3502      	adds	r5, #2
   b85e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b85ea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b85ee:	f04f 0c00 	mov.w	ip, #0
   b85f2:	fbb8 f9f3 	udiv	r9, r8, r3
   b85f6:	4666      	mov	r6, ip
   b85f8:	fb03 8a19 	mls	sl, r3, r9, r8
   b85fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b8600:	f1be 0f09 	cmp.w	lr, #9
   b8604:	d816      	bhi.n	b8634 <_strtol_l.constprop.0+0xa4>
   b8606:	4674      	mov	r4, lr
   b8608:	42a3      	cmp	r3, r4
   b860a:	dd24      	ble.n	b8656 <_strtol_l.constprop.0+0xc6>
   b860c:	f1bc 0f00 	cmp.w	ip, #0
   b8610:	db1e      	blt.n	b8650 <_strtol_l.constprop.0+0xc0>
   b8612:	45b1      	cmp	r9, r6
   b8614:	d31c      	bcc.n	b8650 <_strtol_l.constprop.0+0xc0>
   b8616:	d101      	bne.n	b861c <_strtol_l.constprop.0+0x8c>
   b8618:	45a2      	cmp	sl, r4
   b861a:	db19      	blt.n	b8650 <_strtol_l.constprop.0+0xc0>
   b861c:	fb06 4603 	mla	r6, r6, r3, r4
   b8620:	f04f 0c01 	mov.w	ip, #1
   b8624:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8628:	e7e8      	b.n	b85fc <_strtol_l.constprop.0+0x6c>
   b862a:	2c2b      	cmp	r4, #43	; 0x2b
   b862c:	bf04      	itt	eq
   b862e:	782c      	ldrbeq	r4, [r5, #0]
   b8630:	1cb5      	addeq	r5, r6, #2
   b8632:	e7ca      	b.n	b85ca <_strtol_l.constprop.0+0x3a>
   b8634:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b8638:	f1be 0f19 	cmp.w	lr, #25
   b863c:	d801      	bhi.n	b8642 <_strtol_l.constprop.0+0xb2>
   b863e:	3c37      	subs	r4, #55	; 0x37
   b8640:	e7e2      	b.n	b8608 <_strtol_l.constprop.0+0x78>
   b8642:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b8646:	f1be 0f19 	cmp.w	lr, #25
   b864a:	d804      	bhi.n	b8656 <_strtol_l.constprop.0+0xc6>
   b864c:	3c57      	subs	r4, #87	; 0x57
   b864e:	e7db      	b.n	b8608 <_strtol_l.constprop.0+0x78>
   b8650:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8654:	e7e6      	b.n	b8624 <_strtol_l.constprop.0+0x94>
   b8656:	f1bc 0f00 	cmp.w	ip, #0
   b865a:	da05      	bge.n	b8668 <_strtol_l.constprop.0+0xd8>
   b865c:	2322      	movs	r3, #34	; 0x22
   b865e:	6003      	str	r3, [r0, #0]
   b8660:	4646      	mov	r6, r8
   b8662:	b942      	cbnz	r2, b8676 <_strtol_l.constprop.0+0xe6>
   b8664:	4630      	mov	r0, r6
   b8666:	e79e      	b.n	b85a6 <_strtol_l.constprop.0+0x16>
   b8668:	b107      	cbz	r7, b866c <_strtol_l.constprop.0+0xdc>
   b866a:	4276      	negs	r6, r6
   b866c:	2a00      	cmp	r2, #0
   b866e:	d0f9      	beq.n	b8664 <_strtol_l.constprop.0+0xd4>
   b8670:	f1bc 0f00 	cmp.w	ip, #0
   b8674:	d000      	beq.n	b8678 <_strtol_l.constprop.0+0xe8>
   b8676:	1e69      	subs	r1, r5, #1
   b8678:	6011      	str	r1, [r2, #0]
   b867a:	e7f3      	b.n	b8664 <_strtol_l.constprop.0+0xd4>
   b867c:	2430      	movs	r4, #48	; 0x30
   b867e:	2b00      	cmp	r3, #0
   b8680:	d1b1      	bne.n	b85e6 <_strtol_l.constprop.0+0x56>
   b8682:	2308      	movs	r3, #8
   b8684:	e7af      	b.n	b85e6 <_strtol_l.constprop.0+0x56>
   b8686:	2c30      	cmp	r4, #48	; 0x30
   b8688:	d0a5      	beq.n	b85d6 <_strtol_l.constprop.0+0x46>
   b868a:	230a      	movs	r3, #10
   b868c:	e7ab      	b.n	b85e6 <_strtol_l.constprop.0+0x56>
   b868e:	bf00      	nop
   b8690:	000b9b16 	.word	0x000b9b16

000b8694 <strtol>:
   b8694:	4613      	mov	r3, r2
   b8696:	460a      	mov	r2, r1
   b8698:	4601      	mov	r1, r0
   b869a:	4802      	ldr	r0, [pc, #8]	; (b86a4 <strtol+0x10>)
   b869c:	6800      	ldr	r0, [r0, #0]
   b869e:	f7ff bf77 	b.w	b8590 <_strtol_l.constprop.0>
   b86a2:	bf00      	nop
   b86a4:	2003e514 	.word	0x2003e514

000b86a8 <__register_exitproc>:
   b86a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b86ac:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8768 <__register_exitproc+0xc0>
   b86b0:	4606      	mov	r6, r0
   b86b2:	f8d8 0000 	ldr.w	r0, [r8]
   b86b6:	461f      	mov	r7, r3
   b86b8:	460d      	mov	r5, r1
   b86ba:	4691      	mov	r9, r2
   b86bc:	f000 f856 	bl	b876c <__retarget_lock_acquire_recursive>
   b86c0:	4b25      	ldr	r3, [pc, #148]	; (b8758 <__register_exitproc+0xb0>)
   b86c2:	681c      	ldr	r4, [r3, #0]
   b86c4:	b934      	cbnz	r4, b86d4 <__register_exitproc+0x2c>
   b86c6:	4c25      	ldr	r4, [pc, #148]	; (b875c <__register_exitproc+0xb4>)
   b86c8:	601c      	str	r4, [r3, #0]
   b86ca:	4b25      	ldr	r3, [pc, #148]	; (b8760 <__register_exitproc+0xb8>)
   b86cc:	b113      	cbz	r3, b86d4 <__register_exitproc+0x2c>
   b86ce:	681b      	ldr	r3, [r3, #0]
   b86d0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b86d4:	6863      	ldr	r3, [r4, #4]
   b86d6:	2b1f      	cmp	r3, #31
   b86d8:	dd07      	ble.n	b86ea <__register_exitproc+0x42>
   b86da:	f8d8 0000 	ldr.w	r0, [r8]
   b86de:	f000 f847 	bl	b8770 <__retarget_lock_release_recursive>
   b86e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b86e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b86ea:	b34e      	cbz	r6, b8740 <__register_exitproc+0x98>
   b86ec:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b86f0:	b988      	cbnz	r0, b8716 <__register_exitproc+0x6e>
   b86f2:	4b1c      	ldr	r3, [pc, #112]	; (b8764 <__register_exitproc+0xbc>)
   b86f4:	b923      	cbnz	r3, b8700 <__register_exitproc+0x58>
   b86f6:	f8d8 0000 	ldr.w	r0, [r8]
   b86fa:	f000 f838 	bl	b876e <__retarget_lock_release>
   b86fe:	e7f0      	b.n	b86e2 <__register_exitproc+0x3a>
   b8700:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8704:	f7fe fb78 	bl	b6df8 <malloc>
   b8708:	2800      	cmp	r0, #0
   b870a:	d0f4      	beq.n	b86f6 <__register_exitproc+0x4e>
   b870c:	2300      	movs	r3, #0
   b870e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8712:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8716:	6863      	ldr	r3, [r4, #4]
   b8718:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b871c:	2201      	movs	r2, #1
   b871e:	409a      	lsls	r2, r3
   b8720:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8724:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8728:	4313      	orrs	r3, r2
   b872a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b872e:	2e02      	cmp	r6, #2
   b8730:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8734:	bf02      	ittt	eq
   b8736:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b873a:	4313      	orreq	r3, r2
   b873c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8740:	6863      	ldr	r3, [r4, #4]
   b8742:	f8d8 0000 	ldr.w	r0, [r8]
   b8746:	1c5a      	adds	r2, r3, #1
   b8748:	3302      	adds	r3, #2
   b874a:	6062      	str	r2, [r4, #4]
   b874c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8750:	f000 f80e 	bl	b8770 <__retarget_lock_release_recursive>
   b8754:	2000      	movs	r0, #0
   b8756:	e7c6      	b.n	b86e6 <__register_exitproc+0x3e>
   b8758:	2003e7e8 	.word	0x2003e7e8
   b875c:	2003e75c 	.word	0x2003e75c
   b8760:	00000000 	.word	0x00000000
   b8764:	000b6df9 	.word	0x000b6df9
   b8768:	2003e578 	.word	0x2003e578

000b876c <__retarget_lock_acquire_recursive>:
   b876c:	4770      	bx	lr

000b876e <__retarget_lock_release>:
   b876e:	4770      	bx	lr

000b8770 <__retarget_lock_release_recursive>:
   b8770:	4770      	bx	lr

000b8772 <link_code_end>:
	...

000b8774 <dynalib_user>:
   b8774:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b8784:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b8794:	7620 7269 7574 6c61 3100 3000 2500 0069      virtual.1.0.%i.
   b87a4:	6c25 0069 6863 6972 7473 6169 696e 7974     %li.christianity
   b87b4:	6900 006e 756f 0074 7770 006d 7764 6100     .in.out.pwm.dw.a
   b87c4:	0077 6163 6564 6c2f 6465 6300 6461 2f65     w.cade/led.cade/
   b87d4:	7562 7474 6e6f 0073 0041 0043 6567 3976     buttons.A.C.gev9
   b87e4:	6c55 4857 7075 3853 4379 4a42 7732 4470     UlWHupS8yCBJ2wpD
   b87f4:	4458 6d4e 5436 4d48 3075 536f 6c00 6261     XDNm6THMu0oS.lab
   b8804:	742e 6568 6377 2e6c 6f63 006d               .thewcl.com.

000b8810 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   b8810:	6c62 6b6e 6e69 0066 6576 0072 2e31 2e31     blnkinf.ver.1.1.
   b8820:	0030 2d68 6562 7461 3400 0035 7562 6666     0.h-beat.45.buff
   b8830:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
   b8840:	6974 6c63 2065 7241 6f67 006e 7562 6c69     ticle Argon.buil
   b8850:	0064 754a 206c 3620 3220 3230 2032 3331     d.Jul  6 2022 13
   b8860:	303a 3a38 3931 0000                          :08:19...

000b8869 <_ZL4font>:
   b8869:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b8879:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b8889:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b8899:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b88a9:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b88b9:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b88c9:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b88d9:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b88e9:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b88f9:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b8909:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b8919:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b8929:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b8939:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b8949:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b8959:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b8969:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b8979:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b8989:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b8999:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b89a9:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b89b9:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b89c9:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b89d9:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b89e9:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b89f9:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b8a09:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b8a19:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b8a29:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b8a39:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b8a49:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b8a59:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b8a69:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b8a79:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b8a89:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b8a99:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b8aa9:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b8ab9:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b8ac9:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b8ad9:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b8ae9:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b8af9:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b8b09:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b8b19:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b8b29:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b8b39:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b8b49:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b8b59:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b8b69:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b8b79:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b8b89:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b8b99:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b8ba9:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b8bb9:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b8bc9:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b8bd9:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b8be9:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b8bf9:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b8c09:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b8c19:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b8c29:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b8c39:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b8c49:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b8c59:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b8c69:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b8c79:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b8c89:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b8c99:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b8ca9:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b8cb9:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b8cc9:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b8cd9:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b8ce9:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b8cf9:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b8d09:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b8d19:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b8d29:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b8d39:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b8d49:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b8d59:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
   b8d69:	0000                                         ...

000b8d6c <_ZTV12Adafruit_GFX>:
	...
   b8d7c:	536d 000b 7261 000b 40a5 000b 4d73 000b     mS..ar...@..sM..
   b8d8c:	4d75 000b 4da7 000b 4d83 000b 4d95 000b     uM...M...M...M..
   b8d9c:	4cb5 000b 4d73 000b 4f9f 000b 4f9d 000b     .L..sM...O...O..
   b8dac:	4dbf 000b 4dfd 000b 4e37 000b 4e7d 000b     .M...M..7N..}N..
   b8dbc:	4e99 000b 4f1d 000b 6564 6166 6c75 2074     .N...O..default 
   b8dcc:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   b8ddc:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   b8dec:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   b8dfc:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000b8e08 <_ZTVN8particle11SPISettingsE>:
	...
   b8e10:	54a9 000b 547b 000b 547d 000b               .T..{T..}T..

000b8e1c <_ZL12splash1_data>:
   b8e1c:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   b8e2c:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   b8e3c:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   b8e4c:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   b8e5c:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   b8e6c:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   b8e84:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   b8e94:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   b8ea4:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   b8eb4:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   b8ec4:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   b8ed4:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   b8ee4:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   b8ef4:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   b8f04:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   b8f14:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   b8f24:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   b8f34:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   b8f44:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   b8f54:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   b8f64:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   b8f74:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   b8f84:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   b8f94:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   b8fac:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   b8fc4:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   b8fd4:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   b8fe4:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   b8ff4:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   b9004:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   b9014:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   b9024:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   b9034:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   b9044:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   b9054:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   b9064:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   b9074:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   b9084:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   b9094:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   b90a4:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   b90b4:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   b90c4:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   b90d4:	fdff 5b6b 6adb c0fd                         ..k[.j..

000b90dc <_ZL12splash2_data>:
   b90dc:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b90ec:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b90fc:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b9118:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b9128:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b9138:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b9148:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b9158:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b9168:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b9178:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b9188:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b9198:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b91a8:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b91b8:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b91c8:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b91d8:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b91e8:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b91f8:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b9208:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b9218:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b9228:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b9238:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b9248:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b9258:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b9270:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b9280:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b9290:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b92a0:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b92b0:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b92bc <_ZTV16Adafruit_SSD1306>:
	...
   b92c4:	54fd 000b 5515 000b 536d 000b 7261 000b     .T...U..mS..ar..
   b92d4:	5529 000b 4d73 000b 4d75 000b 4da7 000b     )U..sM..uM...M..
   b92e4:	4d83 000b 4d95 000b 4cb5 000b 4d73 000b     .M...M...L..sM..
   b92f4:	4f9f 000b 56c7 000b 5c6f 000b 5c21 000b     .O...V..o\..!\..
   b9304:	4e37 000b 4e7d 000b 4e99 000b 4f1d 000b     7N..}N...N...O..

000b9314 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b9314:	8000 e0c0 f8f0 fefc                         ........

000b931c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b931c:	0100 0703 1f0f 7f3f                         ......?.

000b9324 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b9324:	d5ae a880                                   ....

000b9328 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b9328:	00d3 8d40                                   ..@.

000b932c <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b932c:	0020 c8a1                                    ...

000b9330 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b9330:	40db a6a4 af2e                              .@....

000b9336 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b9336:	02da 8f81                                   ....

000b933a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b933a:	12da                                         ...

000b933d <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b933d:	02da                                         ...

000b9340 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b9340:	0022 21ff 0000 4d04 5451 0454 0600 514d     "..!...MQTT...MQ
   b9350:	7349 7064 0003 0000                         Isdp....

000b9358 <_ZL22BlynkReadHandlerVector>:
   b9358:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b9368:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b9378:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b9388:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b9398:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b93a8:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b93b8:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b93c8:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b93d8:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b93e8:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b93f8:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b9408:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b9418:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b9428:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b9438:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b9448:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b9458:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b9468:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b9478:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b9488:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b9498:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b94a8:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b94b8:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b94c8:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b94d8:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b94e8:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b94f8:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b9508:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b9518:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b9528:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b9538:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..
   b9548:	6731 000b 6731 000b 6731 000b 6731 000b     1g..1g..1g..1g..

000b9558 <_ZL23BlynkWriteHandlerVector>:
   b9558:	6733 000b 425d 000b 6733 000b 6733 000b     3g..]B..3g..3g..
   b9568:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b9578:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b9588:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b9598:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b95a8:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b95b8:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b95c8:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b95d8:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b95e8:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b95f8:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b9608:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b9618:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b9628:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b9638:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b9648:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b9658:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b9668:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b9678:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b9688:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b9698:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b96a8:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b96b8:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b96c8:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b96d8:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b96e8:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b96f8:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b9708:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b9718:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b9728:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b9738:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..
   b9748:	6733 000b 6733 000b 6733 000b 6733 000b     3g..3g..3g..3g..

000b9758 <_ZTV16OledWingAdafruit>:
	...
   b9760:	6761 000b 6781 000b 536d 000b 7261 000b     ag...g..mS..ar..
   b9770:	5529 000b 4d73 000b 4d75 000b 4da7 000b     )U..sM..uM...M..
   b9780:	4d83 000b 4d95 000b 4cb5 000b 4d73 000b     .M...M...L..sM..
   b9790:	4f9f 000b 56c7 000b 5c6f 000b 5c21 000b     .O...V..o\..!\..
   b97a0:	4e37 000b 4e7d 000b 4e99 000b 4f1d 000b     7N..}N...N...O..

000b97b0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b97b8 <_ZTVN5spark13EthernetClassE>:
	...
   b97c0:	6eef 000b 6ee5 000b 6edb 000b 6ed1 000b     .n...n...n...n..
   b97d0:	6ec5 000b 6eb9 000b 713d 000b 7145 000b     .n...n..=q..Eq..
   b97e0:	6ead 000b 6ea5 000b 6e9b 000b 6e91 000b     .n...n...n...n..
   b97f0:	7175 000b                                   uq..

000b97f4 <_ZTV7TwoWire>:
	...
   b97fc:	6f0d 000b 6f57 000b 6f2f 000b 6f0f 000b     .o..Wo../o...o..
   b980c:	6f37 000b 6f3f 000b 6f47 000b 6f4f 000b     7o..?o..Go..Oo..

000b981c <_ZTV9IPAddress>:
	...
   b9824:	6fc9 000b 6fb9 000b 6fbb 000b 7061 0070     .o...o...o..app.

000b9834 <_ZTVN5spark12NetworkClassE>:
	...
   b983c:	70fd 000b 7107 000b 7111 000b 711b 000b     .p...q...q...q..
   b984c:	7125 000b 7131 000b 713d 000b 7145 000b     %q..1q..=q..Eq..
   b985c:	714d 000b 7159 000b 7161 000b 716b 000b     Mq..Yq..aq..kq..
   b986c:	7175 000b                                   uq..

000b9870 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b9870:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   b9880:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000b9890 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9898:	7741 000b 7765 000b 7c97 000b 7773 000b     Aw..ew...|..sw..
   b98a8:	7745 000b                                   Ew..

000b98ac <_ZTV9TCPClient>:
	...
   b98b4:	77f1 000b 7825 000b 76bd 000b 76d7 000b     .w..%x...v...v..
   b98c4:	7b2d 000b 7701 000b 79a3 000b 7735 000b     -{...w...y..5w..
   b98d4:	7a35 000b 7875 000b 79d1 000b 7be1 000b     5z..ux...y...{..
   b98e4:	7971 000b 7737 000b 76e9 000b 7779 000b     qy..7w...v..yw..
   b98f4:	7855 000b 5925 252d 2d6d 6425 2554 3a48     Ux..%Y-%m-%dT%H:
   b9904:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b9914 <_ZTV11USARTSerial>:
	...
   b991c:	7cb1 000b 7d1d 000b 7cf5 000b 7261 000b     .|...}...|..ar..
   b992c:	7cc5 000b 7ce1 000b 7cd3 000b 7cef 000b     .|...|...|...|..
   b993c:	7cb3 000b 7cb7 000b                         .|...|..

000b9944 <_ZTV9USBSerial>:
	...
   b994c:	7d5b 000b 7dc3 000b 7d99 000b 7261 000b     [}...}...}..ar..
   b995c:	7d8b 000b 7d5d 000b 7d6d 000b 7dbd 000b     .}..]}..m}...}..
   b996c:	7d7d 000b 7d55 000b                         }}..U}..

000b9974 <_ZTVN5spark9WiFiClassE>:
	...
   b997c:	7ebb 000b 7eb1 000b 7ea7 000b 7e5d 000b     .~...~...~..]~..
   b998c:	7e9b 000b 7e8f 000b 713d 000b 7145 000b     .~...~..=q..Eq..
   b999c:	7e83 000b 7e7b 000b 7e71 000b 7e67 000b     .~..{~..q~..g~..
   b99ac:	7175 000b                                   uq..

000b99b0 <_ZSt7nothrow>:
	...

000b99b1 <_ZTSSt19_Sp_make_shared_tag>:
   b99b1:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b99c1:	6572 5f64 6174 0067 0000                     red_tag....

000b99cc <_ZTISt19_Sp_make_shared_tag>:
   b99cc:	9a0c 000b 99b1 000b                         ........

000b99d4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b99d4:	9a6c 000b 99e0 000b 9a90 000b               l...........

000b99e0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b99e0:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b99f0:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b9a00:	0045 0000                                   E...

000b9a04 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b9a04:	0000 0000 99d4 000b 82c9 000b 82dd 000b     ................
   b9a14:	8471 000b 8471 000b 8347 000b 8289 000b     q...q...G.......
   b9a24:	832f 000b 82f1 000b 82bb 000b               /...........

000b9a30 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b9a30:	9a6c 000b 9a3c 000b 99d4 000b               l...<.......

000b9a3c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b9a3c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b9a4c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b9a5c:	666e 456f 0000 0000                         nfoE....

000b9a64 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b9a64:	0000 0000 9a30 000b 8371 000b 8385 000b     ....0...q.......
   b9a74:	8471 000b 8471 000b 8347 000b 8289 000b     q...q...G.......
   b9a84:	8445 000b 83d1 000b 8399 000b               E...........

000b9a90 <_ZTISt9type_info>:
   b9a90:	9a0c 000b 9a98 000b                         ........

000b9a98 <_ZTSSt9type_info>:
   b9a98:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b9aa8:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b9ab8:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b9ac8:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b9ad8:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b9ae8:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b9af8:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b9b08:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000b9b15 <_ctype_>:
   b9b15:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   b9b25:	2020 2020 2020 2020 2020 2020 2020 2020                     
   b9b35:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   b9b45:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   b9b55:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   b9b65:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   b9b75:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   b9b85:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   b9b95:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000b9c16 <link_const_variable_data_end>:
	...

000b9c18 <link_constructors_location>:
   b9c18:	000b4c3d 	.word	0x000b4c3d
   b9c1c:	000b6e81 	.word	0x000b6e81
   b9c20:	000b6ef9 	.word	0x000b6ef9
   b9c24:	000b70ed 	.word	0x000b70ed
   b9c28:	000b724d 	.word	0x000b724d
   b9c2c:	000b7389 	.word	0x000b7389
   b9c30:	000b7699 	.word	0x000b7699
   b9c34:	000b7c9d 	.word	0x000b7c9d
   b9c38:	000b7ec5 	.word	0x000b7ec5

000b9c3c <link_constructors_end>:
   b9c3c:	00000000 	.word	0x00000000
